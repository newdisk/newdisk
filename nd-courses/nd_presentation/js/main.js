"use strict";

var _data;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *   пример упражнения singleChoice:
 *    {
 *      "id": 2,
 *      "title": "Упражнение №1",
 *      "location": "page02",
 *      "hasSound": false,
 *      "type": "exercise",
 *      "data": {
 *        "attempts": 3,  // кол-во попыток
 *        "shuffle": true,  // мешать ответы?
 *        "showAnswer": false, // показывать правильный ответ в конце
 *        "taskText": "Упражнение на одиночный выбор, какой ответ верный?",
 *        "questionList": [{
 *          "label": "Правильный ответ",
 *          "right": 1
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        }],
 *      "messages": ["Правильный ответ!",
 *                  "Ответ неверный!"]
 *      }
 *    }
 *
 *
 *   звук страниц укладывать в папку audio страницы, файл звука должен иметь название:
 *   «page-папка главы-папка страницы.mp3» Пример: page-chapter04-page04.mp3
 */
var courseStructure = {
  "course": "Презентация: обеспечь себе успех",
  "description": "Модульный курс для дистанционного обучения",
  "chapters": [{
    "chapter_id": 1,
    "chapter_location": "chapter01",
    "title": "Введение",
    "description": "Презентация: обеспечь себе успех",
    "pages": [{
      "page_id": 1, //01
      "title": "Презентация: обеспечь себе успех",
      "location": "page01",
      "hasSound": true,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //02
      "title": "Введение",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //03
      "title": "Как построено обучение",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //04
      "title": "Введение: предварительный тест",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //05
      "title": "Предварительный тест",
      "location": "page05",
      "hasSound": false,
      "type": "test",
      "data": {
        "messages": [""]
      }
    }] // end of pages array in chapter 1 (intro)
  }, // end of chapter
  {
    "chapter_id": 2,
    "chapter_location": "chapter02",
    "title": "Глава 1",
    "description": "Глава 1. Определение понятия «презентация», ее отличие от других типов коммуникации",
    "pages": [{
      "page_id": 1, //06
      "title": "Определение понятия «презентация», ее отличие от других типов коммуникации",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //07
      "title": "Как изменилось понимание «презентации»?",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //08
      "title": "Определения презентации",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //09
      "title": "Задание 1",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "taskText": "",
        "questionList": [{
          "label": "Аудитория (собравшиеся люди) ",
          "order": 0
        }, {
          "label": "Информация (смысловое содержание) ",
          "order": 1
        }, {
          "label": "Продуманная форма подачи информации ",
          "order": 1
        }, {
          "label": "Цели презентующего ",
          "order": 2
        }, {
          "label": "Новизна информации",
          "order": -1
        }, {
          "label": "Специально подготовленное помещение",
          "order": -1
        }, {
          "label": "Заранее разосланные приглашения",
          "order": -1
        }, {
          "label": "Сувениры, подарки",
          "order": -1
        }],
        "messages": ['Совершенно верно! <br/><p>Для любой презентации характерны 4 стержневых признака (или составляющих), без которых она не будет презентацией: цели, аудитория (собравшиеся), информация (смысловое содержание), форма (в которой информация подается). <br/>Специально подготовленное помещение, слайды, фуршет, поздравления относятся к «форме», которую может выбрать презентатор-выступающий для достижения своих целей. Новизна информации также не является необходимым свойством, так как нередко на презентациях сообщаются известные факты, но с определенной целью (например, побудить аудиторию к какому-то действию).</p>', "Ответ неверный. <br/><p>Попытайтесь выполнить задание снова.</p>", "Подумайте еще. <br/><p>Некоторые из указанных вами характеристик отнюдь не обязательны для любой презентации.</p>", 'Закройте это окно и посмотрите правильный ответ. <br/><p>Для любой презентации характерны 4 стержневых признака (или составляющих), без которых она не будет презентацией: цели, аудитория (собравшиеся), информация (смысловое содержание), форма (в которой информация подается). <br/>Специально подготовленное помещение, слайды, фуршет, поздравления относятся к «форме», которую может выбрать презентатор-выступающий для достижения своих целей. Новизна информации также не является необходимым свойством, так как нередко на презентациях сообщаются известные факты, но с определенной целью (например, побудить аудиторию к какому-то действию).</p>']
      }
    }, {
      "page_id": 5, //10
      "title": "Четыре основных составляющих презентации",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //11
      "title": "Задание 2",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Не презентации"
        }, {
          "id": 1,
          "label": "Презентации"
        }],
        "questionList": [{
          "label": "Отчет руководству о проделанной работе",
          "right": 1
        }, {
          "label": "Обсуждение с коллегами планов на будущий квартал",
          "right": 0
        }, {
          "label": "Представление новых продуктов потенциальным клиентам",
          "right": 1
        }, {
          "label": "Рассказ родственникам о путешествии, предпринятом прошлым летом",
          "right": 0
        }, {
          "label": "Выступление на школьном вечере с рассказом о необычной профессии",
          "right": 1
        }, {
          "label": "Рассказ о вашем профессиональном опыте на собеседовании",
          "right": 1
        }],
        "messages": ["Абсолютно правильно!<br/><p>Виды коммуникаций, в которых заложены очевидные цели, можно смело назвать презентациями и выделить зеленым цветом. <br/>При этом остальные виды коммуникаций могут стать презентацией, если выступающий сформулировал для себя определенную цель и осознанно выбрал содержание и форму презентации в соответствии с этой целью.<br/>Например, если вы рассказываете родственникам о путешествии с целью занять у них денег на новый вояж, вы должны построить этот рассказ по законам эффективной презентации, иначе денег вы не получите. Совсем по-другому вы будете о нем рассказывать, если ваша цель – пригласить их в совместное путешествие или, наоборот, отговорить от идеи отдыхать вместе.</p>", "Вы ошиблись. <br/><p>Попытайтесь выполнить задание снова.</p>", "Подумайте еще. <br/><p>Вспомните основные характеристики презентации.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Виды коммуникаций, в которых заложены очевидные цели, можно смело назвать презентациями и выделить зеленым цветом. <br/>При этом остальные виды коммуникаций могут стать презентацией, если выступающий сформулировал для себя определенную цель и осознанно выбрал содержание и форму презентации в соответствии с этой целью.<br/>Например, если вы рассказываете родственникам о путешествии с целью занять у них денег на новый вояж, вы должны построить этот рассказ по законам эффективной презентации, иначе денег вы не получите. Совсем по-другому вы будете о нем рассказывать, если ваша цель – пригласить их в совместное путешествие или, наоборот, отговорить от идеи отдыхать вместе.</p>"]
      }
    }, {
      "page_id": 7, //12
      "title": "Виды презентаций",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //13
      "title": "Завершающий этап разговора",
      "location": "page08",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "label": "Аудитория",
            "order": 0
          }, {
            "label": "Цель",
            "order": 1
          }, {
            "label": "Информация",
            "order": 2
          }, {
            "label": "Форма",
            "order": 3
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>Именно от состава аудитории и формулирования целей презентации будет зависеть отбор информации (содержания) и поиск наиболее эффективной формы подачи материала.</p>", "Вы допустили ошибку. <br/><p>Попробуйте расположить признаки презентации в другом порядке.</p>", "Подумайте еще. <br/><p>Какие-то признаки по-прежнему не на своем месте.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Именно от состава аудитории и формулирования целей презентации будет зависеть отбор информации (содержания) и поиск наиболее эффективной формы подачи материала.</p>"]
      }
    }, {
      "page_id": 9, //14
      "title": "Задание 4",
      "location": "page09",
      "hasSound": false,
      "type": "note_exercise",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 3,
        "useColumns": false,
        "maxlength": 500,
        "titles": [""],
        "questionList": [{
          "label": "Аудитория – выпускники вашей школы.",
          "right": "Агитировать выпускников к поступлению в ваш вуз (или отговорить выпускников поступать в ваш вуз)."
        }, {
          "label": "Аудитория – директор фирмы, в которой вы бы хотели работать.",
          "right": "Убедить, что вы получили достойное образование, которое позволит успешно выполнять профессиональные задачи"
        }, {
          "label": "Аудитория – компания знакомых, состоящая из ваших сверстников.",
          "right": "Развлечь рассказом о веселой студенческой жизни."
        }],
        "messages": [""]
      }
    }, {
      "page_id": 10, //15
      "title": "Задание 5",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Аудитория для проведения презентации должна состоять не менее, чем из:",
        "questionList": [{
          "label": "Одного человека ",
          "right": 1
        }, {
          "label": "Двух человек",
          "right": 0
        }, {
          "label": "Трех человек",
          "right": 0
        }, {
          "label": "Десяти человек",
          "right": 0
        }, {
          "label": "Пятидесяти человек",
          "right": 0
        }],
        "messages": ["Именно так!<br/><p>Презентацию можно проводить и перед огромным залом, и перед 1 человеком (например, отчет руководителю, презентация себя при приеме на работу, презентация компании или товара потенциальному клиенту и т.д.). Количество участников будет влиять только на выбор формы проведения презентации.</p>", "Вы допустили ошибку. <br/><p>Презентация может проводиться и перед меньшим количеством человек.</p>", "Подумайте еще. <br/><p>Вспомните ситуации, в которых аудитория презентации может быть минимальной.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Презентацию можно проводить и перед огромным залом, и перед 1 человеком (например, отчет руководителю, презентация себя при приеме на работу, презентация компании или товара потенциальному клиенту и т.д.). Количество участников будет влиять только на выбор формы проведения презентации.</p>"]
      }
    }, {
      "page_id": 11, //16
      "title": "Задание 6",
      "location": "page11",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "В какой форме проходит общение продавца с клиентом?",
          "questionList": [{
            "label": "Монолог",
            "right": 0
          }, {
            "label": "Диалог ",
            "right": 1
          }]
        }, {
          "taskText": "Является ли данный тип коммуникации презентацией?",
          "questionList": [{
            "label": "Да ",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Соответствует ли выбранная форма общения целям продажи?",
          "questionList": [{
            "label": "Да ",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }],
        "messages": ["Это правильный ответ. <br/><p>Ваша оценка ситуации абсолютно справедлива. Диалог продавца с покупателем вполне можно назвать презентацией, и в данном случае выбранная форма общения вполне соответствует целям продажи.</p>", "Ответ неверный. <br/><p>Попробуйте выполнить задание снова.</p>", "Вы вновь ошиблись. <br/><p>Подумайте еще.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Диалог продавца с покупателем вполне можно назвать презентацией, и в данном случае выбранная форма общения вполне соответствует целям продажи.</p>"]
      }
    }, {
      "page_id": 12, //17
      "title": "Задание 7",
      "location": "page12",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "На чем основывал содержание своей презентации продавец автомобиля в предыдущем киноэпизоде?",
        "questionList": [{
          "label": "На технических характеристиках автомобиля",
          "right": 0
        }, {
          "label": "На свойствах данной модели, которые находят отклик у большинства клиентов",
          "right": 0
        }, {
          "label": "На информации о потребностях данного клиента ",
          "right": 1
        }, {
          "label": "На описании преимуществ данного автомобиля в рекламном буклете",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Продавец автомобиля построил содержание своей презентации на информации о потребностях клиента.</p>", "Это неправильный ответ. <br/><p>Продавец основывал содержание своей презентации на другом виде информации.</p>", "И снова ошибка. <br/><p>Попытайтесь выполнить задание снова.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Продавец автомобиля построил содержание своей презентации на информации о потребностях клиента.</p>"]
      }
    }] // end of pages array in chapter 2
  }, // end 1of chapter
  {
    "chapter_id": 3,
    "chapter_location": "chapter03",
    "title": "Глава 2",
    "description": "Глава 2. Подготовка к презентации",
    "pages": [{
      "page_id": 1, //18
      "title": "Подготовка к презентации",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //19
      "title": "Записная книжка. Задание 1",
      "location": "page02",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "maxlength": 500,
        "showTitle": false,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 3, //20
      "title": "Наличие целей – залог успешной презентации",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //21
      "title": "Задание 8",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Ваши цели ",
          "right": 1
        }, {
          "label": "Цели вашей аудитории ",
          "right": 1
        }, {
          "label": "Цели арендодателей помещения, где проводится презентация",
          "right": 0
        }, {
          "label": "Цели ваших конкурентов",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Цели есть не только у презентующего: свои цели и ожидания есть у аудитории, которая пришла на вашу презентацию. Ваши слушатели должны найти в презентации ответы на волнующие ИХ вопросы, иначе они потеряют интерес к тому, что вы говорите. А вот с целями арендодателей или конкурентов ваши цели не обязаны пересекаться.</p>", "Вы ошиблись. <br/><p>Во время подготовки к презентации необходимо сформулировать только приоритетные цели.</p>", "Подумайте еще. <br/><p>Оставьте только необходимые цели.</p> ", "Закройте это окно и посмотрите правильный ответ. <br/><p>Цели есть не только у презентующего: свои цели и ожидания есть у аудитории, которая пришла на вашу презентацию. Ваши слушатели должны найти в презентации ответы на волнующие ИХ вопросы, иначе они потеряют интерес к тому, что вы говорите. А вот с целями арендодателей или конкурентов ваши цели не обязаны пересекаться.</p>"]
      }
    }, {
      "page_id": 5, //22
      "title": "Задание 9",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Для Павла",
              "q_id": 0
            }],
            "variants": [{
              "label": "Познакомиться с предложениями нового потенциального поставщика.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Узнать о новинках от текущего поставщика систем контроля доступа.",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Для Дмитрия ",
              "q_id": 0
            }],
            "variants": [{
              "label": "Познакомиться с предложениями нового потенциального поставщика.",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Узнать о новинках от текущего поставщика систем контроля доступа.",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Совершенно верно! <br/><p>Анализ ожиданий аудитории с точки зрения содержания поможет выделить важные моменты и сделать презентацию полезной для тех, кто на нее пришел.<br>" + "Помните: в ходе всей вашей презентации в сознании каждого слушателя звучит немой вопрос: «А зачем мне все это?». И если ваша презентация не будет давать ответа на этот вопрос, считайте, что вы потратили время зря.</p>", "Ответ неверный. <br/><p>Какой-то из сотрудников получил другую задачу.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод, чтобы правильно определить задачи, поставленные сотрудникам.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Анализ ожиданий аудитории с точки зрения содержания поможет выделить важные моменты и сделать презентацию полезной для тех, кто на нее пришел.<br>" + " Помните: в ходе всей вашей презентации в сознании каждого слушателя звучит немой вопрос: «А зачем мне все это?». И если ваша презентация не будет давать ответа на этот вопрос, считайте, что вы потратили время зря.</p>"]
      }
    }, {
      "page_id": 6, //23
      "title": "Задание 10",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Да, с точки зрения содержания выступления",
          "right": 0
        }, {
          "label": "Да, с точки зрения формы выступления",
          "right": 0
        }, {
          "label": "Нет, с точки зрения содержания выступления ",
          "right": 1
        }, {
          "label": "Нет, с точки зрения формы выступления ",
          "right": 1
        }],
        "messages": ["Вы правы! <br/><p>Выступление героини не соответствует ожиданиям собравшихся ни с точки зрения формы, ни с точки зрения содержания.</p>", "Вы ошиблись. <br/><p>В данном случае аудитория явно ожидала иного выступления.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Выступление героини не соответствует ожиданиям собравшихся ни с точки зрения формы, ни с точки зрения содержания.</p>"]
      }
    }, {
      "page_id": 7, //24
      "title": "Задание 11",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "С формулирования ваших целей и задач",
          "right": 0
        }, {
          "label": "С анализа состава вашей будущей аудитории ",
          "right": 1
        }, {
          "label": "С формулирования возможных ожиданий аудитории от вашей презентации",
          "right": 0
        }],
        "messages": ["Отличный ответ! <br/><p>Начинать подготовку презентации следует именно с анализа состава вашей будущей аудитории.</p>", "Ответ неверный. <br/><p>Начинать подготовку презентации следует с чего-то другого.</p>", "Подумайте еще. <br/><p>Вы уже совсем близко к правильному ответу.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Выступление героини не соответствует ожиданиям собравшихся ни с точки зрения формы, ни с точки зрения содержания.</p>"]
      }
    }, {
      "page_id": 8, //25
      "title": "Анализ ожиданий и целей аудитории",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //26
      "title": "Записная книжка. Задание 2",
      "location": "page09",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": true,
        "maxlength": 300,
        "titles": [""],
        "labels": ["Сколько народу соберется в зале? Какой план посадки вы выберете?", "Каков пол, возраст, уровень образования и опыт ваших слушателей?", "Что они могут думать о вас и о теме презентации?", "Какие их потребности может удовлетворить ваша презентация?", "Какие вопросы они могут вам задать?"],
        "messages": [""]
      }
    }, {
      "page_id": 10, //27
      "title": "Определение целей и задач презентации",
      "location": "page10",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 11, //28
      "title": "Общие цели презентации",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //29
      "title": "Общие и конкретные цели презентации",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 13, //30
      "title": "Ключевая концепция",
      "location": "page13",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 14, //31
      "title": "Записная книжка. Задание 3",
      "location": "page14",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 7,
        "showTitle": true,
        "maxlength": 100,
        "titles": ['ОБЩИЕ', 'КОНКРЕТНЫЕ'],
        "messages": [""]
      }
    }, {
      "page_id": 15, //32
      "title": "Записная книжка. Задание 4",
      "location": "page15",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": ['ЗА', 'ПРОТИВ'],
        "messages": [""]
      }
    }, {
      "page_id": 16, //33
      "title": "Подготовка полного текста: за и против",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //34
      "title": "Задание 12",
      "location": "page17",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Как вы считаете, написанный полностью текст выступления…",
          "taskType": "single",
          "questionList": [{
            "label": "Помог выступающему.",
            "right": 0
          }, {
            "label": "Сослужил плохую службу.",
            "right": 1
          }]
        }, {
          "taskText": "Какие из перечисленных доводов «против» реализовались в выступлении?",
          "taskType": "multi",
          "questionList": [{
            "label": "Текст презентации может показаться слушателям тяжеловесным из-за своей «письменной» формы. ",
            "right": 1
          }, {
            "label": "Есть опасность забыть об аудитории, уткнувшись глазами в текст. ",
            "right": 1
          }, {
            "label": "Слушатели не очень любят выступления «по бумажке».",
            "right": 0
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>В данном случае написанный текст стал причиной того, что выступающий забыл об аудитории и его речь оказалась наполненной тяжеловесными фразами.</p>", "Вы ошиблись. <br/><p>Недостатки использования письменного текста здесь налицо. Но какие именно?</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод заново.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>В данном случае написанный текст стал причиной того, что выступающий забыл об аудитории и его речь оказалась наполненной тяжеловесными фразами.</p>"]
      }
    }, {
      "page_id": 18, //35
      "title": "Как подготовить текст выступления?",
      "location": "page18",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 19, //36
      "title": "С чего начать написание текста?",
      "location": "page19",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 20, //37
      "title": "Задание 13",
      "location": "page20",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "question": "Определите цель презентации.",
          "type": "single",
          "answers": [{
            "label": "Рассказать об уникальном туристическом опыте.",
            "right": 0
          }, {
            "label": "Побудить коллег участвовать в походе.  ",
            "right": 1
          }, {
            "label": "Выявить отношение к совместному проведению досуга.",
            "right": 0
          }],
          "messages": ["Это правильный ответ! <br/><p>Можете перейти к следующему шагу.</p>", "Ответ неверный. <br/><p>Цель презентации должна звучать по-другому.</p>", "Подумайте еще. <br/><p>Вспомните тему вашей презентации «Туристический поход – лучший способ построения команды».</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }, {
          "question": "Сформулируйте ключевую концепцию",
          "type": "single",
          "answers": [{
            "label": "Поход – это весело. ",
            "right": 0
          }, {
            "label": "Надо вместе отдыхать, чтобы лучше узнать друг друга.",
            "right": 0
          }, {
            "label": "В походе мы станем одной командой, это поможет в работе. ",
            "right": 1
          }],
          "messages": ["Это правильный ответ! <br/><p>Можете перейти к следующему шагу.</p>", "Ответ неверный. <br/><p>Ключевая концепция должна звучать по-другому.</p>", "Подумайте еще. <br/><p>Вспомните тему вашей презентации – «Туристический поход – лучший способ построения команды».</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }, {
          "question": "Отберите 5 идей, которые раскрывают основную тему («Поход – лучший способ построения команды») и ключевую концепцию («В походе мы станем одной командой, и это поможет в работе»).",
          "type": "multi",
          "answers": [{
            "label": "В походе будет трудно, и люди себя проявят. ",
            "right": 1
          }, {
            "label": "Поход напомнит нам школьные годы.",
            "right": 0
          }, {
            "label": "Поход выявит неформальных лидеров и покажет, кто есть кто. ",
            "right": 1
          }, {
            "label": "В походе вскроются скрытые конфликты. ",
            "right": 1
          }, {
            "label": "Надо назначить ответственных за организацию похода.",
            "right": 0
          }, {
            "label": "Неформальное общение научит взаимопониманию. ",
            "right": 1
          }, {
            "label": "Поход поможет сформировать проектную группу для работы над ответственным заказом. ",
            "right": 1
          }, {
            "label": "Надо определить маршрут и отправной пункт похода.",
            "right": 0
          }, {
            "label": "Перед походом надо распределить обязанности.",
            "right": 0
          }],
          "messages": ["Это правильный ответ! <br/><p>Можете перейти к следующему шагу.</p>", "Ответ неверный. <br/><p>Список основных идей должен быть немного другим.</p>", "Подумайте еще. <br/><p>Вспомните тему вашей презентации – «Туристический поход – лучший способ построения команды».</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }, {
          "question": "Отберите 3 пункта, которые дополняют группу тезисов, в которой уже есть две идеи «В походе будет трудно и люди себя проявят» и «Вечера у костра откроют таланты»?",
          "type": "multi",
          "answers": [{
            "label": "В походе будет весело и романтично, и сотрудники смогут подружиться.",
            "right": 0
          }, {
            "label": "Вспомнить смешные истории, которые происходили в других походах.",
            "right": 0
          }, {
            "label": "Поход напомнит нам школьные (студенческие) годы.",
            "right": 0
          }, {
            "label": "Поход выявит неформальных лидеров и покажет, кто есть кто. ",
            "right": 1
          }, {
            "label": "В походе вскроются скрытые конфликты.",
            "right": 1
          }, {
            "label": "Перед походом надо распределить обязанности.",
            "right": 0
          }, {
            "label": "Поход поможет сформировать проектную группу для работы над ответственным заказом. ",
            "right": 1
          }],
          "messages": ["Это правильный ответ! <br/><p>Можете перейти к следующему шагу.</p>", "Ответ неверный. <br/><p>Для этой группы идей более подошли бы другие пункты.</p>", "Подумайте еще. <br/><p>Вспомните, что объединяет вашу группу тезисов?</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }, {
          "question": "Отберите 3 пункта, которые помогут вам привлечь и удержать внимание аудитории.",
          "type": "multi",
          "answers": [{
            "label": "В походе будет трудно и люди себя проявят.",
            "right": 0
          }, {
            "label": "В походе будет весело и романтично, и сотрудники смогут подружиться. ",
            "right": 1
          }, {
            "label": "Вспомнить смешные истории, которые происходили в других походах. ",
            "right": 1
          }, {
            "label": "Поход напомнит нам школьные (студенческие) годы. ",
            "right": 1
          }, {
            "label": "Вечера у костра раскроют таланты.",
            "right": 0
          }, {
            "label": "Надо назначить ответственных за снаряжение и запас продуктов.",
            "right": 0
          }, {
            "label": "В поход можно пойти со своими семьями.",
            "right": 0
          }],
          "messages": ["Это правильный ответ! <br/><p>Можете перейти к следующему шагу.</p>", "Ответ неверный. <br/><p>Это не лучший набор тезисов, чтобы привлечь внимание аудитории.</p>", "Подумайте еще. <br/><p>Не забывайте, что привлечь внимание аудитории помогают эмоции и яркие картины.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }, {
          "question": "Отберите 3 пункта, которые сделают сообщение особенно значимым для ваших коллег.",
          "type": "multi",
          "answers": [{
            "label": "В походе будет трудно и люди себя проявят.",
            "right": 0
          }, {
            "label": "Вечера у костра откроют таланты.",
            "right": 0
          }, {
            "label": "Поход напомнит нам школьные (студенческие) годы.",
            "right": 0
          }, {
            "label": "Поход выявит неформальных лидеров и покажет, кто есть кто. ",
            "right": 1
          }, {
            "label": "В походе вскроются скрытые конфликты.",
            "right": 1
          }, {
            "label": "Поход поможет сформировать проектную группу для работы над ответственным заказом. ",
            "right": 1
          }, {
            "label": "Надо избрать штаб по подготовке похода.",
            "right": 0
          }],
          "messages": ["Абсолютно правильно! <br/><p>Вы поняли принцип использования мыслительных схем Тони Бьюзена для подготовки презентации.</p>", "Ответ неверный. <br/><p>Чтобы раскрыть значимость командной работы, вам потребуется другой набор тезисов.</p>", "Подумайте еще. <br/><p>Какие-то тезисы могут оказаться более значимыми.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
        }]
      }
    }, {
      "page_id": 21, //38
      "title": "Записная книжка. Задание 5",
      "location": "page21",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 9,
        "showTitle": false,
        "maxlength": 100,
        "titles": ['', ''],
        "messages": [""]
      }
    }, {
      "page_id": 22, //39
      "title": "Построение системы тезисов (структурирование идей)",
      "location": "page22",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 23, //40
      "title": "Общие принципы построения системы тезисов",
      "location": "page23",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 24, //41
      "title": "Система тезисов: 5 правил построения",
      "location": "page24",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 25, //42
      "title": "Задание 14",
      "location": "page25",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "если тезис содержит подпункты, то их должно быть не менее двух",
          "right": 1
        }, {
          "label": "каждый тезис должен быть подкреплен достаточным количеством пунктов",
          "right": 1
        }, {
          "label": "нельзя в один тезис закладывать несколько мыслей с разным содержанием",
          "right": 0
        }, {
          "label": "надо избегать частичного совпадения тезисов",
          "right": 0
        }, {
          "label": "нельзя допускать несовместимости тезисов",
          "right": 1
        }, {
          "label": "подбирая тезисы, нужно воздействовать и на разум, и на эмоции слушателей",
          "right": 1
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вам удалось обнаружить все недостатки в тезисном плане героя киноэпизода:<br> – в третьем пункте плана содержится лишь один подпункт,<br> – для раскрытия второго тезиса не хватает одного подпункта – «Какое оборудование используется для распознавания человека по его подписи»,<br> – третий и четвертый тезис несовместимы (если данные методы ненадежны, почему их надо использовать?),<br>  – выступающий использует только цифры и факты.</p>", "Ответ неверный. <br/><p>Какие-то пункты в тезисном плане героя далеко не идеальны.</p>", "Подумайте еще. <br/><p>Вспомните 6 правил построения тезисов и попытайтесь выполнить задание снова.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>В тезисном плане героя есть следующие недостатки:<br> – в третьем пункте плана содержится лишь один подпункт,<br> – для раскрытия второго тезиса не хватает одного подпункта – «Какое оборудование используется для распознавания человека по его подписи»,<br> – третий и четвертый тезис несовместимы (если данные методы ненадежны, почему их надо использовать?),<br>  – выступающий использует только цифры и факты.</p>"]
      }
    }, {
      "page_id": 26, //43
      "title": "Задание 15",
      "location": "page26",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Поход требует тщательной подготовки. ",
          "right": 1
        }, {
          "label": "Подготовка должна быть комплексной. ",
          "right": 1
        }, {
          "label": "Необходимо избрать штаб похода и определить его функции. ",
          "right": 1
        }, {
          "label": "Подготовка похода даст начало процессу формирования команды. ",
          "right": 1
        }, {
          "label": "Решения штаба должны доводиться до всех сотрудников.",
          "right": 0
        }, {
          "label": "Важно продумать вопросы безопасности и медицинского обеспечения.",
          "right": 0
        }, {
          "label": "Надо определить, куда и на какой срок идти в поход, определить маршрут.",
          "right": 0
        }, {
          "label": "Плохо подготовленный поход ведет к конфликтам",
          "right": 0
        }],
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Поход требует тщательной подготовки",
            "label": [" Плохо подготовленный поход приведет к конфликтам.", " Хорошо подготовленный поход приведет к объединению команды."],
            "order": 0
          }, {
            "phrase": "Подготовка должна быть комплексной",
            "label": [" Надо определить маршрут и длительность похода.", " Нужно заранее продумать культурную и спортивную программы."],
            "order": 1
          }, {
            "phrase": "Необходимо избрать штаб и определить его функции",
            "label": [" Штаб распределяет обязанности и полномочия по организации похода.", " Штаб следит за выполнением поручений по подготовке похода."],
            "order": 2
          }, {
            "phrase": "Подготовка похода даст начало процессу формирования команды",
            "label": [" В штаб должны войти представители всех подразделений.", " У сотрудников должна быть возможность подавать предложения в штаб."],
            "order": 3
          }]
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы подобрали ключевые тезисы, которые помогут раскрыть тему «Подготовка похода» в рамках плана по формированию команды наилучшим образом.</p>", "Вы ошиблись. <br/><p>Набор ключевых тезисов должен быть иным.</p>", "Подумайте еще. <br/><p>Набор ключевых тезисов по-прежнему не идеальный.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"],
        "messages2": ["Совершенно верно! <br/><p>Вы правильно раскрыли содержание ключевых тезисов при помощи дополнительных пунктов.</p>", "Вы ошиблись. <br/><p>Попробуйте подобрать дополнительные пункты снова.</p>", "Подумайте еще. <br/><p>Какие-то из дополнительных пунктов по-прежнему не соответствуют ключевым тезисам.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 27, //44
      "title": "Записная книжка. Задание 6",
      "location": "page27",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 16,
        "showTitle": false,
        "maxlength": 100,
        "titles": ['', ''],
        "messages": [""]
      }
    }, {
      "page_id": 28, //45
      "title": "Разработка сценария презентации",
      "location": "page28",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 29, //46
      "title": "Имидж выступающего",
      "location": "page29",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 30, //47
      "title": "Задание 16",
      "location": "page30",
      "hasSound": false,
      "type": "exercise",
      "data": (_data = {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": ""
      }, _defineProperty(_data, "taskText", "Что, на ваш взгляд, наверняка не вызовет раздражения у клиентов?"), _defineProperty(_data, "taskType", "multi"), _defineProperty(_data, "questionList", [{
        "label": "модная обувь дорогих марок (1)",
        "right": 0
      }, {
        "label": "яркий привлекающий макияж (2)",
        "right": 0
      }, {
        "label": "длинные ногти у женщин (3)",
        "right": 0
      }, {
        "label": "челка, закрывающая глаза (4)",
        "right": 0
      }, {
        "label": "колготки в рисунок (5)",
        "right": 0
      }, {
        "label": "отсутствие макияжа (6)",
        "right": 0
      }, {
        "label": "юбка до колена (7) ",
        "right": 1
      }, {
        "label": "модные джинсы (8)",
        "right": 0
      }, {
        "label": "крупная красивая бижутерия (9)",
        "right": 0
      }, {
        "label": "кольца на руках мужчины (не считая обручального) (10)",
        "right": 0
      }, {
        "label": "кольца на руках женщины (не считая обручального) (11)",
        "right": 0
      }, {
        "label": "очки с затененными стеклами (12)",
        "right": 0
      }, {
        "label": "туфли черного цвета (13) ",
        "right": 1
      }, {
        "label": "несвежая рубашка (14)",
        "right": 0
      }, {
        "label": "жвачка во рту (15)",
        "right": 0
      }, {
        "label": "прозрачная одежда (16)",
        "right": 0
      }, {
        "label": "босоножки, одетые на босую ногу (17)",
        "right": 0
      }, {
        "label": "пирсинг (18)",
        "right": 0
      }, {
        "label": "открытые плечи (19)",
        "right": 0
      }, {
        "label": "строгий костюм (20) ",
        "right": 1
      }]), _defineProperty(_data, "messages", ["Вы сделали правильный выбор! <br/><p>Строгий костюм, туфли черного цвета и юбка до колена не вызовут раздражения ни у кого. Пункты 1, 2, 3, 9, 11, 17, 18, 19 могут восприниматься двояко – в зависимости от аудитории. Остальные пункты строго противопоказаны.</p>", "Ответ неверный. <br/><p>Какие-то элементы имиджа не соответствуют идеальному образу выступающего.</p>", "Подумайте еще. <br/><p>Есть универсальный список элементов имиджа, которые ни у кого не вызовут раздражения.</p>", "Закройте это окно и посмотрите правильный ответ.<br/><p>Строгий костюм, туфли черного цвета и юбка до колена не вызовут раздражения ни у кого. Пункты 1, 2, 3, 9, 11, 17, 18, 19 могут восприниматься двояко – в зависимости от аудитории. Остальные пункты строго противопоказаны.</p>"]), _data)
    }, {
      "page_id": 31, //48
      "title": "Законы формирования первого впечатления",
      "location": "page31",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 32, //49
      "title": "Задание 17",
      "location": "page32",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": 10, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Не деловой стиль"
        }, {
          "id": 1,
          "label": "Деловой стиль"
        }],
        "questionList": [{
          "label": "Прозрачная блузка, блузка с открытыми плечами, футболка",
          "right": 0
        }, {
          "label": "Джинсы, лосины, обтягивающие брюки",
          "right": 0
        }, {
          "label": "Туфли на высоком каблуке, кроссовки, стоптанная обувь",
          "right": 0
        }, {
          "label": "Мятый/поношенный/плохо сидящий костюм",
          "right": 0
        }, {
          "label": "Глубокое декольте",
          "right": 0
        }, {
          "label": "Мини-юбка, длинная юбка «в пол»",
          "right": 0
        }, {
          "label": "Строгое платье",
          "right": 1
        }, {
          "label": "Классические туфли на невысоком каблуке",
          "right": 1
        }, {
          "label": "Прямые брюки средней ширины",
          "right": 1
        }, {
          "label": "Юбка до колена",
          "right": 1
        }, {
          "label": "Светлая блузка",
          "right": 1
        }, {
          "label": "Классический костюм",
          "right": 1
        }, {
          "label": "Одежда спокойных тонов, без крупного рисунка",
          "right": 1
        }],
        "messages": ["Совершенно верно! <br/><p>Вы знаете, какие предметы гардероба соответствуют деловому стилю, а какие нет.</p>", "Вы ошиблись. <br/><p>В вашем выборе присутствует смешение элементов делового и неделового стиля.</p>", "Подумайте еще. <br/><p>Помните, что деловой стиль в одежде характеризуют строгость и отсутствие ярких цветов и вызывающих элементов.</p>", "Закройте это окно и посмотрите правильный ответ."]
      }
    }, {
      "page_id": 33, //50
      "title": "Задание 18",
      "location": "page33",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Не соответствует"
        }, {
          "id": 1,
          "label": "Соответствует"
        }],
        "questionList": [{
          "label": "Верхняя одежда",
          "right": 0
        }, {
          "label": "Костюм",
          "right": 0
        }, {
          "label": "Прическа",
          "right": 1
        }, {
          "label": "Деловые принадлежности",
          "right": 1
        }],
        "messages": ["Вы дали правильный ответ! <br/><p>Верхняя одежда и костюм презентующего в данном случае не вполне соответствуют деловому стилю.</p>", "Ответ неверный. <br/><p>Проанализируйте образ презентующего более тщательно.</p>", "Подумайте еще. <br/><p>Какие-то элементы в образе презентующего не соответствуют деловому стилю.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Верхняя одежда и костюм презентующего в данном случае не вполне соответствуют деловому стилю.</p>"]
      }
    }, {
      "page_id": 34, //51
      "title": "Записная книжка. Задание 7",
      "location": "page34",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 35, //52
      "title": "Как справиться с волнением и предстартовой лихорадкой",
      "location": "page35",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 36, //53
      "title": "Установка на успех",
      "location": "page36",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 37, //54
      "title": "Задание 19",
      "location": "page37",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Посмотрите киноэпизоды. Сравните поведение двух презентующих. <br/>Кто из них производит впечатление эксперта?",
        "questionList": [{
          "label": "11",
          "right": 0
        }, {
          "label": "12",
          "right": 1
        }],
        "messages": ["Абсолютно верно! <br/><p>Из двух примеров лишь во втором презентующий производит впечатление эксперта.</p>", "Вы ошиблись. <br/><p>Вспомните, какие могут быть основания, чтобы считать выступающего экспертом, и посмотрите киноэпизоды еще раз.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Из двух примеров лишь во втором презентующий производит впечатление эксперта.</p>"]
      }
    }, {
      "page_id": 38, //55
      "title": "Записная книжка. Задание 8",
      "location": "page38",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 3,
        "showTitle": true,
        "maxlength": 100,
        "titles": ['Как будет проходить презентация?', 'Какого результата вы добьетесь?', 'Какие слушатели придут на вашу презентацию?'],
        "messages": [""]
      }
    }] // end of pages array in chapter 3
  }, // end 2of chapter
  {
    "chapter_id": 4,
    "chapter_location": "chapter04",
    "title": "Глава 3",
    "description": "Глава 3. Построение презентации",
    "pages": [{
      "page_id": 1, //56
      "title": "Построение презентации",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //57
      "title": "Виды внимания и построение презентации",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //58
      "title": "Задание 20",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Посторонние шумы (шуршание, разговоры) ",
          "right": 1
        }, {
          "label": "Деятельность, не связанная с темой презентации",
          "right": 1
        }, {
          "label": "Отсутствие зрительного контакта с выступающим ",
          "right": 1
        }, {
          "label": "Пассивность, апатия",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вам удалось обнаружить все признаки невнимания аудитории, присутствующие в киноэпизоде.</p>", "Вы ошиблись. <br/><p>Посмотрите киноэпизод еще раз.</p>", "Подумайте еще. <br/><p>Какие-то из указанных вами признаков невнимания не соответствуют киноэпизоду, или, напротив, указаны лишние.</p>", "И вновь ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 4, //59
      "title": "Задание 21",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Непроизвольное",
          "right": 1
        }, {
          "label": "Произвольное",
          "right": 0
        }, {
          "label": "Послепроизвольное",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>В данном случае презентующий привлек непроизвольное внимание. Однако помните, что непроизвольное внимание, привлеченное с помощью раздражителя, держится недолго, если содержание выступления не затронет практические интересы и потребности аудитории.</p>", "Вы дали неправильный ответ. <br/><p>Презентующий привлек другой тип внимания.</p>", "Подумайте еще. <br/><p>Вспомните, чем разные типы внимания отличаются друг от друга.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Непроизвольное внимание, привлеченное с помощью раздражителя, держится недолго, если содержание выступления не затронет практические интересы и потребности аудитории.</p>"]
      }
    }, {
      "page_id": 5, //60
      "title": "Композиция",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //61
      "title": "Задание 22",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Произвольное",
            "label": "Основная часть ",
            "order": 0
          }, {
            "phrase": "Непроизвольное",
            "label": "Вступление",
            "order": 1
          }, {
            "phrase": "Послепроизвольное",
            "label": "Заключение",
            "order": 2
          }]
        }],
        "messages": ["Это правильный ответ! <br/><p>Во вступлении можно опираться на произвольное внимание, в основной части – лучше на непроизвольное, а в заключении на послепроизвольное.</p>", "Вы ошиблись. <br/><p>В каких-то частях презентации лучше опираться на другие типы внимания.</p>", "Подумайте еще. <br/><p>Вспомните, чем разные типы внимания отличаются друг от друга.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Во вступлении можно опираться на произвольное внимание, в основной части – лучше на непроизвольное, а в заключении на послепроизвольное.</p>"]
      }
    }, {
      "page_id": 7, //62
      "title": "Структура презентации: открывающая часть",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //63
      "title": "Примеры «крючков внимания»",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //64
      "title": "Задание 23",
      "location": "page09",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "«Башмак»",
            "label": "демонстрация",
            "order": 0
          }, {
            "phrase": "«Снимок на память»",
            "label": "комплимент и что-то неожиданное",
            "order": 1
          }, {
            "phrase": "«Неровный пол»",
            "label": "демонстрация и что-то неожиданное",
            "order": 2
          }]
        }],
        "messages": ["Вы правы! <br/><p>В примере «Башмак» основным приемом была демонстрация, в примере «Снимок на память» – комплимент и что-то неожиданное, в примере «Неровный пол» – демонстрация и что-то неожиданное.</p>", "Вы ошиблись! <br/><p>В каких-то примерах «крючков внимания» основными были другие приемы.</p>", "Подумайте еще. <br/><p>Вспомните, что привлекло внимание аудитории в каждом из трех примеров.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 10, //65
      "title": "Задание 24",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Что-то неожиданное",
          "right": 0
        }, {
          "label": "Шутка, имеющая отношение к теме презентации",
          "right": 0
        }, {
          "label": "Вопрос или задание собравшимся",
          "right": 1
        }, {
          "label": "Впечатляющая цифра",
          "right": 1
        }, {
          "label": "Ссылка на газетный материал",
          "right": 1
        }, {
          "label": "Комплимент собравшимся",
          "right": 0
        }, {
          "label": "Демонстрация чего-то, что имеет отношение к теме выступления",
          "right": 0
        }, {
          "label": "Выражение эмоций",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Привлечь внимание аудитории в данном примере презентующему помогли вопрос, ссылка на публикацию и впечатляющая цифра. Однако помните, что непроизвольное внимание, привлеченное с помощью раздражителя, держится недолго, если содержание выступления не затронет практические интересы и потребности аудитории.</p>", "Это неправильный ответ. <br/><p>Презентующий использовал другой набор «крючков внимания».</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Не забывайте, что непроизвольное внимание, привлеченное с помощью раздражителя, держится недолго, если содержание выступления не затронет практические интересы и потребности аудитории.</p>"]
      }
    }, {
      "page_id": 11, //66
      "title": "Записная книжка. Задание 9",
      "location": "page11",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 1,
        "showTitle": true,
        "maxlength": 100,
        "titles": ['примеры «крючков внимания»'],
        "messages": [""]
      }
    }, {
      "page_id": 12, //67
      "title": "Структура презентации: введение",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 13, //68
      "title": "Программа выступления и объявление цели",
      "location": "page13",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 14, //69
      "title": "Задание 25",
      "location": "page14",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Простую",
          "right": 1
        }, {
          "label": "Развернутую",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>В данном примере презентующий использовал простую формулировку цели.</p>", "Ответ неверный. <br/><p>Подумайте еще.</p>", "Ответ неверный. <br/><p>Подумайте еще.</p>", "Вы снова ошиблись. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 15, //70
      "title": "Задание 26",
      "location": "page15",
      "hasSound": false,
      "type": "note_exercise",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 2,
        "useColumns": true,
        "maxlength": 500,
        "titles": [""],
        "questionList": [{
          "label": "Аудитория – ваши коллеги по отделу.",
          "right": "Через месяц нам предстоит пойти в поход. Он может стать или ярким событием в нашей жизни или поводом повторять про себя: «За что мне все это?». Я хочу поделиться с вами мыслями о том, как надо подготовить поход, чтобы мы о нем вспоминали, как о ярком празднике."
        }, {
          "label": "Аудитория – руководство отдела.",
          "right": "Главная наша цель при проведении похода – сплотить команду и наладить эффективное взаимодействие. Плохо подготовленный поход приведет к конфликтам, а не к единению. Я хочу рассказать, что мы запланировали сделать в рамках подготовки похода и какая помощь нам потребуется от руководства компании."
        }],
        "messages": ["А теперь посмотрите рекомендованные формулировки и сравните их с собственными."]
      }
    }, {
      "page_id": 16, //71
      "title": "Структура презентации: основная часть",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //72
      "title": "Задание 27",
      "location": "page17",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "Отберите из 7 предложенных пунктов по 3 ключевых, раскрывающих содержание вашей презентации:",
        "questionList": [{
          "label": "В походе будет весело и романтично.",
          "right": [1, 0]
        }, {
          "label": "Поход поможет сформировать проектную группу для работы над ответственным заказом.",
          "right": [0, 1]
        }, {
          "label": "Вечера у костра откроют таланты.",
          "right": [1, 0]
        }, {
          "label": "В походе вскроются скрытые конфликты.",
          "right": [0, 1]
        }, {
          "label": "Неформальное общение научит взаимопониманию.",
          "right": [1, 1]
        }, {
          "label": "В поход можно пойти со своими семьями.",
          "right": [0, 0]
        }, {
          "label": "Поход выявит неформальных лидеров и покажет, кто есть кто.",
          "right": [0, 0]
        }],
        "messages": ["Это правильный ответ! <br/><p>Формулируя пункты презентации, нужно прежде всего ориентироваться на интересы аудитории.</p>", "Вы ошиблись. <br/><p>Какие-то из пунктов не соответствуют своей аудитории.</p>", "Подумайте еще. <br/><p>Помните, что содержание презентации должно быть связано с интересами вашей аудитории.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Не забывайте, что формулируя пункты презентации, нужно прежде всего ориентироваться на интересы аудитории.</p>"]
      }
    }, {
      "page_id": 18, //73
      "title": "Основная часть: способы организации материала",
      "location": "page18",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 19, //74
      "title": "Задание 28",
      "location": "page19",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Создание «интриги» повествования. ",
          "right": 1
        }, {
          "label": "Хронологическое построение повествования.",
          "right": 0
        }, {
          "label": "Организация материала по пространственным признакам.",
          "right": 0
        }, {
          "label": "Построение повествования «от частей к целому» или, наоборот, «от целого к частям».",
          "right": 0
        }, {
          "label": "Компоновка материала в соответствии с определяющими особенностями.",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>В данном примере презентующий попытался создать интригу повествования.</p>", "Вы ошиблись. <br/><p>Презентующий использовал другой способ организации материала.</p>", "Подумайте еще. <br/><p>Вспомните, чем отличаются друг от друга разные способы организации материала.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 20, //75
      "title": "Основная часть: аргументация",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //76
      "title": "Задание 29",
      "location": "page21",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Эмоциональный"
        }, {
          "id": 1,
          "label": "Рациональный"
        }],
        "questionList": [{
          "label": "Хороший словарный запас необходим для успешной карьеры.",
          "right": 1
        }, {
          "label": "Однажды я увидел в кафе симпатичную девушку, но не знал, как завязать с ней разговор. И тут мне вспомнилась история происхождения одного слова. «А вы знаете, как появилось слово «бистро»? Она заинтересовалась, и наше знакомство состоялось… Так что изучайте словари – и с девушками проблем не будет.",
          "right": 0
        }, {
          "label": "Словарь, если его использовать систематически, поможет вам обогатить свою речь.",
          "right": 1
        }, {
          "label": "82% топ-менеджеров ведущих американских компаний обладают словарным запасом из 7 тыс. слов и более.",
          "right": 1
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы усвоили, какие факторы нужно учитывать при выборе аргументов. Однако помните, что речь идет о балансе аргументов: даже в чисто женской аудитории не надо уповать только на эмоции и образы. Определенная доля фактов, графиков, цифровых таблиц и других рациональных доводов должна быть в любой аудитории независимо от времени суток, пола, возраста слушателей.</p>", "Ответ неверный. <br/><p>Какие-то факторы соответствуют другим типам аргументов.</p>", "Подумайте еще. <br/><p>Вспомните, какие факторы соответствуют эмоциональным аргументам, а какие – рациональным.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Однако помните, что речь идет о балансе аргументов: даже в чисто женской аудитории не надо уповать только на эмоции и образы. Определенная доля фактов, графиков, цифровых таблиц и других рациональных доводов должна быть в любой аудитории независимо от времени суток, пола, возраста слушателей.</p>"]
      }
    }, {
      "page_id": 22, //77
      "title": "Влияние аргументов на принятие решения",
      "location": "page22",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 23, //78
      "title": "Задание 30",
      "location": "page23",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Рациональные",
          "right": 0,
          "icon": "rational"
        }, {
          "label": "Эмоциональные",
          "right": 1,
          "icon": "emotional"
        }],
        "messages": ["Это правильный ответ! <br/><p>В принятие решения включены оба полушария человеческого мозга: и правое, отвечающее за эмоции, и левое, контролирующее разум. Но не одновременно. Толчок к принятию решения дают эмоции, то есть в большинстве случаев мы «голосуем сердцем». Понравился продавец – и мы принимаем решение купить у него товар. На следующий день мы, скорее всего, призадумаемся: «А нужен ли нам этот товар?» – и вот здесь вступает в действие наш разум, подбрасывая рациональные объяснения эмоциональному поступку. По итогам рационального анализа мы можем прийти к выводу, что «нас надули» или, наоборот, найдем рациональные доводы, подтверждающие правильность принятого накануне решения.</p>", "Вы ошиблись. <br/><p>Подумайте еще.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>В принятие решения включены оба полушария человеческого мозга: и правое, отвечающее за эмоции, и левое, контролирующее разум. Но не одновременно. Толчок к принятию решения дают эмоции, то есть в большинстве случаев мы «голосуем сердцем». Понравился продавец – и мы принимаем решение купить у него товар. На следующий день мы, скорее всего, призадумаемся: «А нужен ли нам этот товар?» – и вот здесь вступает в действие наш разум, подбрасывая рациональные объяснения эмоциональному поступку. По итогам рационального анализа мы можем прийти к выводу, что «нас надули» или, наоборот, найдем рациональные доводы, подтверждающие правильность принятого накануне решения.</p>"]
      }
    }, {
      "page_id": 24, //79
      "title": "Задание 31",
      "location": "page24",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Эмоциональный"
        }, {
          "id": 1,
          "label": "Рациональный"
        }],
        "questionList": [{
          "label": "утреннее",
          "right": 1
        }, {
          "label": "дневное",
          "right": 1
        }, {
          "label": "вечернее",
          "right": 0
        }, {
          "label": "в ходе презентации",
          "right": 0
        }, {
          "label": "спустя некоторое время после презентации",
          "right": 1
        }, {
          "label": "7-19",
          "right": 0
        }, {
          "label": "20-60",
          "right": 1
        }, {
          "label": "60-80",
          "right": 0
        }, {
          "label": "мужской",
          "right": 1
        }, {
          "label": "женский",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы усвоили, какие факторы нужно учитывать при выборе аргументов. Однако помните, что речь идет о балансе аргументов: даже в чисто женской аудитории не надо уповать только на эмоции и образы. Определенная доля фактов, графиков, цифровых таблиц и других рациональных доводов должна быть в любой аудитории независимо от времени суток, пола, возраста слушателей.</p>", "Ответ неверный. <br/><p>Какие-то факторы соответствуют другим типам аргументов.</p>", "Подумайте еще. <br/><p>Вспомните, какие факторы соответствуют эмоциональным аргументам, а какие – рациональным.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Однако помните, что речь идет о балансе аргументов: даже в чисто женской аудитории не надо уповать только на эмоции и образы. Определенная доля фактов, графиков, цифровых таблиц и других рациональных доводов должна быть в любой аудитории независимо от времени суток, пола, возраста слушателей.</p>"]
      }
    }, {
      "page_id": 25, //80
      "title": "Резюме",
      "location": "page25",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 26, //81
      "title": "Задание 32",
      "location": "page26",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Рациональные",
          "right": 0
        }, {
          "label": "Эмоциональные",
          "right": 0
        }, {
          "label": "Рациональные и эмоциональные в равной степени",
          "right": 1
        }],
        "messages": ["Совершенно верно. <br><p>В данном случае презентующий использовал и рациональные, и эмоциональные аргументы.</p>", "Вы ошиблись. <br><p>Презентующий в киноэпизоде использовал какие-то другие аргументы.</p>", "Подумайте еще. <br><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br><p>Закройте это окно и посмотрите правильный ответ. В данном случае презентующий использовал и рациональные, и эмоциональные аргументы.</p>"]
      }
    }, {
      "page_id": 27, //82
      "title": "Задание 33",
      "location": "page27",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Эмоциональный"
        }, {
          "id": 1,
          "label": "Рациональный"
        }],
        "questionList": [{
          "label": "Статистические данные о росте заключенных договоров пожизненной ренты за прошедшие 5 лет.",
          "right": 1
        }, {
          "label": "Анекдоты на тему недвижимости.",
          "right": 0
        }, {
          "label": "Образец договора с вашей компанией.",
          "right": 1
        }, {
          "label": "Жизненные истории.",
          "right": 0
        }, {
          "label": "Данные о продолжительности жизни пожилых людей, заключивших и не заключивших такой договор.",
          "right": 1
        }, {
          "label": "Рекомендации известных людей в адрес вашей компании.",
          "right": 0
        }],
        "messages": ["Совершенно верно. <br/><p>Вы правильно распределили рациональные и эмоциональные аргументы.<p>", "Вы ошиблись <br/><p>и перепутали рациональные и эмоциональные аргументы. Попробуйте еще раз!<p>", "Подумайте еще. <br/><p>Вспомните, чем рациональные аргументы отличаются от эмоциальнальных.<p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.<p>"]
      }
    }, {
      "page_id": 28, //83
      "title": "Записная книжка. Задание 10",
      "location": "page28",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": true,
        "maxlength": 100,
        "col1": [0, 2, 4],
        "col2": [1, 3, 5],
        "section": ['Рациональные доводы', 'Эмоциональные доводы'],
        "titles": ['Ключевой пункт 1', 'Ключевой пункт 2', 'Ключевой пункт 3'],
        "messages": [""]
      }
    }, {
      "page_id": 29, //84
      "title": "Структура презентации: обзор",
      "location": "page29",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 30, //85
      "title": "Задание 34",
      "location": "page30",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Чтобы активизировать внимание аудитории.",
          "right": 0
        }, {
          "label": "Чтобы закрепить в памяти слушателей содержание презентации.",
          "right": 1
        }, {
          "label": "Чтобы полностью использовать отведенное на презентацию время.",
          "right": 0
        }, {
          "label": "Чтобы структурировать восприятие слушателей.",
          "right": 1
        }, {
          "label": "Чтобы лучше убедить слушателей.",
          "right": 1
        }],
        "messages": ["Совершенно верно! <br/><p>Вы точно определили, для чего необходимо повторять ключевые пункты основной части презентации.</p>", "Вы ошиблись. <br/><p>Повторять ключевые пункты важно для других целей.</p>", "Подумайте еще.", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Нужно, чтобы аудитория легко восприняла вашу презентацию.</p>"]
      }
    }, {
      "page_id": 31, //86
      "title": "Записная книжка. Задание 11",
      "location": "page31",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 3,
        "showTitle": false,
        "maxlength": 500,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 32, //87
      "title": "Структура презентации: заключение",
      "location": "page32",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 33, //88
      "title": "Задание 35",
      "location": "page33",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Где содержится «призыв к действию»?",
          "taskType": "single",
          "questionList": [{
            "label": "Во введении",
            "right": 1
          }, {
            "label": "В основной части",
            "right": 0
          }, {
            "label": "В заключении",
            "right": 0
          }]
        }, {
          "taskText": "Какую композицию будет использовать презентующий?",
          "taskType": "single",
          "questionList": [{
            "label": "Линейную",
            "right": 0
          }, {
            "label": "Кольцевую",
            "right": 1
          }]
        }],
        "messages": ["Совершенно верно. <br/><p>Призыв к действию находится во вступительной части презентации, а презентующий использовал кольцевую композицию.</p>", "В какой-то из ваших ответов закралась ошибка.", "Подумайте еще.", "И снова ошибка. <br/><p>Призыв к действию в данном киноэпизоде находится во вступлении. В дальнейшем выступающий будет использовать кольцевую композицию.</p>"]
      }
    }, {
      "page_id": 34, //89
      "title": "Записная книжка. Задание 12",
      "location": "page34",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 35, //90
      "title": "Задание 36",
      "location": "page35",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Открывающая часть",
            "label": "Привлечь внимание, завоевать эмоциональное расположение аудитории.",
            "order": 0
          }, {
            "phrase": "Введение",
            "label": "Пробудить содержательный интерес аудитории, ответить на вопрос «зачем мне это надо?».",
            "order": 1
          }, {
            "phrase": "Основная часть",
            "label": "Донести главное содержание и решить основные задачи презентации.",
            "order": 2
          }, {
            "phrase": "Обзор",
            "label": "Повторить главные выводы, подвести итог сказанному, чтобы усилить убеждение.",
            "order": 3
          }, {
            "phrase": "Заключение",
            "label": "Подтолкнуть к действиям, оставить благоприятное впечатление.",
            "order": 4
          }]
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы знаете, какие цели соответствуют каждому из этапов презентации.</p>", "Вы ошиблись. <br/><p>Какие-то цели соответствуют другим этапам презентации.</p>", "Подумайте еще. <br/><p>Вспомните, чего необходимо добиться на каждом этапе презентации.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Не забывайте, что у каждого этапа презентации есть своя определенная цель.</p>"]
      }
    }, {
      "page_id": 36, //91
      "title": "Задание 37",
      "location": "page36",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Открывающая часть",
            "label": "«Крючок внимания».",
            "order": 0
          }, {
            "phrase": "Введение",
            "label": "Краткий анонс. Объявление целей. Переход-связка к основной части.",
            "order": 1
          }, {
            "phrase": "Основная часть",
            "label": "Баланс между эмоциональными и рациональными аргументами. Правило «трех». Использовать определенный способ организации материала. После каждого ключевого пункта – краткий итог.",
            "order": 2
          }, {
            "phrase": "Обзор",
            "label": "Кратко повторить главные выводы всей презентации.",
            "order": 3
          }, {
            "phrase": "Заключение",
            "label": "Поблагодарить аудиторию. Дать пошаговую инструкцию для действия.",
            "order": 4
          }]
        }],
        "messages": ["Это правильный ответ! <br/><p>Вы усвоили правила построения, соответствующие каждому этапу презентации.</p>", "Ответ неверный. <br/><p>Какие-то правила построения соответствуют другим этапам презентации.</p>", "Подумайте еще. <br/><p>Вспомните цели каждого из этапов презентации.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 37, //92
      "title": "Порядок подготовки частей презентации",
      "location": "page37",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 38, //93
      "title": "Задание 38",
      "location": "page38",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "label": "Основная часть",
            "order": 0
          }, {
            "label": "Обзор",
            "order": 1
          }, {
            "label": "Введение",
            "order": 2
          }, {
            "label": "Открывающая часть",
            "order": 3
          }, {
            "label": "Заключение",
            "order": 4
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>Вы знаете, в каком порядке нужно работать над частями презентации.</p>", "Вы ошиблись. <br/><p>Работа над частями презентации должна проходить в другом порядке.</p>", "Подумайте еще. <br/><p>Не забывайте, что порядок частей в презентации отличается от порядка ее подготовки.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 39, //94
      "title": "Порядок подготовки частей презентации",
      "location": "page39",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 2
  }, // end 3of chapter
  {
    "chapter_id": 5,
    "chapter_location": "chapter05",
    "title": "Глава 4",
    "description": "Глава 4. Эффективная коммуникация в ходе презентации",
    "pages": [{
      "page_id": 1, //95
      "title": "Эффективная коммуникация в ходе презентации",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //96
      "title": "Что означает понравиться аудитории?",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //97
      "title": "Задание 39",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Сравните два киноэпизода. Какой из выступающих знает потребности аудитории, заботится о легкости усвоения материала, распределяет внимание между предметом презентации и аудиторией и вовлекает слушателей в презентацию?",
        "questionList": [{
          "label": "20",
          "right": 0
        }, {
          "label": "19",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Из двух примеров лишь во втором выступающий знает потребности аудитории и старается вовлечь ее в презентацию.</p>", "Вы ошиблись. <br/><p>Пересмотрите киноэпизоды.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Из двух примеров лишь во втором выступающий знает потребности аудитории и старается вовлечь ее в презентацию.</p>"]
      }
    }, {
      "page_id": 4, //98
      "title": "Коммуникативные потребности аудитории",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //99
      "title": "Потребность «потратить время с пользой». Приемы соответствия",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //100
      "title": "Потребность «получить признание». Приемы психологических пристроек",
      "location": "page06",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 7, //101
      "title": "Задание 40",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "«Сверху»",
          "right": 0
        }, {
          "label": "«Снизу» ",
          "right": 1
        }, {
          "label": "«На равных»",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>В данном киноэпизоде изображен пример пристройки «снизу».</p>", "Это неправильный ответ. <br/><p>Пересмотрите киноэпизод.</p>", "Подумайте еще. <br/><p>Вспомните, чем разные типы пристройки отличаются друг от друга.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 8, //102
      "title": "Задание 41",
      "location": "page08",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "«Сверху», чтобы выровнять статусы.",
          "right": 0
        }, {
          "label": "«Снизу», чтобы подчеркнуть уважение.",
          "right": 0
        }, {
          "label": "«На равных», чтобы представить себя как будущего партнера. ",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Построение отношений в духе партнерства ведет к успеху делового общения. А чтобы проявить уважение и подчеркнуть статус аудитории, рекомендуется использовать психологические подарки.</p>", "К сожалению, ответ неверный. <br/><p>В презентации желательно выбрать другой тип пристройки.</p>", "Подумайте еще. <br/><p>Вспомните, чем разные типы пристройки отличаются друг от друга.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.<br/>Построение отношений в духе партнерства ведет к успеху делового общения. А чтобы проявить уважение и подчеркнуть статус аудитории, рекомендуется использовать психологические подарки.</p>"]
      }
    }, {
      "page_id": 9, //103
      "title": "Коммуникативный прием «Психологические подарки»",
      "location": "page09",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 10, //104
      "title": "Задание 42 ",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Зрительный контакт ",
          "right": 1
        }, {
          "label": "Улыбка",
          "right": 1
        }, {
          "label": "Прямое обращение к аудитории ",
          "right": 1
        }, {
          "label": "Отождествление себя с аудиторией: «Мы» ",
          "right": 1
        }, {
          "label": "Позитивная энергия ",
          "right": 1
        }, {
          "label": "Комплимент",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Вы определили все типы «психологических подарков», которые использовал выступающий в данном примере.</p>", "Вы ошиблись. <br/><p>Выступающий использовал другое сочетание «психологических подарков».</p>", "Подумайте еще. <br/><p>Вспомните, в чем заключается суть каждого из «психологических подарков».</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 11, //105
      "title": "Потребность «получить удовольствие». Приемы облегчения восприятия",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //106
      "title": "Когда нужно менять канал восприятия?",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 13, //107
      "title": "Задание 43",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Слуховой ",
          "right": 1
        }, {
          "label": "Зрительный ",
          "right": 1
        }, {
          "label": "Обонятельный ",
          "right": 0
        }, {
          "label": "Осязательный",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>В данном случае выступающий задействовал два канала восприятия – слуховой и зрительный.</p>", "Ответ неверный. <br/><p>Сочетание каналов восприятия в данном случае было другим.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. В данном случае выступающий задействовал два канала восприятия – слуховой и зрительный.</p>"]
      }
    }, {
      "page_id": 14, //108
      "title": "Коммуникативный прием «Контрастные раздражители»",
      "location": "page14",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 15, //109
      "title": "Коммуникативный прием «Драматизация речи»",
      "location": "page15",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 16, //110
      "title": "Записная книжка. Задание 13",
      "location": "page16",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 17, //111
      "title": "Коммуникативный прием «Примеры из жизни»",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //112
      "title": "Записная книжка. Задание 14",
      "location": "page18",
      "hasSound": false,
      "type": "note_page",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 19, //113
      "title": "Коммуникативный прием «Гипотеза»",
      "location": "page19",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 20, //114
      "title": "Задание 44",
      "location": "page20",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Смена каналов восприятия",
          "right": 0
        }, {
          "label": "Пример из жизни",
          "right": 1
        }, {
          "label": "Драматизация",
          "right": 1
        }, {
          "label": "Гипотеза",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Презентующий привел пример из жизни, использовал приемы гипотезы и драматизации. </p>", "Вы ошиблись. <br/><p>Презентующий использовал другое сочетание приемов.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. В данном случае презентующий привел пример из жизни, использовал приемы гипотезы и драматизации.</p>"]
      }
    }, {
      "page_id": 21, //115
      "title": "Записная книжка. Задание 15",
      "location": "page21",
      "hasSound": false,
      "type": "note_page",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 100,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 22, //116
      "title": "Потребность «участвовать в происходящем». Приемы активизации аудитории",
      "location": "page22",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 23, //117
      "title": "Задание 45",
      "location": "page23",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "О чем болит голова, какие проблемы приходится решать сотрудникам любого отдела безопасности? ",
          "right": 1
        }, {
          "label": "Что, например, волнует вас?",
          "right": 0
        }, {
          "label": "Вы никогда не задавали себе вопрос, насколько ненадежными они могут быть? ",
          "right": 1
        }],
        "messages": ["Совершенно верно! <br/><p>Вы усвоили, чем риторические вопросы отличаются от обычных.</p>", "Ответ неверный. <br/><p>Попробуйте определить, какие из приведенных вопросов являются риторическими.</p>", "Подумайте еще. <br/><p>Вспомните, что такое риторический вопрос.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Не забывайте, что риторический вопрос обращен к аудитории, но не требует ответа.</p>"]
      }
    }, {
      "page_id": 24, //118
      "title": "Задание 46",
      "location": "page24",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Риторический ",
          "right": 0
        }, {
          "label": "Закрытый ",
          "right": 1
        }, {
          "label": "Открытый ",
          "right": 0
        }],
        "messages": ["Именно так! <br/><p>В данном примере выступающий задал закрытый вопрос.</p>", "Ответ неверный. <br/><p>Выступающий задал вопрос другого типа.</p>", "Подумайте еще. <br/><p>Вспомните, чем отличаются друг от друга вопросы разных типов.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 25, //119
      "title": "Потребность «участвовать в происходящем». Приемы активизации аудитории",
      "location": "page25",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 26, //120
      "title": "Задание 47",
      "location": "page26",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Четко формулировать задание. ",
          "right": 1
        }, {
          "label": "Разбить аудиторию на группы по 3-5 человек. ",
          "right": 1
        }, {
          "label": "Попросить группы выполнять задание на больших листах, чтобы итоги работы были видны всем. ",
          "right": 1
        }, {
          "label": "Объявить регламент выполнения задания и придерживаться его.",
          "right": 0
        }, {
          "label": "Подвести итоги работы групп, обобщив ответы. ",
          "right": 1
        }, {
          "label": "Воздерживаться от прямых оценок, кто лучше, а кто хуже – важно найти «добрые слова» для каждой группы.",
          "right": 0
        }, {
          "label": "Встроить итоги работы групп в дальнейшую презентацию.",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Вы определили все правила организации работы в мини-группах, которые использовались в данном примере.</p>", "Вы ошиблись. <br/><p>В данном случае использовался другой набор правил работы в мини-группах.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 27, //121
      "title": "Записная книжка. Задание 16",
      "location": "page27",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 3,
        "showTitle": true,
        "maxlength": 100,
        "titles": ['О КАКОЙ ПОМОЩИ ВЫ ПОПРОСИТЕ АУДИТОРИЮ?', 'КАКИЕ ВОПРОСЫ ЗАДАДИТЕ?', 'КАКИЕ ЗАДАНИЯ ДАДИТЕ ДЛЯ ОРГАНИЗАЦИИ РАБОТЫ В МИНИ-ГРУППАХ?'],
        "messages": [""]
      }
    }, {
      "page_id": 28, //122
      "title": "Задание 48",
      "location": "page28",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "Представьте, что вы проводите презентацию в незнакомой аудитории. Что вы предпочтете?",
        "questionList": [{
          "label": "Встать за кафедру.",
          "right": 0
        }, {
          "label": "Встать перед кафедрой. ",
          "right": 1
        }, {
          "label": "Стоять статично, делая презентацию.",
          "right": 0
        }, {
          "label": "Двигаться во время презентации. ",
          "right": 1
        }, {
          "label": "Жестикулировать. ",
          "right": 1
        }, {
          "label": "Избегать жестикуляции.",
          "right": 0
        }, {
          "label": "Держать в руках ручку или какой-то другой предмет, чтобы «занять руки».",
          "right": 0
        }, {
          "label": "Оставить руки свободными.",
          "right": 1
        }],
        "messages": ["Абсолютно правильно! <br/><p>Проводя презентацию в незнакомой аудитории, лучше встать перед кафедрой или двигаться во время презентации. При этом руки лучше оставить свободными, чтобы время от времени жестикулировать.</p>", "Вы ошиблись. <br/><p>Что-то в вашей позе, движениях и жестах не соответствует критериям идеальной презентации.</p>", "Подумайте еще. <br/><p>Вспомните примеры наиболее удачных презентаций, которые вам приходилось видеть.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Проводя презентацию в незнакомой аудитории, лучше встать перед кафедрой или двигаться во время презентации. При этом руки лучше оставить свободными, чтобы время от времени жестикулировать.</p>"]
      }
    }, {
      "page_id": 29, //123
      "title": "Задание 49",
      "location": "page29",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": false, // мешать ответы?
          "showAnswer": true, // показывать правильный ответ в конце
          "qCount": -1
        },
        "exs": [{
          "taskText": "Переминается с ноги на ногу",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Положение тела расслабленно",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Находится в одной точке аудитории",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Свободно перемещается по аудитории",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Теребит лист бумаги в руке",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Свободно жестикулирует",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Держит открытую позу",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Стоит в закрытой позе",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }],
        "messages": ["Это правильный ответ! <br/><p>Первому выступающему, в отличие от второго, нужно еще долго работать над своей позой, движениями и жестами.</p>", "Ответ неверный. <br/><p>Пока вам не удалось точно охарактеризовать манеру каждого из выступающих.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизоды.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Как видите, первому выступающему, в отличие от второго, нужно еще долго работать над своей позой, движениями и жестами.</p>"]
      }
    }, {
      "page_id": 30, //124
      "title": "Поза, движение, жестикуляция",
      "location": "page30",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 31, //125
      "title": "Задание 50",
      "location": "page31",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Поправлял воротничок рубашки.",
          "right": 1
        }, {
          "label": "Проверял застежку на брюках.",
          "right": 1
        }, {
          "label": "Чесал нос.",
          "right": 0
        }, {
          "label": "Крутил пряди волос.",
          "right": 0
        }, {
          "label": "Клал руку в карман.",
          "right": 1
        }, {
          "label": "Ронял предметы.",
          "right": 1
        }, {
          "label": "Застегивал пуговицу на пиджаке.",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Выступающему нужно еще долго работать над своей позой, движениями и жестами.</p>", "Ответ неверный. <br/><p>Пока вам не удалось точно охарактеризовать манеру выступающего.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Как видите, выступающему нужно еще долго работать над своей позой, движениями и жестами.</p>"]
      }
    }, {
      "page_id": 32, //126
      "title": "Зрительный контакт",
      "location": "page32",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 33, //127
      "title": "Задание 51",
      "location": "page33",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "video": "35",
            "label": 'С аудиторией',
            "order": 0
          }, {
            "video": "36",
            "label": 'Со своими мыслями',
            "order": 1
          }, {
            "video": "37",
            "label": 'Лично с вами',
            "order": 2
          }]
        }],
        "messages": ["Вы верно распределили все видеосюжеты! <br/><p>Следует запомнить, что наиболее эффективно устанавливать зрительный контакт с аудиторией либо лично с каждым присутствующим.</p>", "Будьте внимательнее. Зрительный контакт в сюжетах был установлен иначе.</p>", "И снова ошибка. <br/><p>Попробуйте еще раз.</p>", "К сожалению, с заданием вы не справились. <br/><p>Закройте это окно и посмотрите правильный ответ. Запомните, что наиболее эффективно устанавливать зрительный контакт с аудиторией либо лично с каждым присутствующим.</p>"]
      }
    }, {
      "page_id": 34, //128
      "title": "Распределяйте внимание",
      "location": "page34",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 35, //129
      "title": "Задание 52",
      "location": "page35",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Какое место сцены вы займете, чтобы поддерживать зрительный контакт со всей аудиторией?",
        "questionList": [{
          "label": "В верхнем углу равностороннего треугольника (между вами и слушателями с двух краев в первом ряду).",
          "right": 1
        }, {
          "label": "В верхнем углу равнобедренного треугольника.",
          "right": 0
        }],
        "messages": ["Это правильный ответ! <br/><p>Опытные презентаторы советуют выбрать в начале выступления такое место, чтобы между вами и крайними зрителями слева и справа в первом ряду образовался равносторонний треугольник. Не равнобедренный (с тупым углом в основании), а равносторонний, чтобы вы не упускали из бокового зрения крайние места. Потом это местоположение вы будете менять, передвигаясь по помещению.</p>", "Не совсем так. <br/><p>Это не самое удачное место для выступающего.</p>", "Увы, это неверный ответ. <br/><p>Так вам будет неудобно проддерживать зрительный контакт со всей аудиторией.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Опытные презентаторы советуют выбрать в начале выступления такое место, чтобы между вами и крайними зрителями слева и справа в первом ряду образовался равносторонний треугольник. Не равнобедренный (с тупым углом в основании), а равносторонний, чтобы вы не упускали из бокового зрения крайние места. Потом это местоположение вы будете менять, передвигаясь по помещению.</p>"]
      }
    }, {
      "page_id": 36, //130
      "title": "Управляйте вашим голосом",
      "location": "page36",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 37, //131
      "title": "Характеристики голоса",
      "location": "page37",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 38, //132
      "title": "Задание 53",
      "location": "page38",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Монотонность. ",
          "right": 1
        }, {
          "label": "Высокая скорость.",
          "right": 0
        }, {
          "label": "Недостаточная громкость. ",
          "right": 1
        }, {
          "label": "Визгливые интонации.",
          "right": 0
        }, {
          "label": "Напряженность. ",
          "right": 1
        }],
        "messages": ["Ваш ответ верный! <br/><p>Презентующий был неуверен в себе, отсюда и его ошибки: монотонность, напряжение и тихий голос.</p>", "Это неверный ответ! <br/><p>Обратите внимание, что презентующий был неуверен в себе, что отразилось и на его голосе.</p>", "Где-то закралась ошибка. <br/><p>Вы не совсем точно определили проблемы в звучании голоса презентующего.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Презентующий был неуверен в себе, отсюда и его ошибки: монотонность, напряжение и тихий голос.</p>"]
      }
    }, {
      "page_id": 39, //133
      "title": "Работа над улучшением голоса",
      "location": "page39",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 40, //134
      "title": "Выражение эмоций при помощи голоса",
      "location": "page40",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 41, //135
      "title": "Язык презентации",
      "location": "page41",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 42, //136
      "title": "Работа над упрощением языка",
      "location": "page42",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 43, //137
      "title": "Избавьтесь от сорных слов",
      "location": "page43",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 44, //138
      "title": "Задание 54",
      "location": "page44",
      "hasSound": "false",
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "«Как бы» ",
          "right": 1
        }, {
          "label": "«Так сказать» ",
          "right": 1
        }, {
          "label": "«Ну…» ",
          "right": 1
        }, {
          "label": "«Э-э-э» ",
          "right": 1
        }],
        "messages": ["Все верно! <br/><p>Речь выступающего переполнена сорными словами и междометиями.</p>", "Не совсем так. <br/><p>Возможно, вы дали неполный ответ…</p>", "Посмотрите сюжет еще раз. <br/><p>Выступающий использовал множество «сорных слов».</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Выступающий использовал все перечисленные «сорные слова».</p>"]
      }
    }, {
      "page_id": 45, //139
      "title": "Записная книжка. Задание 17",
      "location": "page45",
      "hasSound": "false",
      "type": "note_page",
      "data": {
        "task_fields": 10,
        "showTitle": false,
        "maxlength": 50,
        "titles": ['', ''],
        "messages": [""]
      }
    }, {
      "page_id": 46, //140
      "title": "Задание 55",
      "location": "page46",
      "hasSound": "false",
      "type": "note_exercise",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 3,
        "useColumns": false,
        "maxlength": 500,
        "titles": [""],
        "showComment": true,
        "questionList": [{
          "label": "Вопрос 1. Встреча прошла с большим интересом.",
          "right": "Встреча прошла с большим успехом.<br/>Или:<br/>Встреча вызвала большой интерес."
        }, {
          "label": "Вопрос 2. Приведенные сведения в последнем статотчете говорят, что проблема еще не решена.",
          "right": "Сведения, которые приведены в последнем статотчете, говорят о том, что проблема еще не решена.<br/>Или:<br/>Сведения из последнего статотчета говорят о том, что проблема еще не решена."
        }, {
          "label": "Вопрос 3. Жизни людей спасаются касками.",
          "right": "Каски спасают жизни людей."
        }],
        "messages": [""]
      }
    }, {
      "page_id": 47, //141
      "title": "Репетиция выступления",
      "location": "page47",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 48, //142
      "title": "«Трудные» вопросы",
      "location": "page48",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 49, //143
      "title": "Типы «трудных» вопросов",
      "location": "page49",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 50, //144
      "title": "Задание 56",
      "location": "page50",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность).",
            "right": 0
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного).",
            "right": 0
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 1
          }, {
            "label": "Испытующий вопрос (задан для проверки ваших знаний и опыта).",
            "right": 0
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 1
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию.",
            "right": 0
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос.",
            "right": 0
          }, {
            "label": "Отступить и спросить совета.",
            "right": 0
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы.",
            "right": 0
          }]
        }],
        "messages": ["Вы ответили верно! Проверьте свой выбор, посмотрев эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_2.jpg' vjs-video> <source src='video/v39_2.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_2.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Это неверный ответ. Данным вопросом замаскировано неодобрение…", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_2.jpg' vjs-video> <source src='video/v39_2.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_2.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }, {
      "page_id": 51, //145
      "title": "Задание 57",
      "location": "page51",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность). ",
            "right": 1
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного).",
            "right": 0
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }, {
            "label": "Испытующий вопрос (задан для проверки ваших знаний и опыта).",
            "right": 0
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 0
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию.",
            "right": 0
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос. ",
            "right": 1
          }, {
            "label": "Отступить и спросить совета.",
            "right": 0
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы.",
            "right": 0
          }]
        }],
        "messages": ["Действительно, спрашивающий хочет показать свою информированность. Проверьте свой выбор, посмотрев эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_4.jpg' vjs-video> <source src='video/v39_4.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_4.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Не совсем так. Попробуйте ответить на вопросы снова.", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_4.jpg' vjs-video> <source src='video/v39_4.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_4.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }, {
      "page_id": 52, //146
      "title": "Задание 58",
      "location": "page52",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность). ",
            "right": 0
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного).",
            "right": 0
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }, {
            "label": "Испытующий вопрос (задан для проверки ваших знаний и опыта). ",
            "right": 1
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 0
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию. ",
            "right": 1
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос. ",
            "right": 0
          }, {
            "label": "Отступить и спросить совета.",
            "right": 0
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы.",
            "right": 0
          }]
        }],
        "messages": ["Все верно! Это испытующий вопрос. Здесь стоит признаться, что не знаете ответа. Посмотрите второй эпизод. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_6.jpg' vjs-video> <source src='video/v39_6.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_6.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Ваш ответ не совсем верный. Данный вопрос – испытующий. Попробуйте ответить снова.", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_6.jpg' vjs-video> <source src='video/v39_6.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_6.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }, {
      "page_id": 53, //147
      "title": "Задание 59",
      "location": "page53",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность). ",
            "right": 0
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного). ",
            "right": 1
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 0
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию. ",
            "right": 0
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос. ",
            "right": 0
          }, {
            "label": "Отступить и спросить совета. ",
            "right": 1
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы.",
            "right": 0
          }]
        }],
        "messages": ["Совершенно верно! Это оборонительный вопрос, здесь нужно отступить и спросить совета. Проверьте свой выбор, посмотрев эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_8.jpg' vjs-video> <source src='video/v39_8.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_8.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Совершенно верно! Это оборонительный вопрос, здесь нужно отступить и спросить совета. Проверьте свой выбор, посмотрев эпизод-ответ.", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_8.jpg' vjs-video> <source src='video/v39_8.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_8.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }, {
      "page_id": 54, //148
      "title": "Задание 60",
      "location": "page54",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность). ",
            "right": 0
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного). ",
            "right": 0
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }, {
            "label": "Испытующий вопрос (задан для проверки ваших знаний и опыта). ",
            "right": 1
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 0
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию. ",
            "right": 0
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос. ",
            "right": 1
          }, {
            "label": "Отступить и спросить совета.",
            "right": 0
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы.",
            "right": 0
          }]
        }],
        "messages": ["Верно! Это испытующий вопрос. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_10.jpg' vjs-video> <source src='video/v39_10.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_10.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Это неправильный ответ. Попробуйте тип вопроса и тип реакции снова.", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Чтобы узнать верный ответ, посмотрите второй киноэпизод. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_10.jpg' vjs-video> <source src='video/v39_10.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_10.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }, {
      "page_id": 55, //149
      "title": "Задание 61",
      "location": "page55",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Оцените, что скрывается за заданным вопросом?",
          "questionList": [{
            "label": "Вопрос-демонстрация (тот, кто спрашивает, хочет показать свою информированность). ",
            "right": 0
          }, {
            "label": "Оборонительный вопрос (возникает, если ваши предложения могут являться угрозой для чего-то лично важного). ",
            "right": 1
          }, {
            "label": "Вопрос-вызов (возникает, когда вы посягаете на область знаний одного из слушателей).",
            "right": 0
          }, {
            "label": "Скрытое возражение (за вопросом замаскировано неодобрение). ",
            "right": 0
          }, {
            "label": "Испытующий вопрос (задан для проверки ваших знаний и опыта). ",
            "right": 0
          }]
        }, {
          "taskText": "Подберите тип своей реакции на заданный тип вопроса.",
          "questionList": [{
            "label": "Переформулировать вопрос. ",
            "right": 0
          }, {
            "label": "Признаться, что не знаете ответа, пообещать получить информацию. ",
            "right": 0
          }, {
            "label": "Похвалить оппонента и попросить его самого ответить на вопрос. ",
            "right": 0
          }, {
            "label": "Отступить и спросить совета.",
            "right": 0
          }, {
            "label": "Задать вопрос, чтобы человек выговорился, а затем, если не знаете, как ответить, переадресовать его другим членам группы. ",
            "right": 1
          }]
        }],
        "messages": ["Совершенно верно! Это вопрос оборонительный, дайте человеку возможность выговориться. Посмотрите эпизод-ответ. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_12.jpg' vjs-video> <source src='video/vi39_12.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_12.vtt' srclang='ru' label='Russian Subtitles' default />    </video>", "Это неверный ответ. За вопросом скрывается другая мотивация. Выполните задание еще раз. ", "Подумайте еще. Пересмотрите вопрос-эпизод.", "И снова ошибка. Чтобы узнать правильный ответ, посмотрите второй киноэпизод. <video class='video-js video-js-50-0N vjs-default-skin video-element my-home-video' controls preload='auto' width='696' height='572' poster='video/posters/39_12.jpg' vjs-video> <source src='video/v39_12.mp4' type='video/mp4'><track enabled kind='captions' src='video/subtitles/v39_12.vtt' srclang='ru' label='Russian Subtitles' default />    </video>"]
      }
    }] // end of pages array in chapter 2
  }, // end 4of chapter
  {
    "chapter_id": 6,
    "chapter_location": "chapter06",
    "title": "Глава 5",
    "description": "Глава 5. Технологии работы с аудиторией разной численности",
    "pages": [{
      "page_id": 1, //150
      "title": "Технологии работы с аудиторией разной численности",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //151
      "title": "Задание 62",
      "location": "page02",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Малая аудитория",
          "taskType": "single",
          "questionList": [{
            "label": "реагирует как единая группа людей",
            "right": 0
          }, {
            "label": "реагирует как совокупность отдельных личностей",
            "right": 1
          }]
        }, {
          "taskText": "То, как рассажены люди в большом зале,",
          "taskType": "single",
          "questionList": [{
            "label": "влияет на их восприятие содержания презентации ",
            "right": 1
          }, {
            "label": "не влияет на их восприятие содержания презентации",
            "right": 0
          }]
        }],
        "messages": ["Ваш ответ верный! <br/><p>Безусловно, есть существенная разница в реакции малой и большой аудитории.</p>", "Вы ошиблись. <br/><p>Учтите, что в реакции большой и малой аудитории есть существенная разница.</p>", "Подумайте еще. <br/><p>Вспомните свой опыт участия в презентациях с разной численностью слушателей.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Малая аудитория реагирует как совокупность отдельных личностей, а то, как рассажены люди в зале, однозначно влияет на их восприятие содержания презентации.</p>"]
      }
    }, {
      "page_id": 3, //152
      "title": "Особенности большой и малочисленной аудиторий",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //153
      "title": "Задание 63",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "Какие из этих рекомендаций предпочтительнее при проведении презентации для большой аудитории (1), а какие – для аудитории малой численности (2).",
        "questionTitle": "",
        "questionList": [{
          "label": "Быть готовым отступить от заранее разработанного сценария и подстроиться под запросы аудитории",
          "right": [0, 1]
        }, {
          "label": "Применять максимум ораторского мастерства",
          "right": [1, 0]
        }, {
          "label": "Стремиться к минимуму вопросов и ответов",
          "right": [1, 0]
        }, {
          "label": "Стимулировать вопросы и вести диалог",
          "right": [0, 1]
        }, {
          "label": "Использовать подготовленные слайды и другие виды наглядности как опору и структурный «скелет» презентации",
          "right": [1, 0]
        }, {
          "label": "Строго следовать подготовленному заранее сценарию презентации",
          "right": [1, 0]
        }, {
          "label": "Стремиться к неофициальности",
          "right": [0, 1]
        }, {
          "label": "Проявлять знание своего предмета во всех деталях",
          "right": [0, 1]
        }, {
          "label": "Быть готовым отступить от заранее разработанного сценария и подстроиться под запросы аудитории",
          "right": [0, 1]
        }],
        "messages": ["Это правильный ответ! <br/><p>Вы верно определили рекомендации, подходящие для малой и большой аудитории.</p>", "Не совсем так. <br/><p>Попробуйте точнее определить рекомендации, подходящие для аудитории разной численности.</p>", "Подумайте еще. <br/><p>Выполните задание снова.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 5, //154
      "title": "Реакция аудитории",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //155
      "title": "Задание 64",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Как малочисленная.",
          "right": 1
        }, {
          "label": "Как большая.",
          "right": 0
        }],
        "messages": ["Это верный ответ! <br/><p>Собравшиеся будут реагировать как малая аудитория.</p>", "Это неверный ответ. <br/><p>У собравшихся будет другая реакция.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Конечно, в данном случае собравшиеся будут реагировать как малая аудитория.</p>"]
      }
    }] // end of pages array in chapter 2
  }, // end 5of chapter
  {
    "chapter_id": 7,
    "chapter_location": "chapter07",
    "title": "Глава 6",
    "description": "Глава 6. Технический аспект презентации",
    "pages": [{
      "page_id": 1, //156
      "title": "Технический аспект презентации",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //157
      "title": "Использование иллюстративных материалов",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //158
      "title": "Задание 65",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Не оправдано"
        }, {
          "id": 1,
          "label": "Оправдано"
        }],
        "questionList": [{
          "label": "Произвести впечатление с помощью объемных детализированных таблиц.",
          "right": 0
        }, {
          "label": "Пробудить интерес к теме презентации.",
          "right": 1
        }, {
          "label": "Усилить (подкрепить) вербальное сообщение. Облегчить аудитории запоминание материала.",
          "right": 1
        }, {
          "label": "Избежать интерактивного взаимодействия с аудиторией.",
          "right": 0
        }, {
          "label": "«Включить» эмоции слушателей.",
          "right": 1
        }, {
          "label": "Проиллюстрировать мысли и факты, которые трудно представить.",
          "right": 1
        }, {
          "label": "Структурировать восприятие аудитории.",
          "right": 1
        }],
        "messages": ["Отличный результат! <br/><p>Вы верно определили цели, для которых оправдано использование иллюстративных материалов.</p>", "Это неправильный ответ. <br/><p>Вы не совсем верно определили цели, для которых оправдано использование иллюстративных материалов.</p>", "Подумайте еще. <br/><p>Вспомните, для чего нужно включать в презентацию иллюстративные материалы.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 4, //159
      "title": "Правила подготовки слайдов",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //160
      "title": "Задание 66",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Пробудить интерес к теме презентации.",
          "right": 0
        }, {
          "label": "Усилить (подкрепить) вербальное сообщение.",
          "right": 1
        }, {
          "label": "Облегчить аудитории запоминание материала. ",
          "right": 1
        }, {
          "label": "Избежать интерактивного взаимодействия с аудиторией.",
          "right": 0
        }, {
          "label": "«Включить» эмоции слушателей.",
          "right": 0
        }, {
          "label": "Проиллюстрировать мысли и факты, которые трудно представить.",
          "right": 0
        }, {
          "label": "Структурировать восприятие аудитории.",
          "right": 0
        }],
        "messages": ["Отлично! <br/><p>Выступающий использовал текстовый слайд, чтобы усилить вербальное сообщение и облегчить запоминание материала.</p>", "Не совсем так. <br/><p>Выступающий использовал текстовый слайд для других целей.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Выступающий использовал текстовый слайд, чтобы усилить вербальное сообщение и облегчить запоминание материала.</p>"]
      }
    }, {
      "page_id": 6, //161
      "title": "Задание 67",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Следуйте «правилу футболки»: на слайде пишите слов не больше, чем вы написали бы на передней стороне майки.",
          "right": 1
        }, {
          "label": "Не используйте на одном слайде более 3 шрифтов (курсив и полужирный являются отдельными шрифтами). ",
          "right": 1
        }, {
          "label": "Не используйте на одном слайде более 3 цветов.",
          "right": 1
        }, {
          "label": "Выбирайте шрифты «без засечек»: поперечные черточки в буквах затрудняют восприятие.",
          "right": 1
        }],
        "messages": ["Совершенно верно! <br/><p>Здесь были соблюдены все правила подготовки текстовых слайдов.</p>", "Ответ неверный. <br/><p>Посмотрите киноэпизод более внимательно и ответьте на вопрос снова.</p>", "Подумайте еще. <br/><p>Повторите правила подготовки слайдов.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. В этом эпизоде были соблюдены все правила подготовки текстовых слайдов.</p>"]
      }
    }, {
      "page_id": 7, //162
      "title": "Какой цвет наиболее предпочтителен для слайдов?",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //163
      "title": "Задание 68",
      "location": "page08",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "taskText": "",
        "questionList": [{
          "label": "Проектор с экраном",
          "order": [1, 2],
          "projectorImage": ["img/163-02.png", "img/163-03.png", "img/163_mob-02.png", "img/163_mob-03.png"]
        }, {
          "label": "Презентующий",
          "order": 0
        }],
        "messages": ["Ваш ответ верный! <br/><p>Чтобы привлекать непроизвольное внимание, надо находиться в центре помещения. Разместите экран и проектор под углом 45 градусов к слушателям, а сами займите центральное положение. Тогда и экран будет виден, и вы будете прямо перед вашей аудиторией.</p>", "Это неправильный ответ. <br/><p>Вы выбрали не оптимальное расположение.</p>", "Подумайте еще. <br/><p>Учтите, что выступающий не должен загораживать собой экран.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Чтобы привлекать непроизвольное внимание, надо находиться в центре помещения. Разместите экран и проектор под углом 45 градусов к слушателям, а сами займите центральное положение. Тогда и экран будет виден, и вы будете прямо перед вашей аудиторией.</p>"]
      }
    }, {
      "page_id": 9, //164
      "title": "Задание 69",
      "location": "page09",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 2, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "На экран, чтобы синхронизировать свои объяснения и изображение.",
          "right": 0,
          "icon": "screen"
        }, {
          "label": "На слушателей, чтобы не терять зрительный контакт. ",
          "right": 1,
          "icon": "listeners"
        }],
        "messages": ["Верно! <br/><p>Во время презентации выступающий должен все время поддерживать зрительный контакт со слушателями. Не стоит смотреть на экран в то время, когда вы говорите.</p>", "К сожалению, вы ошиблись. <br/><p>Подумайте еще.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Во время презентации выступающий должен все время поддерживать зрительный контакт со слушателями. Не стоит смотреть на экран в то время, когда вы говорите.</p>"]
      }
    }, {
      "page_id": 10, //165
      "title": "Задание 70",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Стоял лицом к аудитории. ",
          "right": 1
        }, {
          "label": "Загораживал экран.",
          "right": 0
        }, {
          "label": "Стоял под углом 45 градусов по отношению к слушателям.",
          "right": 1
        }, {
          "label": "Стоял сбоку от экрана. ",
          "right": 1
        }, {
          "label": "Постоянно поддерживал зрительный контакт с аудиторией.",
          "right": 1
        }, {
          "label": "Отвлекался на экран во время произнесения текста.",
          "right": 0
        }],
        "messages": ["Ваш ответ верный! <br/><p>Поведение выступающего было безупречным.</p>", "Не совсем так. <br/><p>Выступающий не допускал ошибок…</p>", "Вы ошиблись. <br/><p>Посмотрите киноэпизод внимательнее.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Поведение выступающего было безупречным: он стоял лицом к аудитории, под углом 45 градусов, и поддерживал постоянный зрительный контакт.</p>"]
      }
    }, {
      "page_id": 11, //166
      "title": "Расположение оборудования",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //167
      "title": "Задание 71",
      "location": "page12",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Неправильно разместил флипчарт.",
          "right": 0
        }, {
          "label": "Неправильно разместил проектор.",
          "right": 1
        }, {
          "label": "Не смог включить проектор.",
          "right": 0
        }, {
          "label": "Не настроил четкость изображения.",
          "right": 1
        }, {
          "label": "Не проверил, как надо располагать слайды на проекторе. ",
          "right": 1
        }, {
          "label": "Использовал слайды для другой презентации.",
          "right": 0
        }, {
          "label": "Заслонял собой изображение.",
          "right": 1
        }, {
          "label": "Забыл отключить свет в аудитории.",
          "right": 1
        }],
        "messages": ["Вы правы! <br/><p>Презентующему явно не хватает опыта публичных выступлений. Он допустил много ошибок.</p>", "Это неправильный ответ. <br/><p>Презентующему явно не хватает опыта публичных выступлений.</p>", "Подумайте еще. <br/><p>Вспомните правила работы с техникой во время презентации.</p>", "И вновь ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }] // end of pages array in chapter 2
  }, // end 6of chapter
  {
    "chapter_id": 8,
    "chapter_location": "chapter08",
    "title": "Глава 7",
    "description": "Глава 7. Итоговый тест",
    "pages": [{
      "page_id": 1, //168
      "title": "Итоговый тест",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //169
      "title": "Итоговый тест",
      "location": "page02",
      "hasSound": false,
      "type": "test",
      "messages": [""]
    }, {
      "page_id": 3, //170
      "title": "Заключение",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of chapter
  }] // end of chapters array
};

var testStructure = {
  "tests": [{
    "testId": 0,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 5,
      "caption": "group1",
      "qUse": "all",
      "questions": [{
        "question": "На этапе подготовки к презентации…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "надо обязательно формулировать главные цели презентации в письменном виде ",
          "right": true
        }, {
          "label": "не надо формулировать цели, так как это усложнит процесс написания текста",
          "right": false
        }, {
          "label": "достаточно продумать, каких результатов вы хотите добиться своей презентацией",
          "right": false
        }]
      }, {
        "question": "«Рассказать о нашей компании»…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "является правильной формулировкой цели презентации",
          "right": false
        }, {
          "label": "не является правильной формулировкой цели презентации ",
          "right": true
        }, {
          "label": "является правильной формулировкой цели информационной презентации ",
          "right": false
        }]
      }, {
        "question": "С каким утверждением вы согласитесь?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "в ходе подготовки основное внимание надо уделить поиску яркой формы подачи материала",
          "right": false
        }, {
          "label": "главное – продумать содержание и написать текст выступления",
          "right": false
        }, {
          "label": "важнее всего узнать, кто соберется в зале, и проанализировать их ожидания ",
          "right": true
        }]
      }, {
        "question": "Какую часть презентации надо подготовить особенно тщательно?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "основную",
          "right": true
        }, {
          "label": "вступительную",
          "right": false
        }, {
          "label": "заключительную",
          "right": false
        }]
      }, {
        "question": "Какие факторы влияют на выбор типа аргументации?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "пол большинства слушателей ",
          "right": true
        }, {
          "label": "возраст слушателей ",
          "right": true
        }, {
          "label": "размер помещения, где проходит презентация",
          "right": false
        }, {
          "label": "время суток ",
          "right": true
        }, {
          "label": "когда будет приниматься решение: в ходе презентации или после нее ",
          "right": true
        }, {
          "label": "наличие технических средств: видеопроектора, музыкального центра и т.д.",
          "right": false
        }]
      }, {
        "question": "Какие аргументы эффективнее для мужской аудитории?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "рациональные ",
          "right": true
        }, {
          "label": "эмоциональные",
          "right": false
        }, {
          "label": "рациональные, если презентация проходит в вечернее время",
          "right": false
        }, {
          "label": "эмоциональные, если решение требуется принять в ходе самой презентации ",
          "right": true
        }]
      }, {
        "question": "Если заключительная часть презентации повторяет идеи, высказанные во вступительной части, это говорит о том, что…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "выступающему больше нечего сказать",
          "right": false
        }, {
          "label": "выступающий тщательно продумал композицию своей презентации для достижения поставленных целей ",
          "right": true
        }, {
          "label": "выступающий придерживается правила «Повторение – мать учения»",
          "right": false
        }]
      }, {
        "question": "От чего зависит реакция аудитории на презентацию?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "от заинтересованности аудитории в теме презентации ",
          "right": true
        }, {
          "label": "от статуса презентующего",
          "right": false
        }, {
          "label": "от отношения презентующего к аудитории ",
          "right": true
        }]
      }, {
        "question": "Какие каналы восприятия могут быть задействованы в процессе презентации?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "слуховой ",
          "right": true
        }, {
          "label": "зрительный ",
          "right": true
        }, {
          "label": "обонятельный ",
          "right": true
        }, {
          "label": "осязательный ",
          "right": true
        }]
      }, {
        "question": "Какой тип вопроса целесообразно использовать в начале презентации?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "открытый",
          "right": false
        }, {
          "label": "закрытый ",
          "right": true
        }, {
          "label": "риторический",
          "right": false
        }]
      }, {
        "question": "Что поможет привлечь внимание аудитории?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "повышение громкости речи ",
          "right": true
        }, {
          "label": "снижение громкости речи ",
          "right": true
        }, {
          "label": "строгое следование плану презентации",
          "right": false
        }, {
          "label": "использование наглядных материалов ",
          "right": true
        }]
      }, {
        "question": "С какой частью зала выступающему легче поддерживать зрительный контакт?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "с передними рядами ",
          "right": false
        }, {
          "label": "с галеркой",
          "right": false
        }, {
          "label": "с центральной ",
          "right": true
        }, {
          "label": "с сидящими слева ",
          "right": false
        }, {
          "label": "с сидящими справа ",
          "right": false
        }]
      }, {
        "question": "Как долго стоит задерживать взгляд на одном слушателе?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "1-3 секунды ",
          "right": true
        }, {
          "label": "3-5 секунд ",
          "right": false
        }, {
          "label": "5-10 секунд",
          "right": false
        }]
      }, {
        "question": "Если вы делаете презентацию перед «научной» аудиторией, надо…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "говорить «научным» языком ",
          "right": false
        }, {
          "label": "говорить как можно проще, избегая лишней терминологии ",
          "right": true
        }]
      }, {
        "question": "Многочисленная аудитория реагирует в основном…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "на личность выступающего (внешность, манеру говорить, уверенность) ",
          "right": true
        }, {
          "label": "на содержание презентации",
          "right": false
        }]
      }, {
        "question": "Активная жестикуляция уместна, если…",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "выступающий стоит за кафедрой ",
          "right": true
        }, {
          "label": "выступающий стоит перед публикой на переднем крае сцены ",
          "right": true
        }, {
          "label": "выступающий свободно передвигается по залу ",
          "right": true
        }]
      }, {
        "question": "Когда не стоит демонстрировать слайды?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "во вступительной части презентации ",
          "right": true
        }, {
          "label": "в кульминационной части",
          "right": false
        }, {
          "label": "в заключительной части ",
          "right": true
        }]
      }, {
        "question": "Когда следует использовать раздаточные материалы со слайдами к вашей презентации?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "до начала выступления, чтобы аудитория была готова к восприятию и следила за ее проведением ",
          "right": false
        }, {
          "label": "в кульминационной точке презентации, чтобы поддержать интерес аудитории и стимулировать вопросы ",
          "right": true
        }, {
          "label": "в завершающей части, чтобы не отвлекать на раздаточные материалы внимание аудитории ",
          "right": false
        }]
      }, {
        "question": "Цветной заголовок или текст на слайде в сравнении с черным?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "кажется больше",
          "right": false
        }, {
          "label": "кажется меньше ",
          "right": true
        }, {
          "label": "воспринимается одинаково",
          "right": false
        }]
      }, {
        "question": "Каково оптимальное соотношение времени, потраченного на подготовку презентации, и времени на ее проведение?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "50/50",
          "right": false
        }, {
          "label": "70/30",
          "right": false
        }, {
          "label": "90/10 ",
          "right": false
        }]
      }]
    }]
  }, {
    "testId": 1,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 3,
      "caption": "group2",
      "qUse": "all",
      "questions": [{
        "question": "Вы – коммерческий директор малоизвестной компании, которая производит корма для животных. Вам предстоит выступать на съезде ветеринарных врачей. Вы знаете, что большинство из присутствующих в зале имеет домашних питомцев.<br/>Какую цель вы поставите для своего выступления?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "рассказать о своей компании ",
          "right": true
        }, {
          "label": "продать корма присутствующим в зале",
          "right": false
        }, {
          "label": "убедить аудиторию, что качество продукции вашей компании гарантирует активное долголетие домашним животным ",
          "right": false
        }, {
          "label": "убедить, что качественное питание влияет на здоровье животных",
          "right": false
        }, {
          "label": "доказать, что раскрученность бренда не является залогом качества кормов",
          "right": false
        }]
      }, {
        "question": "С чего вы начнете подготовку к презентации?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "осмотрите помещение, где будет проходить презентация",
          "right": false
        }, {
          "label": "проанализируете состав аудитории ",
          "right": true
        }, {
          "label": "сформулируете ваши цели ",
          "right": false
        }, {
          "label": "оцените ожидания аудитории ",
          "right": false
        }]
      }, {
        "question": "Ключевая концепция презентации – это…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "тезисный план выступления",
          "right": false
        }, {
          "label": "формулировка целей презентующего",
          "right": false
        }, {
          "label": "вывод, к которому должны прийти слушатели по итогам презентации ",
          "right": true
        }]
      }, {
        "question": "Чтобы чувствовать себя уверенно в ходе презентации, надо выучить наизусть:",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "начало презентации ",
          "right": true
        }, {
          "label": "основные тезисы",
          "right": false
        }, {
          "label": "связки-переходы",
          "right": false
        }, {
          "label": "конец презентации ",
          "right": true
        }]
      }, {
        "question": "Мыслительные схемы Тони Бьюзена помогают:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "запоминать текст презентации",
          "right": false
        }, {
          "label": "составлять текст презентации",
          "right": false
        }, {
          "label": "формулировать главные тезисы ",
          "right": true
        }, {
          "label": "отвечать на трудные вопросы в аудитории",
          "right": false
        }]
      }, {
        "question": "Главных идей в презентации должно быть:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "не менее трех",
          "right": false
        }, {
          "label": "не более трех",
          "right": false
        }, {
          "label": "не более пяти ",
          "right": true
        }, {
          "label": "не более семи",
          "right": false
        }]
      }, {
        "question": "Два презентующих испытывали сильное волнение перед началом конференции. Один из них (презентующий «А») перед самым выходом на сцену сделал несколько энергичных приседаний. Второй презентующий («В») дышал глубоко, полной грудью.<br/>Кто из презентующих справился с волнением?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "презентующий «А»",
          "right": false
        }, {
          "label": "презентующий «В»",
          "right": false
        }, {
          "label": "оба презентующих ",
          "right": true
        }]
      }, {
        "question": "Слушатели увлечены выступлением, сохраняют внимание к теме презентации без всяких усилий. Какой тип внимания у них активирован?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "непроизвольное",
          "right": false
        }, {
          "label": "произвольное",
          "right": false
        }, {
          "label": "послепроизвольное ",
          "right": true
        }]
      }, {
        "question": "Найдите лишний пункт.<br/>«Правило трех» помогает презентующему:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "поддерживать внимание и интерес аудитории ",
          "right": false
        }, {
          "label": "правильно рассаживать пришедших на презентацию ",
          "right": false
        }, {
          "label": "выстраивать систему аргументов ",
          "right": true
        }, {
          "label": "выбирать, какой аргумент стоит называть последним ",
          "right": false
        }]
      }, {
        "question": "Какие факторы влияют на выбор выступающими рациональных и эмоциональных аргументов?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "время проведения презентации ",
          "right": true
        }, {
          "label": "цели выступающего",
          "right": false
        }, {
          "label": "пол слушателей ",
          "right": true
        }, {
          "label": "опыт выступающего",
          "right": false
        }, {
          "label": "возраст слушателей ",
          "right": true
        }, {
          "label": "момент принятия решения слушателями ",
          "right": true
        }, {
          "label": "тема презентации",
          "right": false
        }]
      }, {
        "question": "«После каждого ключевого пункта необходимо подводить краткий итог» – к какой из частей презентации относится данное правило?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "открывающей части",
          "right": false
        }, {
          "label": "введению",
          "right": false
        }, {
          "label": "основной части ",
          "right": true
        }, {
          "label": "обзору ",
          "right": false
        }, {
          "label": "заключению",
          "right": false
        }]
      }, {
        "question": "Какую часть презентации вы будете готовить первой?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "открывающую часть",
          "right": false
        }, {
          "label": "введение",
          "right": false
        }, {
          "label": "основную часть ",
          "right": true
        }, {
          "label": "обзор",
          "right": false
        }, {
          "label": "заключение",
          "right": false
        }]
      }, {
        "question": "Через какое время рекомендуется «переключать» каналы восприятия у аудитории?<br/>Не реже, чем через:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "5 минут",
          "right": false
        }, {
          "label": "10 минут",
          "right": false
        }, {
          "label": "15 минут",
          "right": false
        }, {
          "label": "20 минут ",
          "right": true
        }]
      }, {
        "question": "Согласны ли вы с утверждением:<br/><i>«В ходе презентации «пристройку снизу» нельзя использовать ни в каких случаях».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Какую потребность аудитории помогут реализовать коммуникативные приемы «попросить помощи» и «риторический вопрос»?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "потратить время с пользой",
          "right": false
        }, {
          "label": "получить признание",
          "right": false
        }, {
          "label": "получить удовольствие",
          "right": false
        }, {
          "label": "участвовать в происходящем ",
          "right": true
        }]
      }, {
        "question": "Какой канал оказывает на восприятие презентации наиболее сильное влияние?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "зрительный ",
          "right": true
        }, {
          "label": "слуховой",
          "right": false
        }, {
          "label": "обонятельный",
          "right": false
        }, {
          "label": "осязательный",
          "right": false
        }]
      }, {
        "question": "В какой аудитории требуется строго следовать разработанному заранее сценарию презентации?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "в малой",
          "right": false
        }, {
          "label": "в большой ",
          "right": true
        }]
      }, {
        "question": "Отметьте факторы, которые влияют на реакцию аудитории.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "освещенность помещения ",
          "right": true
        }, {
          "label": "события в стране",
          "right": false
        }, {
          "label": "плотность рассадки в зале ",
          "right": true
        }, {
          "label": "расстояние между ведущим и первым рядом ",
          "right": true
        }, {
          "label": "близость знакомства слушателей между собой ",
          "right": true
        }]
      }, {
        "question": "В каких случаях слайды воспринимаются как помеха?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "слайды меняются каждые 5 минут",
          "right": false
        }, {
          "label": "таблицы можно прочесть за 1 минуту",
          "right": false
        }, {
          "label": "слайды дублируют произносимую информацию ",
          "right": true
        }]
      }, {
        "question": "Какой шрифт вы предпочтете для слайдов?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "с засечками",
          "right": false
        }, {
          "label": "без засечек ",
          "right": true
        }]
      }]
    }]
  }]
};

var manifest = ["img/01-01.png", "img/01-02.png", "img/01-05.png", "img/01-08.png", "img/02-s.png", "img/02.18-01.png", "img/02.png", "img/03_03.jpg", "img/04-01.png", "img/05.png", "img/06-01.png", "img/07-01.png", "img/07.png", "img/08.png", "img/09.png", "img/10.jpg", "img/103-mob.png", "img/103.png", "img/105.jpg", "img/106.jpg", "img/108.jpg", "img/109.jpg", "img/10_03.jpg", "img/111-mob.jpg", "img/111.jpg", "img/113.jpg", "img/116-mob.jpg", "img/116.jpg", "img/119-mob.jpg", "img/119.jpg", "img/12.png", "img/124-mob.jpg", "img/124.jpg", "img/126.jpg", "img/128.png", "img/128_3.jpg", "img/128_3_blur.png", "img/12_03.jpg", "img/130-mob.png", "img/130.png", "img/131.png", "img/133.png", "img/134-mob.png", "img/134.png", "img/135.png", "img/136.png", "img/137.png", "img/13_03.jpg", "img/14.png", "img/140.png", "img/141.png", "img/142.png", "img/143-mob.png", "img/143.png", "img/15.png", "img/152.jpg", "img/154.jpg", "img/157.jpg", "img/157_desk.jpg", "img/157_mobile.jpg", "img/162.jpg", "img/163-01.png", "img/163-02.png", "img/163-03.png", "img/163-04.png", "img/163-05.png", "img/166.png", "img/166_480.png", "img/16_03.jpg", "img/17.png", "img/170-mob.png", "img/170.png", "img/18_03.jpg", "img/19_03.jpg", "img/20_03.jpg", "img/20_03_s.jpg", "img/22_03.jpg", "img/23_03.jpg", "img/23_03_s.jpg", "img/25.jpg", "img/26_03.jpg", "img/28.jpg", "img/45.png", "img/46.png", "img/48.png", "img/52.png", "img/53.png", "img/56.png", "img/57.png", "img/60.png", "img/61-01-01.jpg", "img/61.jpg", "img/62.png", "img/63.png", "img/67.jpg", "img/68-desctop.jpg", "img/68-mobile.jpg", "img/71.jpg", "img/73.jpg", "img/75.jpg", "img/77.jpg", "img/80.gif", "img/84.jpg", "img/87.jpg", "img/87_desktop.jpg", "img/87_mobile.jpg", "img/92.jpg", "img/94.jpg", "img/96.png", "img/98.png", "img/99-mob.png", "img/99.png", "img/arrow.png", "img/bg-arrow.png", "img/bg-device.png", "img/custom-video-sprite.png", "img/icon-sound-1.png", "img/icon-sound-2.png", "img/icon-sound-3.png", "img/icon-sound-4.png", "img/icon-sound-m-1.png", "img/icon-sound-m-2.png", "img/icon-sound-m-3.png", "img/icon-sound-m-4.png", "img/icon-sound-m-orange.png", "img/icon-sound-m.png", "img/icon-sound-s-1.png", "img/icon-sound-s-2.png", "img/icon-sound-s-3.png", "img/icon-sound-s-4.png", "img/icon-sound-s-orange.png", "img/icon-sound-s.png", "img/icon-sound.png", "img/icon_info.png", "img/icon_info2.png", "img/modal_false.jpg", "img/modal_true.jpg", "img/nd.png", "img/png_icons.png", "img/task-bg.jpg", "img/taskNote.jpg", "img/tm.jpg", "img/interface_buttons/about.png", "img/interface_buttons/arrow.png", "img/interface_buttons/btn_continue.png", "img/interface_buttons/btn_nav-back.png", "img/interface_buttons/btn_nav-forward.png", "img/interface_buttons/cross.png", "img/interface_buttons/device.png", "img/interface_buttons/glossary.png", "img/interface_buttons/menu.png", "img/interface_buttons/stat.png", "img/interface_buttons/vopros.png", "img/tasks/marker-blue.png", "img/tasks/marker-green.png", "img/tasks/marker-orange.png", "img/tasks/marker-red.png", "img/tasks/marker-yellow.png", "video/posters/01-01-01.png", "video/posters/01.jpg", "video/posters/02-01-01.png", "video/posters/02.jpg", "video/posters/03-01-01.png", "video/posters/03.jpg", "video/posters/04-01-01.png", "video/posters/04.jpg", "video/posters/05-01-01.png", "video/posters/05.jpg", "video/posters/06-01-01.png", "video/posters/06.jpg", "video/posters/07-01-01.png", "video/posters/07.jpg", "video/posters/08-01-01.png", "video/posters/08.jpg", "video/posters/09-01-01.png", "video/posters/09.jpg", "video/posters/10-01-01.png", "video/posters/10.jpg", "video/posters/11-01-01.png", "video/posters/11.jpg", "video/posters/12-01-01.png", "video/posters/12.jpg", "video/posters/13-01-01.png", "video/posters/13.jpg", "video/posters/14-01-01.png", "video/posters/14.2-01-01.png", "video/posters/14.jpg", "video/posters/14green-01-01.png", "video/posters/14_2.jpg", "video/posters/14_green.jpg", "video/posters/15-01-01.png", "video/posters/15.jpg", "video/posters/16-01-01.png", "video/posters/16.jpg", "video/posters/17-01-01.png", "video/posters/17.jpg", "video/posters/18-01-01.png", "video/posters/18.jpg", "video/posters/19-01-01.png", "video/posters/19.jpg", "video/posters/20-01-01.png", "video/posters/20.1-01-01.png", "video/posters/20.jpg", "video/posters/20old-01-01.png", "video/posters/20_1.jpg", "video/posters/20_1_old.jpg", "video/posters/21-01-01.png", "video/posters/21.jpg", "video/posters/22-01-01.png", "video/posters/22.jpg", "video/posters/23-01-01.png", "video/posters/23.a-01-01.png", "video/posters/23.jpg", "video/posters/23A.jpg", "video/posters/24-01-01.png", "video/posters/24.jpg", "video/posters/25-01-01.png", "video/posters/25.jpg", "video/posters/26-01-01.png", "video/posters/26.jpg", "video/posters/27-01-01.png", "video/posters/27.jpg", "video/posters/28-01-01.png", "video/posters/28.jpg", "video/posters/29-01-01.png", "video/posters/29.jpg", "video/posters/30-01-01.png", "video/posters/30.jpg", "video/posters/30.png", "video/posters/31-01-01.png", "video/posters/31.jpg", "video/posters/32-01-01-s.png", "video/posters/32-01-01.png", "video/posters/32.jpg", "video/posters/33-01-01-s.png", "video/posters/33-01-01.png", "video/posters/33.jpg", "video/posters/34-01-01.png", "video/posters/34.jpg", "video/posters/35-01-01-m.png", "video/posters/35-01-01-s.png", "video/posters/35-01-01.png", "video/posters/35.jpg", "video/posters/36-01-01-m.png", "video/posters/36-01-01-s.png", "video/posters/36-01-01.png", "video/posters/36.jpg", "video/posters/37-01-01-m.png", "video/posters/37-01-01-s.png", "video/posters/37-01-01.png", "video/posters/37.jpg", "video/posters/38-01-01.png", "video/posters/38.jpg", "video/posters/39-01-01.png", "video/posters/39.1-01-01.png", "video/posters/39.1-s.png", "video/posters/39.11-s.png", "video/posters/39.2-01-01.png", "video/posters/39.3-s.png", "video/posters/39.5-s.png", "video/posters/39.7-s.png", "video/posters/39.9-s.png", "video/posters/39.jpg", "video/posters/39_1.jpg", "video/posters/39_10.jpg", "video/posters/39_11.jpg", "video/posters/39_12.jpg", "video/posters/39_2.jpg", "video/posters/39_3.jpg", "video/posters/39_4.jpg", "video/posters/39_5.jpg", "video/posters/39_6.jpg", "video/posters/39_7.jpg", "video/posters/39_8.jpg", "video/posters/39_9.jpg", "video/posters/40-01-01.png", "video/posters/40-01.jpg", "video/posters/40.jpg", "video/posters/41-01-01.png", "video/posters/41.jpg", "video/posters/42-01.png", "video/posters/42.jpg", "video/posters/43-01-01.png", "video/posters/43.jpg", "video/posters/44-01-01.png", "video/posters/44.jpg", "video/posters/green-01-01.png", "video/posters/red-01-01.png", "video/posters/yellow-01-01.png"];

;(function () {
  'use strict';

  config.$inject = ["$stateProvider", "$urlRouterProvider", "courseDataObj"];
  run.$inject = ["$state", "$rootScope", "$timeout", "staticService", "userService", "scormWrapper", "courseInfo", "courseDataObj"];
  angular.module('courseApp', ['ui.router', 'ngAnimate', 'ngSanitize', 'vjs.video']).constant('courseDataObj', courseStructure).constant('testDataObj', testStructure).constant('courseInfo', {
    bookmark: {
      page: 1,
      chapterPage: 1,
      chapter: 1
    },
    exercises: [],
    notes: [],
    testScore: 0
  }).directive('compile', ['$compile', function ($compile) {
    return function (scope, element, attrs) {
      scope.$watch(function (scope) {
        // watch the 'compile' expression for changes
        return scope.$eval(attrs.compile);
      }, function (value) {
        // when the 'compile' expression changes assign it into the current DOM
        element.html(value);
        // compile the new DOM and link it to the current scope.
        // NOTE: we only compile .childNodes so that we don't get into infinite loop compiling ourselves
        $compile(element.contents())(scope);
      });
    };
  }]).config(config).run(run

  /* @ngInject */
  );function config($stateProvider, $urlRouterProvider, courseDataObj) {

    $stateProvider.state('page', {
      url: '/chapter/:chapter/page/:page',
      views: {
        'header': {
          templateUrl: 'js/components/header/headerTmpl.html',
          controller: 'HeaderCtrl',
          controllerAs: '$ctrl'
        },
        'content': {
          templateUrl: function templateUrl($stateParams) {

            // переход по кастомным папкам типа «page04a»
            var chapterLocation = courseDataObj.chapters[$stateParams.chapter - 1].chapter_location,
                pageLocation = courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].location;
            // console.log('::main:: confog:', chapterLocation, pageLocation)
            return "pages/" + chapterLocation + "/" + pageLocation + "/index.html";
          },
          controller: 'PageCtrl',
          controllerAs: '$ctrl'
        },
        'footer': {
          templateUrl: 'js/components/footer/footerTmpl.html',
          controller: 'FooterCtrl',
          controllerAs: '$ctrl'
        }
      }
    }
    // .state('test', {})

    // $urlRouterProvider.otherwise('/chapter/1/page/1')
    );
  }

  /* @ngInject */
  function run($state, $rootScope, $timeout, staticService, userService, scormWrapper, courseInfo, courseDataObj) {

    var _preload = function preload() {
      if (_preload != null) {
        // preload.close();
      }
      _preload = new createjs.LoadQueue(false);
      _preload.on('fileload', onFileload, this);
      _preload.on('progress', onProgress, this);
      _preload.on('complete', onComplete, this);
      _preload.on('error', onError, this);
      _preload.loadManifest(manifest);
    };

    var onFileload = function onFileload() {
      // 
    };
    var onProgress = function onProgress() {
      // 
    };
    var onComplete = function onComplete() {
      // alert('img laded!')
      // console.log('all img loaded!')
      $state.go('page', { chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage });
    };
    var onError = function onError(e) {
      console.error('can`t load image!', e.data.src);
    };

    _preload();

    scormWrapper.setAPIVersion("2004");
    scormWrapper.doLMSInitialize();

    if (scormWrapper.LMSIsInitialized()) {
      console.info('<:: Load from LMS ::>');

      var completionStatus = scormWrapper.doLMSGetValue('cmi.completion_status');
      console.info('Course completion status » ' + completionStatus);

      if (completionStatus === 'not attempted') {
        scormWrapper.doLMSSetValue('cmi.suspend_data', '');
      }

      // alert('suspend_data >> '+suspend_data)
      var suspend_data = scormWrapper.doLMSGetValue('cmi.suspend_data').replace(/\*\#/g, '[').replace(/\#\*/g, ']');

      var score = scormWrapper.doLMSGetValue('cmi.core.score.raw');
      console.log('%c LMS score -> ', 'color:#C0FFEE;', score);

      courseInfo.testScore = score;
      console.log('%c courseInfo testScore -> ', 'color:#BADA55;', courseInfo.testScore);

      if (suspend_data.length > 0) {
        try {
          courseInfo = JSON.parse(suspend_data);
          window.bookmark = courseInfo.bookmark;
          window.bookmark.loaded = false;
          window.exercises = courseInfo.exercises;
          window.exercises.loaded = false;
          userService.loadExs(courseInfo.exercises);
          userService.loadNotes();
        } catch (e) {
          console.error('Что-то пошло не так... \n', e);
        }
      }

      console.info('main:: courseInfo', courseInfo);
    }

    console.warn(localStorage

    // alert('start change bookmark')
    // $state.go('page', ({chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage}));

    );$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState) {

      // stop audio
      staticService.stopAudio(true);
      // replace current position of audio slider to zero
      staticService.setAudioTime(0);

      staticService.setBookmark(Number(toParams.page), Number(toParams.chapter));

      userService.sendToLMS();
    });

    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
      $timeout(function () {
        // stop audio
        staticService.stopAudio(false);
      }, 100);
    });
  }
})();
/********************************************************************************
**
** Prometheus Research SCORM API Wrapper
** 
** Supports:
**
** SCORM 1.2, SCORM 2004.[1]
**
** The following is a porting of the code from the
** original APIWrapper.js file to Angular JS with a 
** number of improvements from
** Concurrent Technologies Corporation (CTC) released
** under the MIT style license available
** on the ADL scorm website [2]
** 
** The code has been updated to wrap the original functions in
** in angularjs and extend support for SCORM 2004 [4].
** It draws upon some of concepts offered in the Pipewerks[3]
** 
** The code is served as an AngularJS service [5].
** 
** References/Inspiration:
** 
** [1] ADL
** http://www.adlnet.gov/scorm
** 
** [2] CTC SCORM SCORM 1.2 API wrapper
** http://www.adlnet.gov/resources/scorm-1-2-content-packages?type=software_downloads
** 
** [3] Pipewerks SCORM wrapper
** https://github.com/pipwerks/scorm-api-wrapper
** 
** [4] SCORM.com
** http://scorm.com/scorm-explained/technical-scorm/run-time/
** 
** [5] Angularjs services
** http://docs.angularjs.org/guide/dev_guide.services
**
** Copyright (c) Prometheus Research 2014
** Copyright (c) Philip Hutchison
** Copyright (c) Concurrent Technologies Corporation (CTC)
** ---------------------------------------------------------------------------------
** License:
** 
** 
** Permission is hereby granted, free of charge, to any person obtaining a 
** copy of this software and associated documentation files (the “Software”), 
** to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the Software is furnished to
** do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in 
** all copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
** 
*********************************************************************************/
;(function () {
  "use strict";

  angular.module('courseApp').service('scormWrapper', scormWrapper);

  /* @ngInject */
  function scormWrapper() {

    var version = "2004";
    var API = false;
    var scormVersions = ["Auto", "1.2", "2004"];

    this.setAPIVersion = function (scormVersion) {

      scormVersion = scormVersion || "Auto";
      console.log('set SCORM ver:', scormVersion);

      var v = scormVersions.indexOf(scormVersion.toString());
      v > -1 ? version = scormVersions[v] : console.log("Not found, default to Auto");
      return version;
    };

    this.getAPIVersion = function () {
      return version;
    };

    this.isAvailable = function () {
      return true;
    };

    this.doLMSInitialize = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSInitialize", "Initialize")(""));
    };

    this.doLMSFinish = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSFinish", "Terminate")(""));
    };

    this.doLMSGetValue = function (parameter) {
      return this.getAPICall("LMSGetValue", "GetValue")(parameter);
    };

    this.doLMSSetValue = function (parameter, value) {
      return this.cmiBooleanToJs(this.getAPICall("LMSSetValue", "SetValue")(parameter, value));
    };

    this.doLMSCommit = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSCommit", "Commit")(""));
    };

    this.doLMSGetLastError = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.doLMSGetErrorString = function (errorCode) {
      return this.getAPICall("LMSGetErrorString", "GetErrorString")(errorCode.toString());
    };

    this.doLMSGetDiagnostic = function (errorCode) {
      return this.getAPICall("LMSGetDiagnostic", "GetDiagnostic")(errorCode.toString());
    };

    this.LMSIsInitialized = function () {
      return API;
    };

    this.ErrorHandler = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.cmiBooleanToJs = function (value) {
      return value === "1" || value === 1 || value === "true" || value === true;
    };

    this.getAPIHandle = function () {

      var win = window;

      if (win.parent && win.parent != win) {
        this.findAPI(win.parent);
      }

      if (!API && win.top.opener) {
        this.findAPI(win.top.opener);
      } else if (!API) {
        console.log("Unable to find API adapter");
      }
    };

    this.findAPI = function (win) {

      var findAttempts = 0,
          findAttemptLimit = 500;

      for (findAttempts; findAttempts < findAttemptLimit; findAttempts++) {

        if (win.API && (version === "1.2" || version === "Auto")) {
          API = win.API;
          version = "1.2";
          break;
        } else if (win.API_1484_11 && (version === "2004" || version === "Auto")) {
          API = win.API_1484_11;
          version = "2004";
          break;
        } else if (win.parent && win.parent != win) {
          findAttempts++;
          win = win.parent;
        }
      }
    };

    this.getAPICall = function (funcname12, funcname2004) {

      if (!API) {
        this.getAPIHandle();
        if (!API) {
          return function () {
            console.log("No API found, can't execute: " + funcname12 + " or " + funcname2004);
          };
        }
      }

      switch (version) {
        case "2004":
          return function () {
            return API[funcname2004].apply(API, arguments);
          };

        case "1.2":
          return function () {
            return API[funcname12].apply(API, arguments);
          };
      }
    };
  };
})();
;(function () {
  'use strict';

  staticService.$inject = ["courseDataObj", "courseInfo", "$document"];
  angular.module('courseApp').service('staticService', staticService

  /* @ngInject */
  );function staticService(courseDataObj, courseInfo, $document) {
    var _this = this,
        _arguments = arguments;

    var modals = {
      'menu': { state: false },
      'stats': { state: false },
      'about': { state: false },
      'notes': { state: false },
      'help': { state: false },
      'exercise': { state: false },
      'video': { state: false },
      'cloak': { state: false },
      'addInfo': { state: false }
    };

    this.tabNum = 1;

    //
    this.getModalState = function (index) {
      // console.log('staticService:: getModalState: index', index)
      return modals[index].state;
    };

    this.showModal = function (index, headText, bodyText, answer, specific) {
      // console.log('staticService:: showModal:', index, modals[index])
      if (modals[index].state) {
        modals[index].state = false;
      } else {
        _this.closeModals();

        if (index == 'exercise') {
          document.getElementsByClassName('modal_head')[0].innerHTML = headText;
          document.getElementsByClassName('modal_body')[0].innerHTML = bodyText;
          if (specific != "final") document.getElementById('pie-chart').style.display = 'none';
          modals['exercise'].content = bodyText;
          modals['exercise'].answer = answer;
          modals['exercise'].heading = headText;
        }
        modals[index].state = true;
        modals['cloak'].state = true;
      }
    };

    this.closeModals = function (index) {
      var video = document.querySelector('video');
      if (video) {
        video.pause();
      }
      _this.tabNum = 1;
      for (var key in modals) {
        if (key == 'video' && modals[key].state == true) {
          var oldPlayer = document.querySelector('.my-home-video');
          // console.warn('closeModals:: oldPlayer:', oldPlayer)
          // videojs(oldPlayer).dispose();
        }
        modals[key].state = false;
      }
    };

    //
    this.getCourseName = function () {
      return {
        course: courseDataObj.course,
        description: courseDataObj.description
      };
    };

    // call getChapterObj() from 'HeaderCtrl' controller
    this.getChapterObj = function (index) {
      return courseDataObj.chapters[index];
    };

    this.getChaptersTotal = function () {
      return courseDataObj.chapters;
    };

    this.getPageTotal = function () {
      var totalPages = 0;
      for (var i = 0; i < courseDataObj.chapters.length; i++) {
        totalPages += courseDataObj.chapters[i].pages.length;
      }
      return totalPages;
    };
    this.getBookmark = function () {
      return courseInfo.bookmark;
    };

    this.setBookmark = function (chapterPage, chapter) {
      console.warn('staticService:: try to setBookmark:', chapterPage, chapter);
      courseInfo.bookmark.chapterPage = chapterPage;
      courseInfo.bookmark.chapter = chapter;

      if (chapter == 1) {
        courseInfo.bookmark.page = chapterPage;
      } else {
        var tmpPages = 0;
        for (var i = 0; i < chapter - 1; i++) {
          tmpPages += courseDataObj.chapters[i].pages.length;
        }
        courseInfo.bookmark.page = tmpPages + chapterPage;
      }
      console.log('staticService:: setBookmark ChP: %d, Ch: %d, Page: %d', chapterPage, chapter, courseInfo.bookmark.page);
    };

    // get exercise data array
    this.getData = function ($stateParams, prop) {
      // console.log('staticService:: courseDataObj:', courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1])
      if (prop == 'data') {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data;
      } else {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data[prop];
      }
    };

    // get chapter's title
    this.getTitle = function ($stateParams) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].title;
    };

    // get message array
    this.getMessage = function ($stateParams, num) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].messages[num];
    };

    //for task-marker-note
    this.setMarkerNote = function ($stateParams, index, marker) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data.questionList[index].marker = marker;
    };

    /**
    *  audio section
    */
    var audioTime = 0,
        stopAudio = false;

    this.setAudioTime = function (time) {
      audioTime = time;
    };

    this.getAudioTime = function () {
      return audioTime;
    };

    this.stopAudio = function (bool) {
      stopAudio = bool;
    };

    this.getStopAudio = function () {
      return stopAudio;
    };

    var waitAudio = false;
    this.startAudio = function (toggler) {
      if (_arguments.length === 0) {
        return waitAudio;
      };
      waitAudio = toggler;
    };

    /***************************************************************
    /  For addInfo modal
    /**************************************************************/

    this.addInfo = function (content, state, heading) {
      modals['addInfo'].content = content;
      modals['addInfo'].state = state;
      modals['addInfo'].heading = heading;
      modals['cloak'].state = true;
    };

    this.getAddInfo = function () {
      return modals['addInfo'];
    };

    this.getExercise = function () {
      return modals['exercise'];
    };

    // Close modals by several types
    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(modals['exercise']);
      }
    });
  }
})();

;(function () {
  'use strict';

  userService.$inject = ["courseDataObj", "testDataObj", "$document", "scormWrapper", "courseInfo"];
  angular.module('courseApp').service('userService', userService);

  function userService(courseDataObj, testDataObj, $document, scormWrapper, courseInfo) {
    var _this2 = this;

    var userDataObj = courseDataObj.chapters.map(function (elem) {
      return {
        id: elem.id,
        visited: 1,
        completed: false,
        pages: elem.pages.map(function (item, index) {
          return {
            id: item.id,
            type: item.type,
            title: item.title,
            visited: index === 0 ? true : false,
            completed: ''
          };
        })
      };
    });
    var myStorage = localStorage;
    var myStor;
    this.exs = [];
    this.notes = [];
    this.notes1 = [];
    this.complex_ex1 = [];
    if (!this.start_date) {
      this.start_date = new Date();
    }
    //console.info('complex_ex1[0] =', this.complex_ex1[0]);
    //console.info('complex_ex1[1] =', this.complex_ex1[1]);
    courseDataObj.chapters.forEach(function (elem, index) {
      elem.pages.map(function (page, i) {

        if (page.type == 'exercise') {
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
        }

        if (page.type == 'note_page') {
          // console.info('note_page', page)

          var fields = [];
          for (var _i = 0; _i < page.data.task_fields; _i++) {
            fields.push({
              id: _i,
              text: ""
            });
          }

          _this2.notes.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: fields
          });
        }

        if (page.type == 'note_exercise') {
          // console.info('note_page', page)
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
          var _fields = [];
          for (var ik = 0; ik < page.data.task_fields; ik++) {
            _fields.push({
              id: ik,
              text: ""
            });
          }

          _this2.notes1.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: _fields
          });
        }
      });
    }
    // console.warn('userService:: setUp exs Arr', JSON.stringify(this.exs));
    // console.warn('userService:: setUp notes Arr', JSON.stringify(this.notes));
    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
    // this.testData = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));

    );this.ConvertMilliSecondsIntoSCORM2004Time = function (intTotalMilliseconds) {

      var ScormTime = "";

      var HundredthsOfASecond; //decrementing counter - work at the hundreths of a second level because that is all the precision that is required

      var Seconds; // 100 hundreths of a seconds
      var Minutes; // 60 seconds
      var Hours; // 60 minutes
      var Days; // 24 hours
      var Months; // assumed to be an "average" month (figures a leap year every 4 years) = ((365*4) + 1) / 48 days - 30.4375 days per month
      var Years; // assumed to be 12 "average" months

      var HUNDREDTHS_PER_SECOND = 100;
      var HUNDREDTHS_PER_MINUTE = HUNDREDTHS_PER_SECOND * 60;
      var HUNDREDTHS_PER_HOUR = HUNDREDTHS_PER_MINUTE * 60;
      var HUNDREDTHS_PER_DAY = HUNDREDTHS_PER_HOUR * 24;
      var HUNDREDTHS_PER_MONTH = HUNDREDTHS_PER_DAY * ((365 * 4 + 1) / 48);
      var HUNDREDTHS_PER_YEAR = HUNDREDTHS_PER_MONTH * 12;

      HundredthsOfASecond = Math.floor(intTotalMilliseconds / 10);

      Years = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_YEAR);
      HundredthsOfASecond -= Years * HUNDREDTHS_PER_YEAR;

      Months = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MONTH);
      HundredthsOfASecond -= Months * HUNDREDTHS_PER_MONTH;

      Days = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_DAY);
      HundredthsOfASecond -= Days * HUNDREDTHS_PER_DAY;

      Hours = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_HOUR);
      HundredthsOfASecond -= Hours * HUNDREDTHS_PER_HOUR;

      Minutes = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MINUTE);
      HundredthsOfASecond -= Minutes * HUNDREDTHS_PER_MINUTE;

      Seconds = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_SECOND);
      HundredthsOfASecond -= Seconds * HUNDREDTHS_PER_SECOND;

      if (Years > 0) {
        ScormTime += Years + "Y";
      }
      if (Months > 0) {
        ScormTime += Months + "M";
      }
      if (Days > 0) {
        ScormTime += Days + "D";
      }

      //check to see if we have any time before adding the "T"
      if (HundredthsOfASecond + Seconds + Minutes + Hours > 0) {

        ScormTime += "T";

        if (Hours > 0) {
          ScormTime += Hours + "H";
        }

        if (Minutes > 0) {
          ScormTime += Minutes + "M";
        }

        if (HundredthsOfASecond + Seconds > 0) {
          ScormTime += Seconds;

          if (HundredthsOfASecond > 0) {
            ScormTime += "." + HundredthsOfASecond;
          }

          ScormTime += "S";
        }
      }

      if (ScormTime == "") {
        ScormTime = "0S";
      }

      ScormTime = "P" + ScormTime;
      return ScormTime;
    };

    this.loadExs = function (data) {
      // alert('load exs!')
      //console.log('load exs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:',data);
      if (data.length != 0) {
        // alert('exs not empty')
        _this2.exs = data;
      }
      courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
    };

    this.loadNotes = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      myStor = myStorage.getItem('myNote');
      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
      console.log('courseInfo.notes -1-1-1-1-1-1-1-1-1-1', courseInfo.notes);
    };

    this.loadNotes1 = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      courseInfo.notes1 = JSON.parse(JSON.stringify(_this2.notes));
      console.log('courseInfo.notes -2-2-2-2-2-2-2-2-2-2-22-', courseInfo.notes);
    };

    this.currentTestQuestion = {};

    this.setCurrentTestQuestion = function (question, answers) {
      _this2.currentTestQuestion.question = question;
      _this2.currentTestQuestion.answers = answers;
    };

    // console.log('userService:: exs',this.exs)
    this.getExs = function () {
      // console.log('userService:: getExs, exs', this.exs)
      return _this2.exs;
    };

    this.getPageType = function (chapter, page) {
      if (courseDataObj.chapters[chapter].pages[page].type == 'test') {
        return true;
      }
      return false;
    };

    this.getPageVisit = function () {
      //
    };
    this.setPageVisit = function (module, page) {
      //
    };
    this.getExProgress = function (module, page) {
      return userDataObj[module].pages[page].completed;
    };

    this.setUserProgress = function (score, status, chapter, page) {
      // console.log('userService:: setUserProgress this.exs', this.exs)
      // console.log('userService:: setUserProgress income params', score, status, chapter, page)
      _this2.exs.forEach(function (item) {
        //console.log('=>',item, chapter, page)
        if (item.chapter_id == chapter && item.page_id == page) {
          item.score = score;
          item.status = status;
          userDataObj[item.chapter_id].pages[item.page_id].completed = item.status ? true : '';
          console.log('userService:: setUserProgress----------------------------------------------:', item.score, item.status, chapter, page);
        }
      }
      // console.log('userService:: setUserProgress > this.exs',this.exs)

      );courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
      // courseInfo.excercises = this.exs;

      _this2.sendToLMS();
    };

    this.getUserNotes = function () {
      console.log('this.getUserNotes ----this.notes------------------------------------------:', _this2.notes);
      return _this2.notes;
    };

    this.getUserNotes1 = function () {
      return _this2.notes1;
    };

    this.setUserNotes = function (notes, chapter, page) {

      console.log('userService:: setNotes-------------------------------------------------------:', notes, chapter, page);

      _this2.notes.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          item = notes;
        }
      });
      console.log('this.notes-+-+-+-+-+-+-+-+:', _this2.notes);

      function supports_html5_storage() {
        try {
          console.log('supports_html5_storage------:');
          return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
          console.log('NO_supports_html5_storage------:');
          return false;
        }
      }

      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
      console.warn('courseInfo.notes', courseInfo.notes);

      // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
      _this2.sendToLMS();
    };

    this.sendToLMS = function () {
      console.warn('sendToLMS');
      var session_time;
      //var myStorage = localStorage;
      //var myStor;
      var end_date = new Date();

      session_time = end_date - _this2.start_date; // in milliseconds
      session_time = _this2.ConvertMilliSecondsIntoSCORM2004Time(session_time);

      var note_data = JSON.stringify(courseInfo.notes, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }
        return value;
      });
      _this2.dataCourse = courseInfo;
      _this2.dataCourse.exercises.forEach(function (elem) {
        delete elem.title;
      });
      _this2.dataCourse.notes.forEach(function (elem) {
        delete elem.title;
      });
      console.info('sendToLMS myStor : ', myStor);
      myStorage.setItem('myNote', _this2.note_data);

      myStor = myStorage.getItem('myNote');

      var suspendData = JSON.stringify(_this2.dataCourse, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }
        return value;
      }).replace(/\[/g, '*#').replace(/\]/g, '#*');

      console.info('sendToLMS myStor : ', myStor);
      // console.info('sendToLMS suspendData: ', suspendData);

      console.info('sendToLMS suspendData.length: ', suspendData.length);
      console.warn('Put => session_time: ' + session_time);
      scormWrapper.doLMSSetValue('cmi.suspend_data', suspendData);
      scormWrapper.doLMSSetValue('cmi.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.score.raw', courseInfo.testScore);

      if (courseInfo.testScore >= 60) {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'completed');
      } else {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'incomplete');
      }

      scormWrapper.doLMSCommit();
    };

    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(courseDataObj);
        console.warn(courseInfo);
        console.warn(_this2.exs);
        console.warn(window.window);
      }
    });

    //     function close_window() {
    //     window.open('','_parent','').close();
    // }

    window.onbeforeunload = function (e) {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');

      var e = e || window.event;

      //IE & Firefox
      if (e) {}

      // For Safari
      scormWrapper.doLMSFinish();
    };

    this.closeCourse = function () {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');
      _this2.sendToLMS();
      scormWrapper.doLMSFinish();
      var a = confirm('Вы уверены, что хотите закончить прохождение курса?');
      if (a) {
        //close_window();
        document.getElementsByClassName('course-wrapper')[0].innerHTML = '<p class="close-msg">Работа с модулем курса завершена.</p>';
      }
    };
  }
})();

;(function () {
  'use strict';

  CourseCtrl.$inject = ["$http", "$sce", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('CourseCtrl', CourseCtrl);

  /* @ngInject */
  function CourseCtrl($http, $sce, $stateParams, staticService, userService) {
    var self = this;

    //if (device.mobile() && device.portrait()) {
    //  self.turnMobile = true;
    //} else {
    //  self.turnMobile = false;
    //}
  }
})();
;(function () {
  'use strict';

  PageCtrl.$inject = ["$document", "staticService", "$scope", "courseInfo"];
  angular.module('courseApp').controller('PageCtrl', PageCtrl);

  /* @ngInject */
  function PageCtrl($document, staticService, $scope, courseInfo) {

    this.tabNum = 1;

    $scope.getModalState = function (index) {
      return staticService.getModalState(index);
    };
    $scope.closeModals = function () {
      return staticService.closeModals();
    };

    // uses for sync of audio and content changes (some kind of animation)
    this.time = function () {
      return staticService.getAudioTime();
    };
  }
})();
;(function () {
  'use strict';

  AccordionCtrl.$inject = ["$scope", "$element", "$attrs"];
  AccordionPanelCtrl.$inject = ["$scope", "$timeout", "$element", "$attrs"];
  AccordionContentCtrl.$inject = ["$document", "$scope", "$element", "$attrs"];
  angular.module('courseApp').component('accordion', {
    transclude: true,
    template: '<div class="accordion" ng-transclude></div>',
    controller: 'AccordionCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionCtrl', AccordionCtrl).component('accordionPanel', {
    require: {
      'parent': '^accordion'
    },
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: 'js/components/accordion/accordionPanelTmpl.html',
    controller: 'AccordionPanelCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionPanelCtrl', AccordionPanelCtrl).controller('AccordionContentCtrl', AccordionContentCtrl);

  /* @ngInject */
  function AccordionCtrl($scope, $element, $attrs) {
    var self = this;

    var panels = [];
    // here we take the panel and add to our list of panels
    // to preselect the first panel we call turnOn function on the first panel
    self.addPanel = function (panel) {
      console.warn("arguments.length: ", arguments.length);
      if (arguments.length === 0) {
        console.warn("panels(if (arguments.length === 0)): ", panels);
        return {
          index: panels.length - 1,
          firstOpen: $attrs.firstOpen
        };
      };
      panels.push(panel);
      console.warn("panels(panels.push(panel);): ", arguments.length);
      if ($attrs.firstOpen === 'true' && panel === panels[0]) {
        return false;
      }
      return true;
    };
    // when a panel is selected we would want to open the content
    // here we take the panel find it in our array and turn if on if not selected
    // and off it.
    self.selectPanel = function (panel, isCollapsed) {
      for (var i in panels) {
        if (panel === panels[i]) {
          if (isCollapsed) {
            panels[i].turnOn();
          } else {
            panels[i].turnOff();
          }
        } else {
          panels[i].turnOff();
        }
      }
    };
  }

  /* @ngInject */
  function AccordionPanelCtrl($scope, $timeout, $element, $attrs) {

    var self = this;
    $scope.isCollapsed = true; // panel is closed on default

    // self.hintShow needs to show/hide hint on panels of accordion
    self.hintShow = $($element).index() === 0 || $($element).index() === 1 ? false : 'visited';
    $timeout(function () {
      self.hintShow = self.hintShow === false ? true : self.hintShow;
    }, 10000);

    // register the panel in init
    self.$onInit = function () {
      var accordionState = {};

      $scope.isCollapsed = self.parent.addPanel(self);
      accordionState = self.parent.addPanel();
      if (accordionState.firstOpen === 'true' && accordionState.index === 1) {
        self.hintShow = false;
      } else if (accordionState.firstOpen === 'false' && accordionState.index === 0) {
        self.hintShow = false;
      } else {
        self.hintShow = 'visited';
      }
    };

    // Turns on the panel
    self.turnOn = function () {
      $scope.isCollapsed = false;
    };

    // Turns off the panel
    self.turnOff = function () {
      $scope.isCollapsed = true;
    };

    $scope.toggle = function () {
      self.hintShow = 'visited';
      self.parent.selectPanel(self, $scope.isCollapsed);
    };
  }

  // /* @ngInject */
  function AccordionContentCtrl($document, $scope, $element, $attrs) {
    var element = $element[0];
    var start = 0;

    $scope.$watch($attrs.collapse, function (collapse) {

      var newHeight = collapse ? 0 : 1;
      if (newHeight === 1) {
        if (start === 0) {

          start = 1;
          (function (elem) {
            setTimeout(function () {
              return element.style.height = getElementAutoHeight() + 'px';
            }, 460);
          })(element);
        } else {
          return element.style.height = getElementAutoHeight() + 'px';
        }
      }
      return element.style.height = newHeight + 'px';
    });

    function getElementAutoHeight() {
      var currentHeight = getElementCurrentHeight();

      element.style.height = 'auto';
      var autoHeight = getElementCurrentHeight();

      element.style.height = currentHeight;
      // Force the browser to recalc height after moving it back to normal
      getElementCurrentHeight();

      return autoHeight;
    }

    function getElementCurrentHeight() {
      return element.offsetHeight;
    }
  }
})();

(function () {
  'use strict';

  AddInfoCtrl.$inject = ["$element", "$attrs", "staticService"];
  angular.module('courseApp').component('addInfo', {
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: './js/components/add-info/addInfoTmpl.html',
    controller: 'AddInfoCtrl',
    controllerAs: '$ctrl'
  }).controller('AddInfoCtrl', AddInfoCtrl);

  /* @ngInject */
  function AddInfoCtrl($element, $attrs, staticService) {
    var self = this;

    self.getAddInfo = function () {
      staticService.addInfo($element.find('ng-transclude').prop('innerHTML'), true, $attrs.heading);
    };
  }
})();
;(function () {
  'use strict';

  CustomAudioCtrl.$inject = ["$document", "$interval", "staticService"];
  angular.module('courseApp').component('customAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hassound: '@'
    },
    templateUrl: 'js/components/custom-audio/customAudioTmpl.html',
    controller: 'CustomAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomAudioCtrl', CustomAudioCtrl);

  /* @ngInject */
  function CustomAudioCtrl($document, $interval, staticService) {
    var _this3 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hassound)
      if (_this3.hassound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init'
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      );_this3.audio = $document[0].createElement('audio');
      _this3.audio.src = "pages/" + _this3.chapter + "/" + _this3.page + "/audio/page-" + _this3.chapter + "-" + _this3.page + ".mp3";

      _this3.audio.oncanplaythrough = function () {

        _this3.changePlayPause = function () {

          if (_this3.audio.paused) {
            _this3.audio.play();
            _this3.play = '#pause';
          } else {
            _this3.audio.pause();
            _this3.play = '#play';
          }
        };

        _this3.updateSeekSlider = function () {
          var seekNewPos = _this3.audio.currentTime * (100 / _this3.audio.duration),
              // position in seek slider
          curmins = Math.floor(_this3.audio.currentTime / 60),
              // current minutes value
          cursecs = Math.floor(_this3.audio.currentTime - curmins * 60),
              // current seconds value
          durmins = Math.floor(_this3.audio.duration / 60),
              // audio duration in minutes
          dursecs = Math.floor(_this3.audio.duration - durmins * 60); // audio duration in rest seconds

          _this3.seekPos = Math.floor(seekNewPos);

          if (curmins < 10) {
            curmins = '0' + curmins;
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs;
          };
          if (durmins < 10) {
            durmins = '0' + durmins;
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs;
          };

          _this3.curTime = curmins + ':' + cursecs; // display current time in the audio player
          _this3.durTime = durmins + ':' + dursecs; //  display audio duration time in the audio player
          if (_this3.audio.currentTime === _this3.audio.duration) {
            _this3.play = '#play';
          }
        };

        _this3.changeSeekPos = function () {
          _this3.audio.currentTime = _this3.audio.duration * (_this3.seekPos / 100);
        };

        $interval(function () {

          if (!_this3.audio) return;
          _this3.updateSeekSlider();

          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this3.audio.currentTime);

          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this3.audio.pause();
            _this3.audio = null;
            return;
          }
        }, 100);

        _this3.changeMuteState = function () {
          _this3.mute = '#unmute';

          if (_this3.audio.muted) {
            _this3.audio.muted = false;
            _this3.mute = '#unmute';
          } else {
            _this3.audio.muted = true;
            _this3.mute = '#mute';
          }
        };

        _this3.changeVolume = function () {
          _this3.audio.volume = _this3.volume;
        };

        _this3.restart = function () {
          _this3.audio.currentTime = 0;
          _this3.audio.play();
          _this3.play = '#pause';
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  CustomMiniAudioCtrl.$inject = ["$attrs", "$document", "$interval", "staticService"];
  angular.module('courseApp').component('customMiniAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hasSound: '@',
      src: '@'
    },
    templateUrl: 'js/components/custom-mini-audio/customMiniAudioTmpl.html',
    controller: 'CustomMiniAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomMiniAudioCtrl', CustomMiniAudioCtrl);

  /* @ngInject */
  function CustomMiniAudioCtrl($attrs, $document, $interval, staticService) {
    var _this4 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hasSound)
      if (_this4.hasSound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init'
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      );_this4.audio = $document[0].createElement('audio');
      _this4.audio.src = _this4.src;
      console.log("SRC ", _this4.audio.src);
      _this4.audio.autoplay = false;

      _this4.audio.oncanplaythrough = function () {

        _this4.changePlayPause = function () {

          if (_this4.audio.paused) {
            _this4.audio.play();
            _this4.play = '#pause';
          } else {
            _this4.audio.pause();
            _this4.play = '#play';
          }
        };

        $interval(function () {
          if (!_this4.audio) return;
          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this4.audio.currentTime);
          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this4.audio.pause();
            _this4.audio = null;
            return;
          }
        }, 100);
      };
    };
  }
})();
(function () {
  'use strict';

  CustomVideoCtrl.$inject = ["$document", "$timeout", "staticService"];
  angular.module('courseApp').component('customVideo', {
    bindings: {
      src: '@'
    },
    templateUrl: 'js/components/custom-video/customVideoTmpl.html',
    controller: 'CustomVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomVideoCtrl', CustomVideoCtrl);

  /* @ngInject */
  function CustomVideoCtrl($document, $timeout, staticService) {
    var self = this;

    self.play = 'play'; // variable for play/pause btn that toggle icons
    self.mute = 'unmute'; // variable for mute/unmute btn that toggle icons
    self.volume = 1; // define volume in volume slider
    self.seekPos = 0;

    self.$onInit = function () {
      var video = $($document).find('.custom-video__video')[0];

      video.oncanplaythrough = function () {
        console.log('here');
        $(video).on('timeupdate', updateSeekSlider);

        updateSeekSlider();

        self.changePlayPause = function () {
          if (video.paused) {
            video.play();
            self.play = 'pause';
          } else {
            video.pause();
            self.play = 'play';
          }
        };

        self.changeSeekPos = function () {
          video.currentTime = video.duration * (self.seekPos / 100);
        };

        function updateSeekSlider() {
          var seekNewPos = video.currentTime * (100 / video.duration),
              curhours = Math.floor(video.currentTime / 3600),
              curmins = Math.floor(video.currentTime / 60),
              cursecs = Math.floor(video.currentTime - curmins * 60),
              durhours = Math.floor(video.duration / 3600),
              durmins = Math.floor(video.duration / 60),
              dursecs = Math.floor(video.duration - durmins * 60);

          self.seekPos = Math.floor(seekNewPos);
          if (video.currentTime === video.duration) {
            self.play = 'play';
          }

          if (curmins < 10) {
            curmins = '0' + curmins || '00';
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs || '00';
          };
          if (durmins < 10) {
            durmins = '0' + durmins || '00';
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs || '00';
          };
          $timeout(function () {

            self.curtimetext = curmins + ':' + cursecs;
            self.durtimetext = durmins + ':' + dursecs;
          });
        }

        self.changeMuteState = function () {

          if (video.muted) {
            video.muted = false;
            self.mute = 'unmute';
          } else {
            video.muted = true;
            self.mute = 'mute';
          }
        };

        self.changeVolume = function () {
          video.volume = self.volume;
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  TestCtrl.$inject = ["$scope", "$state", "$compile", "$stateParams", "testDataObj", "staticService", "userService", "courseInfo"];
  angular.module('courseApp').component('finalTest', {
    templateUrl: 'js/components/final-test/finalTestTmpl.html',
    controller: 'TestCtrl',
    controllerAs: '$ctrl'
  }).controller('TestCtrl', TestCtrl);

  /* @ngInject */
  function TestCtrl($scope, $state, $compile, $stateParams, testDataObj, staticService, userService, courseInfo) {
    var _this5 = this;

    /**
    *   tasks:
    *     single, multi, sortab
    */

    // составляем список вопросов и мешаем его
    // this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));
    //console.log("heeeeeeeeeeeeeeeeeeeeeeeeeere: ",$stateParams.chapter - 1,$stateParams.page);

    //костыль для testStructure
    var chapter = -1;
    if ($stateParams.chapter == 1) chapter = 0;else if ($stateParams.chapter == 8) chapter = 1;

    this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
    // console.log('questions!!!!!!!!!!!!!! ', this.questionList);

    //номер вопроса
    this.currentQuest = 0;

    // состояния теста:
    this.state = 0;
    $scope.$on('myTestState', function (e, data) {
      _this5.state = data;
    });

    this.testScore = 0;

    this.testRight = 0;

    this.testTask = document.getElementsByClassName('test-task')[0];

    this.buildQuestion = function () {

      _this5.questionList[_this5.currentQuest].answers = _.shuffle(_this5.questionList[_this5.currentQuest].answers);
      userService.setCurrentTestQuestion(_this5.questionList[_this5.currentQuest].question, _this5.questionList[_this5.currentQuest].answers);

      // console.warn('TestCtrl:: buildQuestion:',this.questionList[this.currentQuest])
      var tmpstr = '';
      switch (_this5.questionList[_this5.currentQuest].type) {
        case 'single':
          tmpstr = '<task-single-choice test="true"></task-single-choice>';
          break;
        case 'multi':
          tmpstr = '<task-multi-choice test="true"></task-multi-choice>';
          break;
      }

      _this5.testTask.appendChild($compile(tmpstr)($scope)[0]);
      //console.warn($compile(tmpstr)($scope))
    };

    this.nextQuestion = function (e) {
      if (e.target.classList.contains('btn_disabled')) {
        return;
      }

      _this5.checkAnswer();

      _this5.currentQuest++;
      if (_this5.currentQuest < _this5.questionList.length) {
        _this5.state = 0;
        _this5.testTask.innerHTML = '';
        _this5.buildQuestion();
      } else {
        _this5.state = 2;
        _this5.currentQuest--;
        // console.log('TEST::>', this.testScore/(this.questionList.length))
        courseInfo.testScore = Math.round(_this5.testScore / _this5.questionList.length);
        courseInfo.testRight = _this5.testRight;
        // alert('konec')
        // show result window
        // to showModal: modal id, head comment, text comment
        userService.sendToLMS();
        if (chapter == 0) {
          _this5.chartTitle = "";
        } else if (courseInfo.testScore < 75) {
          _this5.chartTitle = 'Тест не пройден.';
        } else {
          _this5.chartTitle = 'Тест пройден!';
        }
        // console.log("this.chartTitle",this.chartTitle);
        Chart.defaults.global.defaultFontFamily = 'Arial';
        Chart.defaults.global.defaultFontSize = 22;
        Chart.defaults.global.defaultFontColor = '#000';
        staticService.showModal('exercise', staticService.getTitle($stateParams), _this5.chartTitle /*'Набрано баллов: '+courseInfo.testScore+' из 100.'*/, '', "final");
        new Chart(document.getElementById("pie-chart"), {
          type: 'pie',
          data: {
            labels: ["Правильных ответов", "Неправильных ответов"],
            datasets: [{
              label: "",
              backgroundColor: ["#c5edff", "#fe9f39"],
              data: [courseInfo.testRight, _this5.questionList.length - courseInfo.testRight]
            }]
          },
          options: {
            legend: {
              labels: {
                // This more specific font property overrides the global property
                // defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                // fontColor: 'black',
              }
            },
            plugins: {
              fillter: {
                propagate: false
              }
            },
            title: {
              display: true,
              text: 'Ваш результат - ' + courseInfo.testScore + ' %'

            }
          }
        });
      }
    };

    this.checkAnswer = function () {
      var answersElements = document.getElementsByClassName('task-question'
      // console.warn('answersElements', answersElements)
      // console.warn('questionList', this.questionList[this.currentQuest].answers)

      );for (var i = 0; i < answersElements.length; i++) {
        var answer = _this5.questionList[_this5.currentQuest].answers[i].right,
            question = answersElements[i].classList.contains('radio-selected');

        // console.warn('check answers', answer, question)
        if (answer !== question) {
          // неверный ответ
          //console.warn('ответ на вопрос теста неверен')
          //console.info('score', this.testScore, this.testRight)
          return;
        }
      }
      //console.warn('ответ на вопрос верен')
      _this5.testScore += 100;
      _this5.testRight += 1;
      //console.info('score', this.testScore, this.testRight)
      //
    };

    this.removeRestart = function () {
      _this5.state = 0;
      _this5.testScore = 0;
      _this5.testRight = 0;
      _this5.currentQuest = 0;
      _this5.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
      _this5.testTask.innerHTML = '';
      _this5.buildQuestion();
    };

    angular.element(document).ready(function () {
      // console.log(this.questionList)
      _this5.buildQuestion();
    });
  }
})();

;(function () {
  'use strict';

  FooterCtrl.$inject = ["$state", "$stateParams", "staticService", "userService", "courseInfo", "courseDataObj"];
  angular.module('courseApp').controller('FooterCtrl', FooterCtrl);

  /* @ngInject */
  function FooterCtrl($state, $stateParams, staticService, userService, courseInfo, courseDataObj) {
    var _this6 = this;

    if (window.bookmark && !window.bookmark.loaded) {
      window.bookmark.loaded = true;
      document.getElementsByClassName('paginator')[0].innerHTML = window.bookmark.page + ' / ' + staticService.getPageTotal();
      staticService.setBookmark(window.bookmark.chapterPage, window.bookmark.chapter);
    } else {
      document.getElementsByClassName('paginator')[0].innerHTML = courseInfo.bookmark.page + ' / ' + staticService.getPageTotal();
    }

    this.bookmark = staticService.getBookmark();
    // console.log('FooterCtrl::', this.bookmark)

    // alert(JSON.stringify(courseInfo))

    this.coursePage = document.querySelector('.page-wrapper');

    this.curChapterNum = Number($stateParams.chapter);
    // страница в главе
    this.curPageNum = Number($stateParams.page);
    // всего страниц в курсе
    this.pageAmountTotal = '' + staticService.getPageTotal();
    // всего страниц в главе
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    var currChapterObj = courseDataObj.chapters[this.curChapterNum - 1];
    this.chapterLocation = currChapterObj.chapter_location;
    this.pageLocation = currChapterObj.pages[this.curPageNum - 1].location;
    this.pageHasSound = currChapterObj.pages[this.curPageNum - 1].hasSound;
    console.warn('FooterCtrl:: locs: %s, %s, sound: %s', this.chapterLocation, this.pageLocation, this.pageHasSound);

    this.toBack = function () {
      if (_this6.curChapterNum == 1 && _this6.curPageNum == 1) {
        return;
      }

      if (_this6.curPageNum == 1) {
        _this6.curPageNum = staticService.getChapterObj(_this6.curChapterNum - 2).pages.length;
        _this6.curChapterNum--;
      } else {
        _this6.curPageNum--;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      _this6.coursePage.classList.add('backward');
      // console.warn('FooterCtrl:: локейшены', courseDataObj.chapters[this.curChapterNum-1].chapter_location, courseDataObj.chapters[this.curChapterNum-1].pages[this.curPageNum-1].location)

      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toForward = function () {
      if (_this6.curChapterNum == staticService.getChaptersTotal().length && _this6.curPageNum == _this6.pageAmountChapter) {
        return;
      }

      if (_this6.curPageNum == _this6.pageAmountChapter) {
        _this6.curChapterNum++;
        _this6.curPageNum = 1;
      } else {
        _this6.curPageNum++;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      userService.setPageVisit(_this6.curChapterNum - 1, _this6.curPageNum);
      _this6.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toggleAbout = function () {
      //
    };
    this.toggleHelp = function () {
      //
    };
  }
})();
;(function () {
  'use strict';

  HeaderCtrl.$inject = ["$state", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('HeaderCtrl', HeaderCtrl);

  /* @ngInject */
  function HeaderCtrl($state, $stateParams, staticService, userService) {
    var _this7 = this;

    this.chapters = staticService.getChaptersTotal();

    this.exercises = userService.exs;

    this.getExs = function () {
      return userService.getExs();
    };

    this.getPageType = function () {
      return userService.getPageType(Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
    };

    this.getNotes = function () {
      return userService.getUserNotes();
    };

    this.countExs = function () {
      return userService.getExs().length;
    };

    this.countDoneExs = function () {
      var exs = userService.getExs(),
          counter = 0;
      exs.forEach(function (item, i, arr) {
        if (item.status == 1) {
          counter++;
        }
      });
      return counter;
    };

    this.addInfo = function () {
      return staticService.getAddInfo();
    };

    this.exerciseData = function () {
      return staticService.getExercise();
    };

    this.title = {
      course: staticService.getCourseName().course,
      chapter: staticService.getChapterObj(Number($stateParams.chapter) - 1).title,
      exercise: this.chapters[Number($stateParams.chapter) - 1].pages[Number($stateParams.page) - 1].title
    };

    this.getModalState = function (index) {
      return staticService.getModalState(index);
    };

    this.menuPagesCounter = 1;
    this.countPages = function () {
      return _this7.menuPagesCounter++;
    };

    this.coursePage = document.querySelector('.page-wrapper');

    this.goFromMenu = function (page, chapter) {
      console.log('HeaderCtrl:: goFromMenu, page: %d, chapter: %d, SP: %s, SC: %s', page.page_id, chapter.chapter_id, $stateParams.page, $stateParams.chapter);

      if (chapter.chapter_id > Number($stateParams.chapter)) {
        _this7.coursePage.classList.remove('backward');
      } else if (chapter.chapter_id == Number($stateParams.chapter)) {
        if (page.page_id > Number($stateParams.page)) {
          _this7.coursePage.classList.remove('backward');
        } else {
          _this7.coursePage.classList.add('backward');
        }
      } else {
        _this7.coursePage.classList.add('backward');
      }

      $state.go('page', { chapter: chapter.chapter_id, page: page.page_id });

      staticService.closeModals();
    };
    this.getCurrent = function () {
      return staticService.getBookmark().page;
    };
    this.toggleMenu = function () {
      staticService.showModal('menu');
      scrollMenu();
    };

    this.scrollMenu = function () {
      _this7.curChapterNum = Number($stateParams.chapter);
      _this7.curPageNum = Number($stateParams.page);
      var currentItem = document.querySelector('#page_' + _this7.curChapterNum + '_' + _this7.curPageNum);
      var menu = document.querySelector('.modal_nav-menu');

      // console.warn('curr offsetTop',currentItem.offsetTop)
      setTimeout(function () {
        menu.scrollTop = currentItem.offsetTop - 300;
      }, 30);
    };

    this.toggleStat = function () {
      // this.exercises = userService.exs;
      staticService.showModal('stats');
    };
    this.toggleModal = function (modalName) {
      staticService.showModal(modalName);
    };

    this.closeModals = function () {
      staticService.closeModals();
    };

    this.closeCourse = function () {
      userService.closeCourse();
    };

    this.curChapterNum = Number($stateParams.chapter);
    this.curPageNum = Number($stateParams.page);
    this.coursePage = document.querySelector('.page-wrapper');
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    this.toForward = function (exStatus) {
      if (!exStatus) {
        return;
      }

      if (_this7.curChapterNum == staticService.getChaptersTotal().length && _this7.curPageNum == _this7.pageAmountChapter) {
        return;
      }

      if (_this7.curPageNum == _this7.pageAmountChapter) {
        _this7.curChapterNum++;
        _this7.curPageNum = 1;
      } else {
        _this7.curPageNum++;
      }

      staticService.setBookmark(_this7.curPageNum, _this7.curChapterNum);
      userService.setPageVisit(_this7.curChapterNum - 1, _this7.curPageNum);
      _this7.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this7.curChapterNum, page: _this7.curPageNum });
    };

    this.complexEx = function () {
      var a = false;
      if (_this7.curChapterNum == 3 && _this7.curPageNum == 26) {
        a = true;
      }
      return a;
    };

    this.nextStep = function () {
      console.warn(_this7.exerciseData().answer);
      if (userService.getExProgress(_this7.curChapterNum - 1, _this7.curPageNum - 1)) {
        _this7.toForward(_this7.exerciseData().answer);
      } else {} //todo
    };
  }
})();
;(function () {
  'use strict';

  LeaderLineCtrl.$inject = ["$element", "$attrs", "userService"];
  angular.module('courseApp').component('makeLine', {
    bindigs: {
      lineTo: '@'
    },
    controller: 'LeaderLineCtrl'
  }).controller('LeaderLineCtrl', LeaderLineCtrl

  /* @ngInject */
  );function LeaderLineCtrl($element, $attrs, userService) {

    /*angular.element(document).ready(()=> {
      this.elementsFrom = JSON.parse($attrs.linefrom);
      this.elementsTo = JSON.parse($attrs.lineto);
      // console.log(this.elementsFrom, this.elementsTo)
      
      for (var i = 0; i < this.elementsFrom.length; i++) {
        console.log('draw line')
        let start = document.getElementById(this.elementsFrom[i]),
            end = document.getElementById(this.elementsTo[i]),
            params = JSON.parse(start.getAttribute('data'));
            // console.log(params)
        new LeaderLine(
            start,
            end,
            params
          )
      }
    })*/

    //TODO: 
    // var e = document.getElementsByClassName('leader-line')
    // e[0].remove()
    // 
  }
})();
;(function () {
  'use strict';

  pageVideoCtrl.$inject = ["staticService"];
  angular.module('courseApp').component('pageVideo', {
    bindings: {
      videourl: '@', // ссылка на видео
      videoposter: '@', // превью картинка
      suburl: '@', // ссылка на субтитры
      videowidth: '@',
      videoheight: '@'
    },
    templateUrl: 'js/components/page-video/pageVideoTmpl.html',
    controller: 'pageVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('pageVideoCtrl', pageVideoCtrl);

  /* @ngInject */
  function pageVideoCtrl(staticService) {
    var _this8 = this;

    this.openVideo = function () {
      var videoElement = document.querySelector('.modal_video__body'),
          videoStr = "<video class=\"video-js vjs-default-skin video-element my-home-video\" controls preload=\"auto\"\n                               width=\"" + _this8.videowidth + "\" height=\"" + _this8.videoheight + "\" poster=\"" + _this8.videoposter + "\" vjs-video>\n                            <source src=\"" + _this8.videourl + "\" type=\"video/mp4\">\n                            <track enabled kind=\"captions\" src=\"" + _this8.suburl + "\" srclang=\"ru\" label=\"Russian Subtitles\" default />\n                        </video>";
      staticService.showModal('video');
      videoElement.innerHTML = videoStr;
    };
  }
})();

;(function () {
  'use strict';

  TabsItemCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('tabs', {
    transclude: true,
    templateUrl: 'js/components/tabs/tabsTmpl.html',
    controller: 'TabsCtrl',
    controllerAs: '$ctrl'
  }).controller('TabsCtrl', TabsCtrl).component('tabsItem', {
    require: {
      'parent': '^tabs'
    },
    bindings: {
      item: '='
    },
    transclude: true,
    templateUrl: 'js/components/tabs/tabsTmpl.html',
    controller: 'TabsItemCtrl',
    controllerAs: '$ctrl'
  }).controller('TabsItemCtrl', TabsItemCtrl);

  /* @ngInject */
  function TabsCtrl() {
    var self = this;
  }

  /* @ngInject */
  function TabsItemCtrl($scope, $stateParams, $attrs, staticService, userService) {

    this.items = [];
  }

  //function TabsItemCtrl($element, $timeout, $interval, $attrs) {
  //  const self = this;
  //
  //  self.hintShow = false;
  //  const index = $($element).index();
  //  if (index === 1) {
  //    $timeout(() => {
  //      self.hintShow = '' ? self.hintShow : true;
  //  }, 10000);
  //    $interval(() => {
  //      if ($($($element).parent().children()[index]).hasClass('tab__item_active')) {
  //      self.hintShow = '';
  //    }
  //  }, 200);
  //  }
  //}
})();
;(function () {
  'use strict';

  ComboChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskComboChoice', {
    templateUrl: 'js/components/task-combo-choice/taskComboChoiceTmpl.html',
    controller: 'ComboChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ComboChoiceCtrl', ComboChoiceCtrl);

  /* @ngInject */
  function ComboChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this9 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ComboCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ComboCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ComboCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ComboCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this9.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this9.selectAnswer = function (parentIndex, index) {
        if (_this9.state == 2) {
          return;
        }

        switch (_this9.taskExs[parentIndex].taskType) {
          case "multi":
            selectMulti(_this9.active[parentIndex][index]);
            break;
          case "single":
            selectSingle(_this9.active[parentIndex], index);
            break;
        }

        // console.log('select', this.active[parentIndex][index])

        function selectMulti(item) {
          // console.log('trace ===>>', )
          item.selected = !item.selected;
        }
        function selectSingle(item) {
          item.forEach(function (elem) {
            elem.selected = false;
          });
          item[index].selected = true;
        }

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this9.active.length; i++) {
          for (var j = 0; j < _this9.active[i].length; j++) {
            if (_this9.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this9.active.length) {
          if (_this9.test) {
            $scope.$emit('myTestState', 1);
          }
          _this9.state = 1;
        } else {
          if (_this9.test) {
            $scope.$emit('myTestState', 0);
          }
          _this9.state = 0;
        }
      }; // end of selectAnswer()

      _this9.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this9.userAttempt === _this9.attemptNum) {
          _this9.userAttempt = 0;
        }
        _this9.userAttempt++;
        _this9.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this9.taskExs.length; i++) {
          var item_i = _this9.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this9.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskComboChoice:: упражнение провалено')

              if (_this9.userAttempt == _this9.attemptNum && _this9.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[_this9.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskComboChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[0], true);
      };

      _this9.removeRestart = function () {

        _this9.state = 0;

        if (_this9.taskOptions.shuffle) {
          _this9.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this9.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskComboChoice:: showAnswer')
        for (var i = 0; i < _this9.taskExs.length; i++) {
          for (var j = 0; j < _this9.taskExs[i].questionList.length; j++) {
            _this9.active[i][j].selected = _this9.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  taskDragCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDrag', {
    templateUrl: 'js/components/task-drag/taskDragTmpl.html',
    controller: 'taskDragCtrl',
    controllerAs: '$ctrl'
  }).directive('draggable', draggable).directive('droppable', droppable).controller('taskDragCtrl', taskDragCtrl);

  function draggable() {
    return function ($scope, $element) {
      var elem = $element[0];
      elem.draggable = true;

      elem.addEventListener('dragstart', function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', this.id);
        this.classList.add('drag');
        return false;
      }, false);

      elem.addEventListener('dragend', function (e) {
        this.classList.remove('drag');
        return false;
      }, false);
    };
  }

  function droppable() {
    return function ($scope, $element) {
      var elem = $element[0];

      elem.addEventListener('dragover', function (e) {
        e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragenter', function (e) {
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragleave', function (e) {
        this.classList.remove('over');
        return false;
      }, false);

      elem.addEventListener('drop', function (e) {
        var dragContainer = document.getElementsByClassName('task__drag-container')[0];
        this.classList.remove('over');

        if (this.firstChild) {
          dragContainer.appendChild(this.firstChild);
        }

        var item = document.getElementById(e.dataTransfer.getData('Text'));
        this.appendChild(item);
        e.preventDefault();

        return false;
      }, false);
    };
  }

  /* @ngInject */
  function taskDragCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this10 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    this.showRight = 0;

    angular.element(document).ready(function () {

      _this10.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        if (_this10.userAttempt === _this10.attemptNum) {
          _this10.userAttempt = 0;
        }
        _this10.userAttempt++;
        _this10.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          if (!dropItemList[i].firstChild || dropItemList[i].firstChild && dropItemList[i].getAttribute("order") !== dropItemList[i].firstChild.getAttribute("order")) {
            //упражнение провалено

            if (_this10.userAttempt == _this10.attemptNum && _this10.taskOptions.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[_this10.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      for (var i = 0; i < dropItemList.length; i++) {
        if (dropItemList[i].firstChild) dropItemList[i].removeChild(dropItemList[i].firstChild);
      }
      _this10.state = 1;

      if (_this10.taskOptions.shuffle) _this10.questionList = _.shuffle(_this10.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {
      console.log("why not?");
      _this10.showRight = 1;
    };
  }
})();
;(function () {
  'use strict';

  taskDragPresentationCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDragPresentation', {
    templateUrl: 'js/components/task-drag-presentation/taskDragPresentationTmpl.html',
    controller: 'taskDragPresentationCtrl',
    controllerAs: '$ctrl'
  }).directive('draggable', draggable).directive('droppable', droppable).controller('taskDragPresentationCtrl', taskDragPresentationCtrl);

  function draggable() {
    return function ($scope, $element) {
      var elem = $element[0];
      elem.draggable = true;

      elem.addEventListener('dragstart', function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', this.id);
        this.classList.add('drag');
        // console.log("dragstart");
        return false;
      }, false);

      elem.addEventListener('drag', function (e) {
        this.style.pointerEvents = "none";
        this.querySelector('.task__drag-item-pic').style.pointerEvents = "none";
        this.querySelector('.image').style.pointerEvents = "none";
        // console.log("drag");
        return false;
      }, false);

      elem.addEventListener('dragend', function (e) {
        this.classList.remove('drag');
        this.style.pointerEvents = "auto";
        this.querySelector('.task__drag-item-pic').style.pointerEvents = "auto";
        this.querySelector('.image').style.pointerEvents = "auto";
        // console.log("dragend");
        return false;
      }, false);
    };
  }

  function droppable() {
    return function ($scope, $element) {
      var elem = $element[0];

      elem.addEventListener('dragover', function (e) {
        e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
        this.classList.add('over');
        // console.log("dragover");
        return false;
      }, false);

      elem.addEventListener('dragenter', function (e) {
        this.classList.add('over');
        // console.log("dragenter");
        return false;
      }, false);

      elem.addEventListener('dragleave', function (e) {
        this.classList.remove('over');
        // console.log("dragleave");
        return false;
      }, false);

      elem.addEventListener('drop', function (e) {
        var dragContainer = document.getElementsByClassName('task__drag-container')[0];
        this.classList.remove('over');

        if (this.firstChild) {
          dragContainer.appendChild(this.firstChild);
        }

        var item = document.getElementById(e.dataTransfer.getData('Text'));
        this.appendChild(item);
        e.preventDefault();
        // console.log("dragdrop");
        return false;
      }, false);
    };
  }

  /* @ngInject */
  function taskDragPresentationCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this11 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    this.showRight = 0;

    // Изображение позиция по умолчанию
    this.projectorImage = this.taskData.questionList[0].projectorImage[1];
    this.projectorImageMobile = this.taskData.questionList[0].projectorImage[3];
    this.projectorOrder = this.taskData.questionList[0].order[1];
    // Изменение изображения и позиции
    this.rotateProjector = function (position) {
      if (position === 2) {
        _this11.projectorImage = _this11.taskData.questionList[0].projectorImage[1];
        _this11.projectorImageMobile = _this11.taskData.questionList[0].projectorImage[3];
        _this11.projectorOrder = _this11.taskData.questionList[0].order[1];
      } else {
        _this11.projectorImage = _this11.taskData.questionList[0].projectorImage[0];
        _this11.projectorImageMobile = _this11.taskData.questionList[0].projectorImage[2];
        _this11.projectorOrder = _this11.taskData.questionList[0].order[0];
      }
    };
    this.setProjectorOrder = function (num) {
      if (_this11.projectorOrder == num) {
        return num;
      } else {
        return -1;
      }
    };

    angular.element(document).ready(function () {

      _this11.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        if (_this11.userAttempt === _this11.attemptNum) {
          _this11.userAttempt = 0;
        }
        _this11.userAttempt++;
        _this11.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          if (!dropItemList[i].firstChild && !(dropItemList[i].getAttribute("order") === '-1') || dropItemList[i].firstChild && dropItemList[i].getAttribute("order") !== dropItemList[i].firstChild.getAttribute("order")) {
            //упражнение провалено
            if (_this11.userAttempt == _this11.attemptNum && _this11.taskOptions.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[_this11.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      var drugContainer = document.getElementsByClassName('task__drag-container')[0];
      for (var i = 0; i < dropItemList.length; i++) {
        if (dropItemList[i].firstChild) {
          drugContainer.appendChild(dropItemList[i].firstChild);
        }
      }
      _this11.state = 1;

      if (_this11.taskOptions.shuffle) _this11.questionList = _.shuffle(_this11.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {
      // console.log("why not?")
      _this11.showRight = 1;
    };
  }
})();

;(function () {
  'use strict';

  ManyMultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManyMultiChoice', {
    templateUrl: 'js/components/task-many-multi-choice/taskManyMultiChoiceTmpl.html',
    controller: 'ManyMultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManyMultiChoiceCtrl', ManyMultiChoiceCtrl);

  /* @ngInject */
  function ManyMultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this12 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManyMultiCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManyMultiCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    this.state1 = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManyMultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManyMultiCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this12.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      } else {
        this.taskExs.forEach(function (item, i) {
          _this12.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this12.selectAnswer = function (parentIndex, index) {
        if (_this12.state == 2) {
          return;
        };

        _this12.state1 = 1;
        _this12.active[parentIndex][index].selected = !_this12.active[parentIndex][index].selected;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this12.active.length; i++) {
          for (var j = 0; j < _this12.active[i].length; j++) {
            if (_this12.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this12.active.length) {
          if (_this12.test) {
            $scope.$emit('myTestState', 1);
          }
          _this12.state = 1;
        } else {
          if (_this12.test) {
            $scope.$emit('myTestState', 0);
          }
          _this12.state = 0;
        }
      }; // end of selectAnswer()

      _this12.checkAnswer = function (e) {

        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this12.userAttempt === _this12.attemptNum) {
          _this12.userAttempt = 0;
        }
        _this12.userAttempt++;
        _this12.state = 2;
        _this12.state1 = 0;

        // console.log('mas => r, s', this.taskExs, this.active)
        for (var i = 0; i < _this12.taskExs.length; i++) {
          var item_i = _this12.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right, this.active[i][j])
            if (item_i[j].right != _this12.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManyMultiChoice:: упражнение провалено')

              if (_this12.userAttempt == _this12.attemptNum && _this12.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[_this12.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManyMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this12.removeRestart = function () {

        _this12.state = 0;

        if (_this12.taskOptions.shuffle) {
          _this12.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this12.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        } else {
          _this12.taskExs.forEach(function (item, i) {
            _this12.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var i = 0; i < _this12.taskExs.length; i++) {
          for (var j = 0; j < _this12.taskExs[i].questionList.length; j++) {
            _this12.active[i][j].selected = _this12.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice', {
    templateUrl: 'js/components/task-many-single-choice/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoiceCtrl', ManySingleChoiceCtrl);

  /* @ngInject */
  function ManySingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this13 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this13.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      } else {
        this.taskExs.forEach(function (item, i) {
          _this13.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this13.selectAnswer = function (parentIndex, index) {
        if (_this13.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        if (_this13.active[parentIndex][index].selected == true) {
          checkedTasks--;
          _this13.active[parentIndex][index].selected = false;
          return;
        }

        _this13.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this13.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this13.active.length; i++) {
          for (var j = 0; j < _this13.active[i].length; j++) {
            if (_this13.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this13.active.length) {
          if (_this13.test) {
            $scope.$emit('myTestState', 1);
          }
          _this13.state = 1;
        } else {
          if (_this13.test) {
            $scope.$emit('myTestState', 0);
          }
          _this13.state = 0;
        }
      };

      _this13.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this13.userAttempt === _this13.attemptNum) {
          _this13.userAttempt = 0;
        }
        _this13.userAttempt++;
        _this13.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this13.taskExs.length; i++) {
          var item_i = _this13.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this13.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this13.userAttempt == _this13.attemptNum && _this13.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[_this13.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[0], true);
      };

      _this13.removeRestart = function () {

        _this13.state = 0;

        if (_this13.taskOptions.shuffle) {
          _this13.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this13.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        } else {
          _this13.taskExs.forEach(function (item, i) {
            _this13.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var i = 0; i < _this13.taskExs.length; i++) {
          for (var j = 0; j < _this13.taskExs[i].questionList.length; j++) {
            _this13.active[i][j].selected = _this13.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoice42Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice42', {
    templateUrl: 'js/components/task-many-single-choice-exc42/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoice42Ctrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoice42Ctrl', ManySingleChoice42Ctrl);

  /* @ngInject */
  function ManySingleChoice42Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this14 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    console.log(JSON.parse(angular.toJson(this.taskData.exs)));
    this.exampleList = [];

    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    this.rightArray = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.rightArray = this.taskExs[0].questionList.filter(function (element) {
          return element.right > 0;
        });
        //console.log("rightArray", rightArray)
        var wrongArray = _.shuffle(this.taskExs[0].questionList).filter(function (element) {
          return element.right === 0;
        });
        //console.log("wrongArray", wrongArray)
        this.rightArray = _.shuffle(this.rightArray.concat(wrongArray[0], wrongArray[1]));
        // console.log("rightArray", this.rightArray)
        for (var i = 0; i < 2; i++) {
          this.active[i] = [];
          this.active[i] = this.rightArray.map(function () {
            return { selected: 0 };
          });
        }
        // console.log("this.active", this.active)
      }
    }

    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this14.selectAnswer = function (parentIndex, index) {
        if (_this14.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this14.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this14.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var _i2 = 0; _i2 < _this14.active.length; _i2++) {
          for (var j = 0; j < _this14.active[_i2].length; j++) {
            if (_this14.active[_i2][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this14.active.length) {
          if (_this14.test) {
            $scope.$emit('myTestState', 1);
          }
          _this14.state = 1;
        } else {
          if (_this14.test) {
            $scope.$emit('myTestState', 0);
          }
          _this14.state = 0;
        }
      };

      _this14.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this14.userAttempt === _this14.attemptNum) {
          _this14.userAttempt = 0;
        }
        _this14.userAttempt++;
        _this14.state = 2;

        for (var _i3 = 0; _i3 < _this14.active.length; _i3++) {
          for (var j = 0; j < _this14.active[_i3].length; j++) {
            if (_this14.active[_i3][j].selected > 0 && _this14.rightArray[j].right == 0) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this14.userAttempt == _this14.attemptNum && _this14.taskOptions.showAnswer) {
                showAnswer();
              }
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[_this14.userAttempt], false);
              return;
            }
          }
        }

        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[0], true);
      };

      _this14.removeRestart = function () {

        _this14.state = 0;

        if (_this14.taskOptions.shuffle) {
          for (var i = 0; i < 2; i++) {
            _this14.active[i] = [];
            _this14.active[i] = _this14.rightArray.map(function () {
              return { selected: 0 };
            });
          }
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i4 = 0; _i4 < _this14.active.length; _i4++) {
          for (var j = 0; j < _this14.active[_i4].length; j++) {

            if (_this14.rightArray[j].right == _i4 + 1) {
              _this14.active[_i4][j].selected = _this14.rightArray[j].right;
            } else {
              _this14.active[_i4][j].selected = 0;
            }
          }
        }
      }; // end of showAnswer()
    });
  }
})();
;(function () {
  'use strict';

  MarkerChoiceCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerChoice', {
    templateUrl: 'js/components/task-marker-choice/taskMarkerChoiceTmpl.html',
    controller: 'MarkerChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerChoiceCtrl', MarkerChoiceCtrl);

  /* @ngInject */
  function MarkerChoiceCtrl($scope, $stateParams, staticService, userService) {
    var _this15 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    // сколько ответов будет видно на странице
    var qCount = this.taskData.qCount;
    if (this.taskData.qCount > this.taskData.questionList.length) {
      var _qCount = this.taskData.questionList.length;
    }

    // составляем список ответов и мешаем егo
    // _.sample(list, [n])
    if (this.taskData.shuffle) {
      var randomList = angular.fromJson(angular.toJson(_.shuffle(this.taskData.questionList))),
          usedId = [];
      this.questionList = [];

      // рандомно набираем по 1 ответу к каждому маркеру
      for (var _i5 = 0; _i5 < this.markers.length; _i5++) {
        for (var j = 0; j < randomList.length; j++) {
          if (this.markers[_i5].id == randomList[j].right) {
            this.questionList.push(randomList[j]);
            usedId.push(j);
            break;
          }
        }
      }
      // добираем ответы до нужного значения (qCount)
      for (var _i6 = 0; _i6 < randomList.length; _i6++) {
        var check = false;
        for (var _j = 0; _j < usedId.length; _j++) {
          if (_i6 == usedId[_j]) {
            check = true;
            break;
          }
        }
        if (check) {
          continue;
        } else {
          this.questionList.push(randomList[_i6]);
        }

        if (this.questionList.length >= qCount) {
          break;
        }
      }
      // ещё раз мешаем
      this.questionList = _.shuffle(this.questionList);
      // console.log('this.questionList:: =>', this.questionList, usedId)
    } else {
      this.questionList = this.taskData.questionList;
    }

    this.useVideo = staticService.getData($stateParams, 'useVideo');
    this.videoPoster = staticService.getData($stateParams, 'videoPoster');

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    // выделенный маркер
    this.marker = -1;
    // кол-во попыток
    this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
      this.active[i].marker = -1;
    }

    angular.element(document).ready(function () {
      if (_this15.useVideo) {
        // set video bg
        document.getElementsByClassName('btn_task-video')[0].style.background = 'url(' + _this15.videoPoster + ')';
      }

      /**
      *   Выбор цвета маркера
      */
      _this15.selectMarker = function (marker) {
        _this15.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this15.selectAnswer = function (index, $event) {
        if (_this15.marker == -1 || _this15.state == 2) {
          return;
        }

        _this15.active[index].selected = 1;
        _this15.active[index].marker = _this15.marker;
        $event.currentTarget.setAttribute('data', 'marker' + _this15.marker);
        _this15.state = 1;
      };
    });

    this.checkAnswer = function (e) {

      if (_this15.userAttempt === _this15.attemptNum) {
        _this15.userAttempt = 0;
      }
      _this15.userAttempt++;
      _this15.state = 2;

      for (var _i7 = 0; _i7 < _this15.questionList.length; _i7++) {
        // console.log('rightAnswer:', this.questionList[i].rightAnswer, 'userAnswer:', this.active[i].marker)
        if (_this15.questionList[_i7].right != _this15.active[_i7].marker) {
          //упражнение провалено
          if (_this15.userAttempt === 3) {
            // console.log('taskMarkerChoice:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[_this15.userAttempt], false);
          return;
        }
      }
      // console.log('taskMarkerChoice:: упражнение верно')
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[0], true);
    };
    this.removeRestart = function () {
      var aItems = document.getElementsByClassName('task__marker-choice-item');

      for (var i = 0; i < _this15.active.length; i++) {
        _this15.active[i].selected = false;
        _this15.active[i].marker = -1;
        aItems[i].setAttribute('data', 'marker');
      }
      _this15.state = 0;
      _this15.marker = -1;

      _this15.questionList = _.shuffle(_this15.questionList);
    }; // end of removeRestart

    this.showVideo = function () {
      var videoElement = document.querySelector('.modal_video__body');

      _this15.videoUrl = staticService.getData($stateParams, 'videoUrl');
      // console.warn('HeaderCtrl:: this.videoUrl:', this.videoUrl)
      _this15.videoPoster = staticService.getData($stateParams, 'videoPoster');
      _this15.videoWidth = staticService.getData($stateParams, 'videoWidth');
      _this15.videoHeight = staticService.getData($stateParams, 'videoHeight');

      staticService.showModal('video');
      var videoStr = "<video class=\"video-js vjs-default-skin video-element\" controls preload=\"auto\"\n                               width=\"" + _this15.videoWidth + "\" height=\"" + _this15.videoHeight + "\" poster=\"" + _this15.videoPoster + "\" vjs-video>\n                            <source src=\"" + _this15.videoUrl + "\" type=\"video/mp4\">\n                        </video>";
      videoElement.innerHTML = videoStr;
    }; // end of showVideo()

    var showAnswer = function showAnswer() {
      var itemList = document.querySelectorAll('.task__marker-choice-item');
      for (var i = 0; i < itemList.length; i++) {
        itemList[i].setAttribute('data', 'marker' + _this15.questionList[i].right);
      }
    };
  }
})();
;(function () {
  'use strict';

  MarkerNoteCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerNote', {
    controller: 'MarkerNoteCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerNoteCtrl', MarkerNoteCtrl);

  /* @ngInject */
  function MarkerNoteCtrl($scope, $stateParams, staticService, userService) {
    var _this16 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    //массив утверждений
    this.questionList = this.taskData.questionList;

    // массив для работы с ответами
    this.active = [];
    // выделенный маркер
    this.marker = -1;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].marker = this.questionList[i].marker;
      this.active[i].marker == -1 ? this.active[i].selected = 0 : this.active[i].selected = 1;
    }

    angular.element(document).ready(function () {
      /**
      *   Выбор цвета маркера
      */
      _this16.selectMarker = function (marker) {
        _this16.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this16.selectAnswer = function (index, $event) {
        if (_this16.active[index].selected == 1) {
          _this16.active[index].selected = 0;
          _this16.active[index].marker = -1;
          $event.currentTarget.setAttribute('data', 'marker-1');
        } else {
          _this16.active[index].selected = 1;
          _this16.active[index].marker = _this16.marker;
          $event.currentTarget.setAttribute('data', 'marker' + _this16.marker);
        }
      };

      _this16.saveNote = function () {
        for (var i = 0; i < _this16.questionList.length; i++) {
          staticService.setMarkerNote($stateParams, i, _this16.active[i].marker);
        }

        staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
      };
    });
  }
})();
;(function () {
  'use strict';

  MiniTestCtrl.$inject = ["$scope", "$state", "$compile", "$stateParams", "testDataObj", "staticService", "userService", "courseInfo"];
  angular.module('courseApp').component('taskMiniTest', {
    templateUrl: 'js/components/task-mini-test/taskMiniTestTmpl.html',
    controller: 'MiniTestCtrl',
    controllerAs: '$ctrl'
  }).controller('MiniTestCtrl', MiniTestCtrl);

  /* @ngInject */
  function MiniTestCtrl($scope, $state, $compile, $stateParams, testDataObj, staticService, userService, courseInfo) {
    var _this17 = this;

    this.startTest = false;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    // console.log(this.taskExs);

    this.attemptNum = this.taskOptions.attempts;
    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    $scope.$on('myTestState', function (e, data) {
      _this17.state = data;
    });

    if (this.taskOptions.shuffle) {
      // мешаем вопросы
      this.taskExs.forEach(function (item, i) {
        item.answers = _.shuffle(item.answers);
        _this17.active[i] = item.answers.map(function (item, i) {
          return { selected: 0 };
        });
      });
    } else {
      this.taskExs.forEach(function (item, i) {
        _this17.active[i] = item.answers.map(function (item, i) {
          return { selected: 0 };
        });
      });
    }

    this.userAttempt = 0;
    //номер вопроса
    this.currentQuest = 0;
    //показываем ли кнопку "далее"
    this.showNextQ = false;
    this.testScore = 0;
    this.testTask = document.getElementsByClassName('test-task')[0];

    this.buildQuestion = function () {
      // console.log(this.taskExs[this.currentQuest])
      userService.setCurrentTestQuestion(_this17.taskExs[_this17.currentQuest].question, _this17.taskExs[_this17.currentQuest].answers);

      var tmpstr = '';
      switch (_this17.taskExs[_this17.currentQuest].type) {
        case 'single':
          tmpstr = '<task-single-choice test="true"></task-single-choice>';
          break;
        case 'multi':
          tmpstr = '<task-multi-choice test="true"></task-multi-choice>';
          break;
      }

      _this17.testTask.appendChild($compile(tmpstr)($scope)[0]);
    };

    this.nextQuestion = function (e) {
      if (e.target.classList.contains('btn_disabled')) {
        return;
      }

      _this17.showNextQ = false;

      if (_this17.checkAnswer()) {
        endGame(true);
        _this17.state = 2;
        staticService.showModal('exercise', 'Ваш результат', _this17.taskExs[_this17.currentQuest].messages[0], false);
      } else {
        endGame(false);
        if (_this17.userAttempt == _this17.attemptNum) {
          showAnswer();
          _this17.state = 2;
        } else {
          _this17.state = 0;
          _this17.testTask.innerHTML = '';
          _this17.buildQuestion();
        }
        staticService.showModal('exercise', 'Ваш результат', _this17.taskExs[_this17.currentQuest].messages[_this17.userAttempt], false);
      }
    };

    this.showNextQuestion = function (e) {
      _this17.currentQuest++;
      _this17.userAttempt = 0;
      _this17.showNextQ = false;
      if (_this17.currentQuest < _this17.taskExs.length) {
        _this17.state = 0;
        _this17.testTask.innerHTML = '';
        _this17.buildQuestion();
      }
    };

    this.checkAnswer = function () {
      var answersElements = document.getElementsByClassName('task-question'
      // console.log('answersElements', answersElements) 
      // console.warn('questionList', this.questionList[this.currentQuest].answers) 

      );for (var i = 0; i < answersElements.length; i++) {
        var answer = _this17.taskExs[_this17.currentQuest].answers[i].right,
            question = answersElements[i].classList.contains('radio-selected');

        if (answer != question) {
          // неверный ответ
          _this17.userAttempt++;
          return false;
        }
      }

      _this17.testScore++;
      return true;
    };

    this.removeRestart = function () {
      _this17.state = 0;
      _this17.currentQuest = 0;
      _this17.userAttempt = 0;
      _this17.testScore = 0;
      _this17.showNextQ = false;
      _this17.testTask.innerHTML = '';
      _this17.buildQuestion();
    };

    var showAnswer = function showAnswer() {
      var answersElements = document.getElementsByClassName('task-question');
      for (var i = 0; i < answersElements.length; i++) {
        var answer = _this17.taskExs[_this17.currentQuest].answers[i].right;
        answersElements[i].classList.remove('radio-selected');

        if (answer) {
          answersElements[i].classList.add('radio-selected');
        }
      }
    };

    var endGame = function endGame(right) {
      // right - првильно ли ответили на вопрос           
      _this17.showNextQ = false;
      if (_this17.currentQuest >= _this17.taskExs.length - 1) {
        if (_this17.testScore == _this17.taskExs.length) userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);else userService.setUserProgress(Math.floor(100 / _this17.taskExs.length) * _this17.testScore, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      } else if (right || _this17.userAttempt == _this17.attemptNum) {
        console.log("last", _this17.userAttempt, _this17.attemptNum);
        _this17.showNextQ = true;
      }
    };

    angular.element(document).ready(function () {
      _this17.buildQuestion();
    });
  }
})();
;(function () {
  'use strict';

  MultiBoxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiBox', {
    templateUrl: 'js/components/task-multi-box/taskMultiBoxTmpl.html',
    controller: 'MultiBoxCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiBoxCtrl', MultiBoxCtrl);

  /* @ngInject */
  function MultiBoxCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this18 = this;

    var answers = [[0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1]];

    // массив для работы с ответами
    this.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    this.taskData = staticService.getData($stateParams, 'data');

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this18.selectAnswer = function (index, row) {
        if (_this18.state == 2) {
          return;
        }
        // console.log('select', index)
        _this18.active[row][index] = !_this18.active[row][index];
        var check = false;
        for (var i = 0; i < _this18.active.length; i++) {
          for (var j = 0; j < _this18.active[i].length; j++) {
            if (_this18.active[i][j]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this18.state = 1;
        } else {
          _this18.state = 0;
        }
      };

      _this18.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this18.userAttempt === _this18.attemptNum) {
          _this18.userAttempt = 0;
        }
        _this18.userAttempt++;
        _this18.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this18.active.length; i++) {
          for (var j = 0; j < _this18.active[i].length; j++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j])
            if (_this18.active[i][j] != answers[i][j]) {
              //упражнение провалено
              if (_this18.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3')
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[_this18.userAttempt], false);
              return;
            }
          }
        }

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this18.removeRestart = function () {

        _this18.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        _this18.state = 0;
      }; // end of removeRestart
    });
    var showAnswer = function showAnswer() {
      _this18.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();
;(function () {
  'use strict';

  MultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoice', {
    templateUrl: 'js/components/task-multi-choice/taskMultiChoiceTmpl.html',
    controller: 'MultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceCtrl', MultiChoiceCtrl);

  /* @ngInject */
  function MultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this19 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    var qCount = 0;
    if (!this.test) {
      if (this.taskData.qCount == -1) {
        qCount = this.taskData.questionList.length;
      } else {
        qCount = this.taskData.qCount;
      }
    }
    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      if (this.taskData.shuffle) this.questionList = _.sample(this.taskData.questionList, qCount);else this.questionList = this.taskData.questionList;
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this19.selectAnswer = function (index) {
        if (_this19.state == 2) {
          return;
        }
        // console.log('select', index)
        _this19.active[index].selected = !_this19.active[index].selected;
        var check = false;
        for (var _i8 = 0; _i8 < _this19.active.length; _i8++) {
          if (_this19.active[_i8].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this19.test) {
            $scope.$emit('myTestState', 1);
          }
          _this19.state = 1;
        } else {
          if (_this19.test) {
            $scope.$emit('myTestState', 0);
          }
          _this19.state = 0;
        }
      };

      _this19.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this19.userAttempt === _this19.attemptNum) {
          _this19.userAttempt = 0;
        }
        _this19.userAttempt++;
        _this19.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this19.questionList.length; i++) {
          // console.log('taskMultiChoice:: упражнение не верно')
          if (_this19.questionList[i].right != _this19.active[i].selected) {
            //упражнение провалено

            if (_this19.userAttempt == _this19.attemptNum && _this19.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[_this19.userAttempt], false);
            return;
          }
        }
        // console.log('taskMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[0], true);
      };

      _this19.removeRestart = function () {

        for (var i = 0; i < _this19.active.length; i++) {
          _this19.active[i].selected = false;
        }
        _this19.state = 0;

        if (_this19.taskData.shuffle) _this19.questionList = _.sample(_this19.taskData.questionList, qCount);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var _i9 = 0; _i9 < _this19.questionList.length; _i9++) {
          _this19.active[_i9].selected = _this19.questionList[_i9].right;
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  taskComplexCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskComplex', {
    //templateUrl: 'js/components/task-multi-choice-prez/taskMultiChoicePrezTmpl.html',
    controller: 'taskComplexCtrl',
    controllerAs: '$ctrl'
  }).controller('taskComplexCtrl', taskComplexCtrl);

  /* @ngInject */
  function taskComplexCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this20 = this;

    var complex_ex1 = [];
    //taskSwapListPrez
    var items2 = [];
    var items3 = [];
    this.itemsS = [];
    //taskSwapListPrez
    var _rez1 = 0;
    var _rez2 = 0;
    var _tabNum = 1;
    var _state1 = 0;
    this.tabNum = 1;

    this.setTab = function (tab) {
      staticService.tabNum = tab;
      _this20.tabNum = tab;
      console.warn(_this20.tabNum, staticService.tabNum);
    };

    this.tabEx = function () {
      return staticService.tabNum;
    };

    this.activeRight = [];
    this.questionListRight = [];
    //taskMultiChoice
    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');
    //var rezDataUserservice = userService.complex_ex1;
    //console.info('rezDataUserservice 777777777  =', rezDataUserservice);
    //taskMultiChoice
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs));
    this.taskExs0 = angular.fromJson(angular.toJson(this.taskData.exs[0])); // arr
    console.log('this.taskExs0------', this.taskExs0);
    //taskSwapListPrez
    this.taskOptions = this.taskData.options; // obj
    var questionListRight = this.taskData.questionList;
    //console.log('questionListRight------',  questionListRight);
    //console.log('questionListRight------',  questionListRight[0].right);
    this.state1 = 1;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i10 = 0; _i10 < this.taskExs.length; _i10++) {
        this.taskExs[_i10].questionList = _.shuffle(this.taskExs[_i10].questionList);
      }
    }

    items2 = this.taskData.exs; // obj
    //console.log('tasklabel - *********----------------',items2[0].questionList[0].label);

    function readNotes() {
      for (var k = 0; k < 4; k++) {
        var items = [];
        items[0] = items2[0].questionList[k].label[0];
        items[1] = items2[0].questionList[k].label[1];
        items3[k] = items;
      }
    }

    readNotes();
    this.itemsS = items3;
    //console.log('this.itemsS********------',  this.itemsS[0][0]);

    //taskSwapListPrez


    for (var _i11 = 0; _i11 < questionListRight.length; _i11++) {
      this.activeRight[_i11] = {};
      this.activeRight[_i11].selected = questionListRight[_i11].right;
      this.activeRight[_i11].label = questionListRight[_i11].label;
      this.questionListRight[_i11] = questionListRight[_i11].label;
      console.log('this.showRight.label -', _i11, ' -', this.activeRight[_i11].label);
      //console.log('this.showRight.selected -',i,' -',this.activeRight[i].selected);

      // console.log('thi.squestionListRight[i] -',i,' -',this.questionListRight[i]);
    }

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    var qCount = 0;
    if (!this.test) {
      if (this.taskData.qCount == -1) {
        qCount = this.taskData.questionList.length;
      } else {
        qCount = this.taskData.qCount;
      }
    }
    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      if (this.taskData.shuffle) this.questionList = _.sample(this.taskData.questionList, qCount);else this.questionList = this.taskData.questionList;
    }

    // массив для работы с ответами
    this.active = [];
    //this.activeRight = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i12 = 0; _i12 < this.taskExs.length; _i12++) {
        this.taskExs[_i12].questionList = _.shuffle(this.taskExs[_i12].questionList);
      }
    }

    angular.element(document).ready(function () {

      _this20.selectAnswer = function (index) {
        if (_this20.state == 2) {
          return;
        }
        // console.log('select', index)
        _this20.active[index].selected = !_this20.active[index].selected;
        var check = false;
        for (var _i13 = 0; _i13 < _this20.active.length; _i13++) {
          if (_this20.active[_i13].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this20.test) {
            $scope.$emit('myTestState', 1);
          }
          _this20.state = 1;
        } else {
          if (_this20.test) {
            $scope.$emit('myTestState', 0);
          }
          _this20.state = 0;
        }
      };

      // мешаем вопросы
      if (_this20.taskOptions.shuffle) {
        for (var _i14 = 0; _i14 < _this20.taskExs.length; _i14++) {
          _this20.taskExs[_i14].questionList = _.shuffle(_this20.taskExs[_i14].questionList);
        }
      }

      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {
            _state1 = 2;
            this.state1 = _state1;
          },
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state1 == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      _this20.checkAnswer1 = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this20.userAttempt === _this20.attemptNum) {
          _this20.userAttempt = 0;
        }
        _this20.userAttempt++;
        _this20.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this20.questionList.length; i++) {
          // console.log('taskMultiChoice:: упражнение не верно')
          if (_this20.questionList[i].right != _this20.active[i].selected) {
            //упражнение провалено
            _rez1 = 0;
            if (_this20.userAttempt == _this20.attemptNum && _this20.taskData.showAnswer) {
              //this.userAttempt = 0;
              _this20.tabNum = 3;
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages[_this20.userAttempt], false);
            return;
          }
        }
        _this20.userAttempt = 0;
        _rez1 = 1;
        console.log('taskMultiChoice:: упражнение верно', _rez1
        //userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        );staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages[0], true);
        // staticService.showModal('exercise', 'Ваш результат', this.taskData.messages[0], false);
        _this20.tabNum = 3;
      };

      _this20.removeRestart1 = function () {

        for (var i = 0; i < _this20.active.length; i++) {
          _this20.active[i].selected = false;
        }
        _this20.state = 0;

        if (_this20.taskData.shuffle) _this20.questionList = _.sample(_this20.taskData.questionList, qCount);
      };

      _this20.checkAnswer = function () {
        // console.log('SwapListPrezCtrl:: checkAnswer:')
        if (_this20.userAttempt === _this20.attemptNum) {
          _this20.userAttempt = 0;
        }
        _this20.userAttempt++;
        console.log('this.userAttempt----------', _this20.userAttempt
        //if (this.userAttempt === 3) {
        //  this.userAttempt = 0;
        //}
        );_this20.state1 = 2;
        $(".task-swap-list_item").draggable('disable');

        var taskList = document.querySelectorAll('.task-swap-list');

        for (var _i15 = 0; _i15 < _this20.taskData.exs.length; _i15++) {
          var list = taskList[_i15].querySelectorAll('.task-swap-list_item');

          for (var j = 0; j < _this20.taskData.exs[_i15].questionList.length; j++) {
            //console.log("this.taskData.exs[i].questionList.phrase ************",i,'-',this.taskData.exs[i].questionList.length);
            //console.log('SwapListPrezCtrl:: list **************************', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
            if (list[j].getAttribute("data-order") != _this20.taskData.exs[_i15].questionList[j].order || complex_ex1[0] == false) {
              console.log("list[j].getAttribute(data-order)", list[j].getAttribute("data-order"));

              // неправильно дан ответ
              complex_ex1[1] = false;
              if (_this20.userAttempt == _this20.attemptNum && _this20.taskOptions.showAnswer) {
                _this20.tabNum = 6;
                showAnswer2();
              }

              //if (this.userAttempt == 3) {
              //  //_tabNum = 5;
              //  this.tabNum =6;
              //  showAnswer2();
              //  showAnswer3();
              //  removeRestart();
              //}
              if (_rez1 == 1) {
                userService.setUserProgress(50, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              } else {
                userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              }

              //userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages2[_this20.userAttempt], false);
              return;
            }
          }
        }
        // упражнение верно
        complex_ex1[1] = true;

        if (_rez1 == 1) {
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        } else {
          userService.setUserProgress(50, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        }
        //userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages2[0], true);
      }; // end of checkAnswer()

      _this20.removeRestart = function () {
        _this20.state1 = 0;
        _this20.showRight = 0;
        $(".task-swap-list_item").draggable('enable');

        // мешаем вопросы
        if (_this20.taskOptions.shuffle) {
          for (var _i16 = 0; _i16 < _this20.taskExs.length; _i16++) {
            _this20.taskExs[_i16].questionList = _.shuffle(_this20.taskExs[_i16].questionList);
          }
        }
      }; // end of removeRestart()

      function showAnswer3() {
        this.state1 = 1;
        this.showRight = 1;
        $(".task-swap-list_item").draggable('enable');
      }

      var showAnswer = function showAnswer() {
        _this20.showRight = 1;
        console.log('taskMultiChoicePrez:: showAnswer');
        for (var _i17 = 0; _i17 < _this20.questionList.length; _i17++) {
          _this20.active[_i17].selected = _this20.questionList[_i17].right;
          _this20.activeRight[_i17].selected = _this20.questionList[_i17].right;
          console.log('this.showRight -', _i17, ' -', _this20.questionList[_i17].right);
        }
      };

      var showAnswer2 = function showAnswer2() {
        _this20.showRight = 1;
        $(".task-swap-list_item").draggable('enable');
      };

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  } // end of taskComplexCtrl
})();
;(function () {
  'use strict';

  MultiChoicePrezCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoicePrez', {
    templateUrl: 'js/components/task-multi-choice-prez/taskMultiChoicePrezTmpl.html',
    controller: 'MultiChoicePrezCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoicePrezCtrl', MultiChoicePrezCtrl);

  /* @ngInject */
  function MultiChoicePrezCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this21 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');
    var rezDataUserservice = userService.complex_ex1;
    console.info('rezDataUserservice 777777777  =', rezDataUserservice);
    var qCount = 0;
    if (!this.test) {
      if (this.taskData.qCount == -1) {
        qCount = this.taskData.questionList.length;
      } else {
        qCount = this.taskData.qCount;
      }
    }
    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      if (this.taskData.shuffle) this.questionList = _.sample(this.taskData.questionList, qCount);else this.questionList = this.taskData.questionList;
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this21.selectAnswer = function (index) {
        if (_this21.state == 2) {
          return;
        }
        // console.log('select', index)
        _this21.active[index].selected = !_this21.active[index].selected;
        var check = false;
        for (var _i18 = 0; _i18 < _this21.active.length; _i18++) {
          if (_this21.active[_i18].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this21.test) {
            $scope.$emit('myTestState', 1);
          }
          _this21.state = 1;
        } else {
          if (_this21.test) {
            $scope.$emit('myTestState', 0);
          }
          _this21.state = 0;
        }
      };

      _this21.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this21.userAttempt === _this21.attemptNum) {
          _this21.userAttempt = 0;
        }
        _this21.userAttempt++;
        _this21.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this21.questionList.length; i++) {
          // console.log('taskMultiChoicePrez:: упражнение не верно')
          if (_this21.questionList[i].right != _this21.active[i].selected) {
            //упражнение провалено
            userService.complex_ex1[0] = false;
            console.info('rezDataUserservice 55555555  =', rezDataUserservice);
            if (_this21.userAttempt == _this21.attemptNum && _this21.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this21.taskData.messages[_this21.userAttempt], false);
            return;
          }
        }
        // console.log('taskMultiChoicePrez:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this21.taskData.messages[0], true);
      };

      _this21.removeRestart = function () {

        for (var i = 0; i < _this21.active.length; i++) {
          _this21.active[i].selected = false;
        }
        _this21.state = 0;

        if (_this21.taskData.shuffle) _this21.questionList = _.sample(_this21.taskData.questionList, qCount);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoicePrez:: showAnswer')
        for (var _i19 = 0; _i19 < _this21.questionList.length; _i19++) {
          _this21.active[_i19].selected = _this21.questionList[_i19].right;
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  MultiChoiceTableCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoiceTable', {
    templateUrl: 'js/components/task-multi-choice-table/taskMultiChoiceTableTmpl.html',
    controller: 'MultiChoiceTableCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceTableCtrl', MultiChoiceTableCtrl);

  /* @ngInject */
  function MultiChoiceTableCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this22 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // получение данных задания data из courseStructure.js
    this.taskData = staticService.getData($stateParams, 'data');
    var answers = [];
    for (var i = 0; i < this.taskData.questionList.length; i++) {
      answers[i] = this.taskData.questionList[i].right;
    }

    // массив для работы с ответами
    this.active = [];
    for (var _i20 = 0; _i20 < this.taskData.questionList.length; _i20++) {
      this.active[_i20] = [];
      for (var j = 0; j < this.taskData.questionList[_i20].right.length; j++) {
        this.active[_i20][j] = 0;
      }
    }

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this22.selectAnswer = function (index, row) {
        if (_this22.state == 2) {
          return;
        }
        // console.log('select', index)
        _this22.active[row][index] = !_this22.active[row][index];
        var check = false;
        for (var _i21 = 0; _i21 < _this22.active.length; _i21++) {
          for (var _j2 = 0; _j2 < _this22.active[_i21].length; _j2++) {
            if (_this22.active[_i21][_j2]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this22.state = 1;
        } else {
          _this22.state = 0;
        }
      };

      _this22.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this22.userAttempt === _this22.attemptNum) {
          _this22.userAttempt = 0;
        }
        _this22.userAttempt++;
        _this22.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var _i22 = 0; _i22 < _this22.active.length; _i22++) {
          for (var _j3 = 0; _j3 < _this22.active[_i22].length; _j3++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j]);
            if (_this22.active[_i22][_j3] != answers[_i22][_j3]) {
              //упражнение провалено
              if (_this22.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3');
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[_this22.userAttempt], false);
              return;
            }
          }
        };

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this22.removeRestart = function () {
        for (var _i23 = 0; _i23 < _this22.taskData.questionList.length; _i23++) {
          _this22.active[_i23] = [];
          for (var _j4 = 0; _j4 < _this22.taskData.questionList[_i23].right.length; _j4++) {
            _this22.active[_i23][_j4] = 0;
          }
        }
        _this22.state = 0;
      }; // end of removeRestart
    });

    var showAnswer = function showAnswer() {
      _this22.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();

;(function () {
  'use strict';

  NoteCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNote', {
    templateUrl: 'js/components/task-note/taskNoteTmpl.html',
    controller: 'NoteCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteCtrl', NoteCtrl);

  /* @ngInject */
  function NoteCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this23 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    //console.warn("this.taskData *--*--*---*-*-*",this.taskData);
    this.titles = this.taskData.titles;
    this.showTitle = this.taskData.showTitle;
    var elemCount = this.taskData.task_fields / this.titles.length; // количество элементов в колонке

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this23.items = item;
        }
      });
    };
    // console.log('(taskNote)this.items = ', this.items);
    this.range = function (index) {

      var range = [],
          from = index * elemCount,
          to = (index + 1) * elemCount;

      for (var i = from; i < to; i++) {
        range.push(_this23.items.fields[i]);
      }
      // console.log('(taskNote)range*** = ',range );
      return range;
    };
    //console.log('this.range = ', this.range );

    loadNotes();
    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        //console.log(this.items.fields[i]);
        _this23.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this23.items, chapter, page);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };

    this.isMobile = function () {
      var pageContainerElem = document.getElementsByClassName('page-container')[0];
      var widthElem = pageContainerElem.offsetWidth;
      if (widthElem < 760) {
        return true;
      }
      return false;
    };
  }
})();

;(function () {
  'use strict';

  NoteColumnCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumn', {
    templateUrl: 'js/components/task-note-column/taskNoteColumnTmpl.html',
    controller: 'NoteColumnCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnCtrl', NoteColumnCtrl);

  /* @ngInject */
  function NoteColumnCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this24 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes1();
      // let data = userService.getUserNotes();
      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this24.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this24.items.fields.length / 2;

      if (!bool) {
        from = _this24.items.fields.length / 2;
        to = _this24.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this24.items.fields[i]);
      }
      return range;
    };

    loadNotes

    // console.log('NoteCtrl:: fields:', this.items)

    ();this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        console.log(inputs[i].value);
        _this24.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this24.items, chapter, page);
      console.log("this.items - ", _this24.items);
      console.log("chapter - ", chapter);
      console.log("page - ", page);
      console.log("this.items - ", _this24.items.fields.text);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteColumnReadCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumnRead', {
    templateUrl: 'js/components/task-note-column-read/taskNoteColumnReadTmpl.html',
    controller: 'NoteColumnReadCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnReadCtrl', NoteColumnReadCtrl);

  /* @ngInject */
  function NoteColumnReadCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this25 = this;

    self.currentImg = 0;
    var items2 = [];
    var items3 = [];
    var items4 = [];
    var items5 = [];
    this.items = [];

    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');

    var idNote = this.taskData.note_id;
    var chapter_idNote = this.taskData.chapter_id;
    var lei = this.taskData.questionList.length;

    var taskDataM = this.taskData.questionList;
    function readNotes() {
      for (var k = 0; k < lei; k++) {
        items2[k] = taskDataM[k].label;
      }
      items3 = userService.getUserNotes1();
      console.log('items3********', items3);
      items3.forEach(function (item) {
        if (item.id == idNote && item.chapter_id == chapter_idNote) {
          items4 = item.fields;
        }
      });

      for (var n = 0; n < lei; n++) {
        items5[n] = items4[n].text;
      }
    }
    readNotes();
    this.indicators = items2;
    this.indicators2 = items5;
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this25.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this25.items.fields.length / 2;

      if (!bool) {
        from = _this25.items.fields.length / 2;
        to = _this25.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this25.items.fields[i]);
      }
      return range;
    };

    loadNotes

    // console.log('NoteCtrl:: fields:', this.items)

    ();this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        console.log(inputs[i].value);
        _this25.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this25.items, chapter, page);
      console.log("this.items - ", _this25.items);
      console.log("chapter - ", chapter);
      console.log("page - ", page);
      console.log("this.items - ", _this25.items.fields.text);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteEx26Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteEx26', {
    controller: 'NoteEx26Ctrl',
    controllerAs: '$ctrl'
  }).controller('NoteEx26Ctrl', NoteEx26Ctrl);

  /* @ngInject */
  function NoteEx26Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this26 = this;

    //ex
    this.taskData = staticService.getData($stateParams, 'data');
    this.questionList = staticService.getData($stateParams, 'questionList');

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;
    this.displayAnswer = [];

    //note
    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes1();
      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this26.items = item;
        }
      });
    };

    loadNotes();

    angular.element(document).ready(function () {

      _this26.checkAnswer = function (e) {
        var end = true; //даны все ответы
        //saveNote
        var inputs = document.getElementsByClassName('task-note_item_input');
        for (var i = 0; i < inputs.length; i++) {
          _this26.items.fields[i].text = inputs[i].value;

          if (inputs[i].value.length < 1) {
            _this26.displayAnswer[i] = false;
            end = false;
          } else _this26.displayAnswer[i] = true;

          // console.log(inputs[i].value);
        }
        userService.setUserNotes(_this26.items, chapter, page);
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (end) {
          _this26.state = 2;
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        }
      };

      _this26.removeRestart = function () {
        _this26.state = 0;
        var inputs = document.getElementsByClassName('task-note_item_input');
        for (var i = 0; i < inputs.length; i++) {
          inputs[i].value = '';
          _this26.displayAnswer[i] = false;
        }
      }; // end of removeRestart()
    });
  }
})();

;(function () {
  'use strict';

  SelectCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSelect', {
    templateUrl: 'js/components/task-select/taskSelectTmpl.html',
    controller: 'SelectCtrl',
    controllerAs: '$ctrl'
  }).controller('SelectCtrl', SelectCtrl);

  /* @ngInject */
  function SelectCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this27 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    for (var i = 0; i < this.taskExs.length; i++) {
      this.taskExs[i].questionList.questions = this.taskExs[i].questionList.questions.map(function (item) {
        item.default = _this27.taskData.defaultLabel;
        item.v_id = -1;
        item.open = 0;
        return item;
      });
      this.taskExs[i].questionList.variants = this.taskExs[i].questionList.variants.map(function (item) {
        item.selected = -1;
        item.connectedTo = -1;
        return item;
      });
    }

    // console.warn('SelectCtrl:: taskOptions:', this.taskOptions);
    // console.warn('SelectCtrl:: taskExs:', this.taskExs);

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i24 = 0; _i24 < this.taskExs.length; _i24++) {
        this.taskExs[_i24].questionList.variants = _.shuffle(this.taskExs[_i24].questionList.variants);
        // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
      }
    }

    this.showComment = false;

    this.selectChange = function (e, v_id, questIndex, taskIndex) {
      // console.log('select element', v_id, questIndex, taskIndex)
      if (v_id == -1) {
        return;
      }
      if (_this27.state == 2) {
        return;
      }
      // console.log( index )

      // проверяем был ли уже дан ответ на вопрос
      if (_this27.taskExs[taskIndex].questionList.questions[questIndex].v_id != -1) {

        var _v_id = _this27.taskExs[taskIndex].questionList.questions[questIndex].v_id;

        for (var _i25 = 0; _i25 < _this27.taskExs[taskIndex].questionList.variants.length; _i25++) {
          if (_this27.taskExs[taskIndex].questionList.variants[_i25].v_id == _v_id) {
            _this27.taskExs[taskIndex].questionList.variants[_i25].selected = -1;
          }
          break;
        }
      }

      // в вопросе отмечаем какой на него дали ответ
      _this27.taskExs[taskIndex].questionList.questions[questIndex].v_id = v_id;

      // отмечаем, что ответ использован
      for (var _i26 = 0; _i26 < _this27.taskExs[taskIndex].questionList.variants.length; _i26++) {
        if (_this27.taskExs[taskIndex].questionList.variants[_i26].v_id == v_id) {
          _this27.taskExs[taskIndex].questionList.variants[_i26].selected = 1;
          // выводим лейбл ответа
          _this27.taskExs[taskIndex].questionList.questions[questIndex].default = _this27.taskExs[taskIndex].questionList.variants[_i26].label;
        }
      }

      // проверяем везде ли выбрали ответ
      var check = true;
      for (var _i27 = 0; _i27 < _this27.taskExs.length; _i27++) {
        for (var j = 0; j < _this27.taskExs[_i27].questionList.questions.length; j++) {
          if (_this27.taskExs[_i27].questionList.questions[j].v_id == -1) {
            check = false;
            break;
          }
        }
      }

      if (check) {
        _this27.state = 1;
      }

      // можно ли выбирать одни и теже ответы
      if (!_this27.taskExs[taskIndex].sameQ) {
        _this27.filteredList = _this27.getNotSelected(taskIndex);
      }
      _this27.toggleSelect(e, questIndex, taskIndex);

      e.stopPropagation();
    }; // end of selectChange()


    this.checkAnswer = function () {
      // console.log('SelectCtrl:: checkAnswer:')
      if (_this27.userAttempt === _this27.attemptNum) {
        _this27.userAttempt = 0;
      }
      _this27.userAttempt++;
      _this27.state = 2;

      for (var _i28 = 0; _i28 < _this27.taskExs.length; _i28++) {
        for (var j = 0; j < _this27.taskExs[_i28].questionList.questions.length; j++) {

          var thisQuestion = _this27.taskExs[_i28].questionList.questions[j];

          if (_this27.taskData.exs[_i28].questionList.variants[thisQuestion.v_id].q_id != thisQuestion.q_id) {
            // неправильно дан ответ
            if (_this27.userAttempt == _this27.attemptNum && _this27.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this27.taskData.messages[_this27.userAttempt], false);
            return;
          }
        }
      }

      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this27.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {

      _this27.state = 0;
      // мешаем вопросы
      if (_this27.taskOptions.shuffle) {
        for (var _i29 = 0; _i29 < _this27.taskExs.length; _i29++) {
          _this27.taskExs[_i29].questionList.variants = _.shuffle(_this27.taskExs[_i29].questionList.variants);
          // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
        }
      }
      // this.active = angular.fromJson(angular.toJson(this.taskExs));

      for (var _i30 = 0; _i30 < _this27.taskExs.length; _i30++) {
        for (var j = 0; j < _this27.taskExs[_i30].questionList.questions.length; j++) {
          _this27.taskExs[_i30].questionList.questions[j].default = _this27.taskData.defaultLabel;
          _this27.taskExs[_i30].questionList.questions[j].open = 0;
          _this27.taskExs[_i30].questionList.questions[j].v_id = -1;
        }
        for (var _j5 = 0; _j5 < _this27.taskExs[_i30].questionList.variants.length; _j5++) {
          _this27.taskExs[_i30].questionList.variants[_j5].selected = -1;
        }
      }
      _this27.filteredList = _this27.getNotSelected(-1);
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      console.log('SelectCtrl:: showAnswer:'

      // this.userAttempt = 0;

      );for (var i = 0; i < _this27.taskExs.length; i++) {
        for (var j = 0; j < _this27.taskExs[i].questionList.questions.length; j++) {
          for (var k = 0; k < _this27.taskExs[i].questionList.variants.length; k++) {
            if (_this27.taskExs[i].questionList.questions[j].q_id == _this27.taskExs[i].questionList.variants[k].q_id) {
              _this27.taskExs[i].questionList.questions[j].default = _this27.taskExs[i].questionList.variants[k].label;
              break;
            }
          }
        }
      }
    }; // end of showAnswer()

    this.toggleSelect = function (e, questIndex, taskIndex) {
      // console.log('toggleSelect', questIndex, taskIndex);
      _this27.taskExs[taskIndex].questionList.questions[questIndex].open = !_this27.taskExs[taskIndex].questionList.questions[questIndex].open;
      e.stopPropagation();
    }; // end of toggleSelect()

    this.getNotSelected = function (taskIndex) {
      // console.log('filering::', taskIndex)
      var filtered = [];
      for (var _i31 = 0; _i31 < _this27.taskExs.length; _i31++) {
        filtered[_i31] = [];
        if (_i31 == taskIndex) {
          for (var j = 0; j < _this27.taskExs[_i31].questionList.variants.length; j++) {
            if (_this27.taskExs[_i31].questionList.variants[j].selected < 0) {
              filtered[_i31].push(_this27.taskExs[_i31].questionList.variants[j]);
            }
          }
        } else {
          filtered[_i31] = angular.fromJson(angular.toJson(_this27.taskExs[_i31].questionList.variants));
        }
      }
      return filtered;
    }; // end of getNotSelected()

    //инициализация списка ответов
    this.filteredList = this.getNotSelected(-1);
  }; // end of SelectCtrl()
})();
;(function () {
  'use strict';

  NoteEx4Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteEx4', {
    controller: 'NoteEx4Ctrl',
    controllerAs: '$ctrl'
  }).controller('NoteEx4Ctrl', NoteEx4Ctrl);

  /* @ngInject */
  function NoteEx4Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this28 = this;

    //ex
    this.taskData = staticService.getData($stateParams, 'data');
    this.questionList = staticService.getData($stateParams, 'questionList');

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;
    this.currentQuestion = 0;
    this.displayAnswer = false;
    this.end = false; //упражнение пройдено

    //note
    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes1();
      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this28.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this28.items.fields.length / 2;

      if (!bool) {
        from = _this28.items.fields.length / 2;
        to = _this28.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this28.items.fields[i]);
      }
      return range;
    };

    loadNotes();

    angular.element(document).ready(function () {

      _this28.checkAnswer = function (e) {
        //saveNote
        var inputs = document.getElementsByClassName('task-note_item_input');
        for (var i = 0; i < inputs.length; i++) {
          _this28.items.fields[i].text = inputs[i].value;
          console.log(inputs[i].value);
        }
        userService.setUserNotes(_this28.items, chapter, page);
        if (e.target.classList.contains('btn_disabled') || inputs[_this28.currentQuestion].value.length < 1) {
          return;
        }

        _this28.state = 2;

        if (_this28.currentQuestion == _this28.questionList.length - 1) {
          _this28.end = true;
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        }

        _this28.displayAnswer = true;
      };

      _this28.nextQuestion = function () {
        // if (this.currentQuestion < this.questionList)
        _this28.state = 1;
        if (!_this28.end) _this28.displayAnswer = false;

        _this28.currentQuestion++;
      };

      _this28.prevQuestion = function () {
        _this28.currentQuestion--;
      };
    });
  }
})();

(function () {
  'use strict';

  TaskSequenceQuestCtrl.$inject = ["$stateParams", "$document", "$element", "staticService", "userService"];
  angular.module('courseApp').controller('TaskSequenceQuestCtrl', TaskSequenceQuestCtrl);

  /* @ngInject */
  function TaskSequenceQuestCtrl($stateParams, $document, $element, staticService, userService) {
    var self = this,
        variantNum = 3,
        // number of variants in blocks
    currentQuestNum = 0; // current question number

    self.taskData = staticService.getData($stateParams, 'exs');

    /* 
    *  self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "exs": {
    *      "taskText": "<p>Какой характеристики не хватает формулировке для того, чтобы стать целью?</p><p>Какой вопрос необходимо задать, чтобы трансформировать данную формулировку в цель?</p><p>Выберите правильный уточняющий вопрос и характеристику. Переход далее осуществляется только при правильном ответе.</p><p>Темным цветом написана формулировка, светлым – цель, которой она должна стать.</p>",
    *      "variant": [{
    *        "final": "Нашему отделу необходимо поднять уровень продаж. ",
    *        "initial": "Необходимо работать более эффективно.",
    *        "characterNum": 0,
    *        "questionNum": 0
    *      }],
    *      "characterList": [
    *        "Четкость, ясность",
    *        "Измеримость",
    *        "Ограниченность во времени",
    *        "Достижимость",
    *        "Актуальность",
    *        "Письменная формулировка",
    *        "Мобилизующий фактор"
    *      ],
    *      "questionList": [
    *        "Кому необходимо работать более эффективно? Что значит «более эффективно»?",
    *        "На сколько процентов необходимо поднять уровень продаж?",
    *        "К какому сроку?",
    *        "Какими путями?",
    *        "Зачем надо работать более эффективно?",
    *        "Как долго надо работать более эффективно?"
    *      ]
    *    }
    *  }
    */

    self.showVariant = false;
    self.show = false;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: true
    };

    self.userAnswer = [];
    self.userAnswer.length = variantNum + 1;
    for (var i = 0; i < self.userAnswer.length; i++) {
      self.userAnswer[i] = {};
      self.userAnswer[i].character = "";
      self.userAnswer[i].characterNum = "";
      self.userAnswer[i].question = "";
      self.userAnswer[i].questionNum = "";
    };

    function getArr(type, arr, num) {
      var newArr = _.shuffle(arr.filter(function (elem, i) {
        return i !== num;
      })),
          randomNum = _.random(0, variantNum);

      newArr.splice(randomNum, 0, arr[num]);
      newArr.length = variantNum + 1;

      self.userAnswer.forEach(function (elem) {
        elem[type + "Num"] = randomNum;
      });
      return newArr;
    };

    self.getVariantList = function (elem, i) {
      return i <= currentQuestNum;
    };

    self.orderByQuest = function (elem, i) {
      return i === currentQuestNum;
    };

    self.getAnswer = function (prop, index) {
      if (prop === "character") {
        self.userAnswer.forEach(function (elem) {
          return elem.character = "";
        });
        self.userAnswer[index].character = index === self.userAnswer[index].characterNum ? true : false;
      } else {
        self.userAnswer.forEach(function (elem) {
          return elem.question = "";
        });
        self.userAnswer[index].question = index === self.userAnswer[index].questionNum ? true : false;
      }
      if (self.userAnswer.filter(function (elem) {
        return elem.character !== "";
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question !== "";
      }).length) {
        self.btnDisabledState.answer = false;
      }
    };

    // check answers
    self.checkAnswer = function () {
      if (self.userAnswer.filter(function (elem) {
        return elem.character === true;
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question === true;
      }).length) {
        if (self.show === false && currentQuestNum + 1 !== self.taskData.variant.length) {
          self.show = true;
          return staticService.showModal('exercise', 'Результат', 'Верно! Следующая цель: ' + self.taskData.variant[currentQuestNum + 1].final + ' Закройте окно и нажмите кнопку "Далее".', true);
        }
        self.show = false;
        if (currentQuestNum + 1 !== self.taskData.variant.length) {
          currentQuestNum++;
          self.userAnswer.forEach(function (elem) {
            return elem.character = "";
          });
          self.userAnswer.forEach(function (elem) {
            return elem.question = "";
          });
          self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
          self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
          self.btnDisabledState.answer = true;
        } else {
          self.btnDisabledState.answer = true;
          self.show = true;
          self.end = true;
          // send data to userService (needs for statistics), query to staticService to show modal with comment
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', 'Верный ответ!', true);
        }
      } else {
        self.show = true;
        self.btnDisabledState.answer = true;
        self.btnDisabledState.restart = false;
        return staticService.showModal('exercise', 'Ваш результат', 'Неверно! Начните заново.', false);
      }
    };

    // restart
    self.removeRestart = function () {
      self.show = false;
      self.btnDisabledState.answer = true;
      self.btnDisabledState.restart = true;
      self.userAnswer.forEach(function (elem) {
        return elem.character = "";
      });
      self.userAnswer.forEach(function (elem) {
        return elem.question = "";
      });
      self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
      self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
    };

    self.removeRestart();
  }
})();
;(function () {
  'use strict';

  SingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSingleChoice', {
    templateUrl: 'js/components/task-single-choice/taskSingleChoiceTmpl.html',
    controller: 'SingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('SingleChoiceCtrl', SingleChoiceCtrl);

  /* @ngInject */
  function SingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this29 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('SingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)
      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;
      console.log('SingleCCtrl:: Answers:', this.questionList);
    } else {
      // Вопрос упражнения
      this.taskText = staticService.getData($stateParams, 'taskText');
      if (this.taskData.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = staticService.getData($stateParams, 'questionList');
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this29.selectAnswer = function (index) {
        if (_this29.state == 2) {
          return;
        }

        _this29.active.forEach(function (item) {
          item.selected = 0;
        });
        _this29.active[index].selected = 1;
        if (_this29.test) {
          $scope.$emit('myTestState', 1);
        }
        _this29.state = 1;
      };

      _this29.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this29.userAttempt === _this29.attemptNum) {
          _this29.userAttempt = 0;
        }
        _this29.userAttempt++;
        _this29.state = 2;

        for (var i = 0; i < _this29.questionList.length; i++) {
          // console.log('taskSingleChoice:: упражнение не верно')
          if (_this29.questionList[i].right !== _this29.active[i].selected) {
            //упражнение провалено

            if (_this29.userAttempt == _this29.attemptNum && _this29.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this29.taskData.messages[_this29.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this29.taskData.messages[0], true);
      };

      _this29.removeRestart = function () {

        for (var i = 0; i < _this29.active.length; i++) {
          _this29.active[i].selected = false;
        }
        _this29.state = 0;

        if (_this29.taskData.shuffle) _this29.questionList = _.shuffle(_this29.questionList);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i32 = 0; _i32 < _this29.questionList.length; _i32++) {
          _this29.active[_i32].selected = _this29.questionList[_i32].right;
        }
      };
    });
  }
})();
(function () {
  'use strict';

  TaskStrictSortableCtrl.$inject = ["$element", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('TaskStrictSortableCtrl', TaskStrictSortableCtrl);

  /* @ngInject */
  function TaskStrictSortableCtrl($element, $stateParams, staticService, userService) {
    var self = this;

    self.taskData = JSON.parse(angular.toJson(staticService.getData($stateParams, 'data')));
    // console.log('taskData',self.taskData)
    /* 
    * self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "options":{
    *      "attempts": 3,       // кол-во попыток
    *      "shuffle": true,     // мешать ответы?
    *      "showAnswer": true,  // показывать правильный ответ в конце
    *    },
    *    "exs": {
    *      "taskText": "",
    *      "variant": [{
    *        "content": ""
    *      }]
    *    }
    *  }
    */

    // attempt number
    var attemptNum = self.taskData.options.attempts,
        userAttempt = 0;

    self.taskText = self.taskData.exs.taskText;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: false
    };

    angular.element(document).ready(function () {
      var itemList = $($element).find(".sortable-box__item");
      var basketsList = $($element).find(".sortable-box");

      $($element).find('.sortable-box__item').draggable({
        containment: ".sortable-container",
        refreshPositions: true,
        revert: true
      });
      $($element).find('.sortable-box').droppable({
        drop: function drop(event, ui) {
          var overBlock = $(event.target).find('.sortable-box__item'),
              overBlockContent = overBlock.html(),
              prevNumber = ui.draggable.attr("data-number"),
              newNumber = overBlock.attr("data-number"),
              topPos = $(basketsList[prevNumber]).position().top - overBlock.position().top,
              leftPos = $(basketsList[prevNumber]).position().left - overBlock.position().left;

          overBlock.html(ui.draggable.html()).css({ 'z-index': 10000 });
          ui.draggable.html(overBlockContent);
        }
      });
      self.checkAnswer = function () {
        var answerList = $($element).find(".sortable-box__item");

        self.btnDisabledState.restart = false;
        self.btnDisabledState.answer = true;

        userAttempt === attemptNum ? userAttempt = 0 : userAttempt++;

        for (var i = 0; i < answerList.length; i++) {
          // console.log(i, $.trim($(answerList[i]).html().replace(/'/g, '"')));
          // console.log(i, $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"')));
          if ($.trim($(answerList[i]).html().replace(/'/g, '"')) !== $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"'))) {
            self.taskData.exs.variant[i].answer = false;
          } else {
            self.taskData.exs.variant[i].answer = true;
          }
        }
        // console.log('=>',self.taskData.exs.variant.filter((elem) => elem.answer === true).length)
        // console.log('=>',self.taskData.exs.variant.length)
        console.log('=>', userAttempt);
        if (self.taskData.exs.variant.filter(function (elem) {
          return elem.answer === true;
        }).length === self.taskData.exs.variant.length) {
          // верно
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[0], true);
        } else {

          if (userAttempt === attemptNum) {
            showAnswer();
          }

          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[userAttempt], false);
        }
      };

      self.removeRestart = function () {
        self.btnDisabledState.restart = true;
        self.btnDisabledState.answer = false;

        var numberList = _.shuffle(_.range(basketsList.length));
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[numberList[i]].content);
        };
        self.taskData.exs.variant.forEach(function (elem) {
          return elem.answer = "";
        });
      };
      self.removeRestart();

      var showAnswer = function showAnswer() {
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[i].content);
          self.taskData.exs.variant[i].answer = true;
        }
      };
    });
  };
})();
;(function () {
  'use strict';

  SwapListCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskSwapList', {
    templateUrl: 'js/components/task-swap-list/taskSwapListTmpl.html',
    controller: 'SwapListCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListCtrl', SwapListCtrl);

  /* @ngInject */
  function SwapListCtrl($scope, $stateParams, staticService, userService) {
    var _this30 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var i = 0; i < this.taskExs.length; i++) {
        this.taskExs[i].questionList = _.shuffle(this.taskExs[i].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this30.userAttempt === _this30.attemptNum) {
        _this30.userAttempt = 0;
      }
      _this30.userAttempt++;
      _this30.state = 2;
      $(".task-swap-list_item").draggable('disable');

      var taskList = document.querySelectorAll('.task-swap-list');

      for (var _i33 = 0; _i33 < _this30.taskData.exs.length; _i33++) {
        var list = taskList[_i33].querySelectorAll('.task-swap-list_item');

        for (var j = 0; j < _this30.taskData.exs[_i33].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this30.taskData.exs[_i33].questionList[j].order) {
            // неправильно дан ответ
            if (_this30.userAttempt == _this30.attemptNum && _this30.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this30.taskData.messages[_this30.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this30.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this30.state = 1;
      _this30.showRight = 0;
      $(".task-swap-list_item").draggable('enable');

      // мешаем вопросы
      if (_this30.taskOptions.shuffle) {
        for (var _i34 = 0; _i34 < _this30.taskExs.length; _i34++) {
          _this30.taskExs[_i34].questionList = _.shuffle(_this30.taskExs[_i34].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this30.showRight = 1;
    };

    angular.element(document).ready(function () {
      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {},
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  }; // end of SwapListCtrl()
})();
;(function () {
  'use strict';

  SwapListPrezCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskSwapListPrez', {
    templateUrl: 'js/components/task-swap-list-prez/taskSwapListPrezTmpl.html',
    controller: 'SwapListPrezCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListPrezCtrl', SwapListPrezCtrl);

  /* @ngInject */
  function SwapListPrezCtrl($scope, $stateParams, staticService, userService) {
    var _this31 = this;

    // TODO:
    var items2 = [];
    var items3 = [];
    this.itemsS = [];
    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    items2 = this.taskData.exs; // obj
    //console.log('tasklabel - *********----------------',items2[0].questionList[0].label);
    function readNotes() {
      for (var k = 0; k < 4; k++) {
        var items = [];
        items[0] = items2[0].questionList[k].label[0];
        items[1] = items2[0].questionList[k].label[1];
        items3[k] = items;
      }
    }

    readNotes();
    this.itemsS = items3;
    console.log('this.itemsS********------', this.itemsS[0][0]);
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var i = 0; i < this.taskExs.length; i++) {
        this.taskExs[i].questionList = _.shuffle(this.taskExs[i].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListPrezCtrl:: checkAnswer:')
      if (_this31.userAttempt === _this31.attemptNum) {
        _this31.userAttempt = 0;
      }
      _this31.userAttempt++;
      console.log('this.userAttempt----------', _this31.userAttempt
      //if (this.userAttempt === 3) {
      //  this.userAttempt = 0;
      //}
      );_this31.state = 2;
      $(".task-swap-list_item").draggable('disable');

      var taskList = document.querySelectorAll('.task-swap-list');

      for (var _i35 = 0; _i35 < _this31.taskData.exs.length; _i35++) {
        var list = taskList[_i35].querySelectorAll('.task-swap-list_item');

        for (var j = 0; j < _this31.taskData.exs[_i35].questionList.length; j++) {
          // console.log('SwapListPrezCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this31.taskData.exs[_i35].questionList[j].order) {
            // неправильно дан ответ
            if (_this31.userAttempt == _this31.attemptNum && _this31.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this31.taskData.messages[_this31.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this31.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this31.state = 1;
      _this31.showRight = 0;
      $(".task-swap-list_item").draggable('enable');

      // мешаем вопросы
      if (_this31.taskOptions.shuffle) {
        for (var _i36 = 0; _i36 < _this31.taskExs.length; _i36++) {
          _this31.taskExs[_i36].questionList = _.shuffle(_this31.taskExs[_i36].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this31.showRight = 1;
    };

    angular.element(document).ready(function () {
      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {},
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  }; // end of SwapListPrezCtrl()
})();
;(function () {
  'use strict';

  taskTextInput1Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskTextInput1', {
    templateUrl: 'js/components/task-text-input/task-text-input-1/taskTextInput1Tmpl.html',
    controller: 'taskTextInput1Ctrl',
    controllerAs: '$ctrl'
  }).controller('taskTextInput1Ctrl', taskTextInput1Ctrl);

  /* @ngInject */
  function taskTextInput1Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this32 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.taskData = staticService.getData($stateParams, 'data'); // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs))[0]; // arr

    // console.log('taskTextInput1Ctrl::', this.taskData)

    this.userAttempt = 0;
    this.attemptNum = this.taskData.options.attempts;

    this.checkAnswer = function () {
      if (_this32.state == 2) {
        return;
      }

      if (_this32.userAttempt === _this32.attemptNum) {
        _this32.userAttempt = 0;
      }
      _this32.userAttempt++;
      _this32.state = 2;

      var inputs = document.getElementsByClassName('task-input');

      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this32.taskExs.questionList.length; j++) {
        // console.log('taskTextInput1Ctrl:: =>',inputs[j].value,  this.taskExs.questionList[j].label)
        if (inputs[j].value != _this32.taskExs.questionList[j].label) {
          // неправильный ответ
          if (_this32.userAttempt == _this32.attemptNum) {
            // console.log('taskTextInput1Ctrl:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          // to staticService (индекс, заголовок, тело соощения)
          staticService.showModal('exercise', 'Ваш результат', _this32.taskData.messages[_this32.userAttempt], false);
          return;
        }
      }
      // }
      // правильный ответ
      _this32.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this32.taskData.messages[0], true);
    };

    this.removeRestart = function () {
      _this32.state = 1;
      // this.userAttempt = 0;
      var inputs = document.getElementsByClassName('task-input');
      for (var i = 0; i < inputs.length; i++) {
        inputs[i].value = '';
      }
    };

    var showAnswer = function showAnswer() {
      var inputs = document.getElementsByClassName('task-input');
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this32.taskExs.questionList.length; j++) {
        inputs[j].value = _this32.taskExs.questionList[j].label;
      }
      // }
    }; // end of showAnswer()

    // angular.element(document).ready( () => {} )
  }
})();