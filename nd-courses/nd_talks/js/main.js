"use strict";

var _data;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
*   пример упражнения singleChoice:
*    {
*      "id": 2,
*      "title": "Упражнение №1",
*      "location": "page02",
*      "hasSound": false,
*      "type": "exercise",
*      "data": {
*        "attempts": 3,  // кол-во попыток
*        "shuffle": true,  // мешать ответы?
*        "showAnswer": false, // показывать правильный ответ в конце
*        "taskText": "Упражнение на одиночный выбор, какой ответ верный?",
*        "questionList": [{
*          "label": "Правильный ответ",
*          "right": 1
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        }],
*      "messages": ["Правильный ответ!",
*                  "Ответ неверный!"]
*      }
*    }
*
*
*   звук страниц укладывать в папку audio страницы, файл звука должен иметь название:
*   «page-папка главы-папка страницы.mp3» Пример: page-chapter04-page04.mp3
*/
var courseStructure = {
  "course": "Эффективное общение по телефону",
  "description": "Модульный курс для дистанционного обучения",
  "chapters": [{
    "chapter_id": 1,
    "chapter_location": "chapter01",
    "title": "Введение",
    "description": "Эффективное общение по телефону",
    "pages": [{
      "page_id": 1, //01
      "title": "Эффективное общение по телефону",
      "location": "page01",
      "hasSound": true,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //02
      "title": "Введение",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //03
      "title": "Как построено обучение",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //04
      "title": "Предварительный тест",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //05
      "title": "Предварительное тестирование",
      "location": "page05",
      "hasSound": false,
      "type": "test",
      "data": {
        "messages": [""]
      }
    }] // end of pages array in chapter 1 (intro)
  }, // end of chapter
  {
    "chapter_id": 2,
    "chapter_location": "chapter02",
    "title": "Глава 1",
    "description": "Входящие звонки",
    "pages": [{
      "page_id": 1, //06
      "title": "Входящие звонки",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //07
      "title": "Умение правильно отвечать на звонки",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //08
      "title": "Телефонный этикет. Телефонный имидж компании",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //09
      "title": "Задание 1",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Поднимать трубку нужно не позднее:",
          "taskType": "single",
          "questionList": [{
            "label": "1-2-х двух звонков",
            "right": 0
          }, {
            "label": "2-3-х звонков ",
            "right": 1
          }, {
            "label": "3-4-х звонков",
            "right": 0
          }]
        }, {
          "taskText": "Что нужно обязательно сделать, подняв трубку?",
          "taskType": "multi",
          "questionList": [{
            "label": "поздороваться",
            "right": 1
          }, {
            "label": "назвать компанию ",
            "right": 1
          }, {
            "label": "представиться ",
            "right": 1
          }]
        }, {
          "taskText": "Как лучше всего дать понять, что вы слушаете абонента?",
          "taskType": "single",
          "questionList": [{
            "label": "«Говорите»",
            "right": 0
          }, {
            "label": "«Слушаю вас» ",
            "right": 1
          }, {
            "label": "«Алло»",
            "right": 0
          }]
        }],
        "messages": ["Поздравляем! Вы отлично разбираетесь в правилах телефонного этикета.", "Некоторые правила телефонного этикета нарушены. Попробуйте ответить на вопросы еще раз.", "Увы, вряд ли вам удастся договориться с клиентом подобным образом. Выполните задание снова.", "К сожалению, с заданием вы не справились. посмотрите правильный ответ."]
      }
    }, {
      "page_id": 5, //10
      "title": "Задание 2",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "В процессе разговора по телефону:",
          "questionList": [{
            "label": "никакой фоновый шум недопустим ",
            "right": 1
          }, {
            "label": "можно перекладывать бумаги",
            "right": 0
          }, {
            "label": "можно спросить что-то у коллеги, если вы не владеете всей информацией",
            "right": 0
          }]
        }, {
          "taskText": "При переадресации звонка:",
          "questionList": [{
            "label": "нужно обязательно кратко изложить суть вопроса тому сотруднику, которому вы переадресовываете звонок ",
            "right": 1
          }, {
            "label": "клиент должен сам повторно объяснить, чего он хочет, поскольку при передаче часть информации может исказиться",
            "right": 0
          }]
        }],
        "messages": ["Вы абсолютно правы! Вежливость – одно из главных правил телефонного общения. Поэтому при разговоре по телефону фоновый шум не допустим, а клиент не должен по десять раз излагать свой вопрос разным сотрудникам.", "Где-то закралась ошибка. Вспомните, что вежливость – одно из главных правил общения по телефону, и ответьте на вопросы снова.", "Это неверный ответ. У вас есть еще одна попытка для выполнения задания.", "Знать правила общения по телефону нужно любому современному человеку. Посмотрите правильный ответ и запомните эти правила."]
      }
    }, {
      "page_id": 6, //11
      "title": "Задание 3",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Если вы разговариваете по телефону, и в это время зазвонил второй аппарат, вы должны:",
          "questionList": [{
            "label": "прервать разговор с первым абонентом и ответить второму",
            "right": 0
          }, {
            "label": "сообщить первому абоненту, что вам нужно ответить на другой звонок и ответить второму абоненту",
            "right": 0
          }, {
            "label": "спросить разрешения у первого абонента ответить на второй звонок, поблагодарить за согласие и очень кратко ответить второму абоненту ",
            "right": 1
          }]
        }, {
          "taskText": "Если в процессе телефонного разговора с клиентом вам нужно получить информацию от другого сотрудника, вы:",
          "questionList": [{
            "label": "воспользуетесь кнопкой «Hold» ",
            "right": 1
          }, {
            "label": "прикроете микрофон рукой",
            "right": 0
          }, {
            "label": "попросите клиента перезвонить вам через пару минут",
            "right": 0
          }, {
            "label": "прервете разговор и сами перезвоните клиенту",
            "right": 0
          }]
        }],
        "messages": ["Все верно! Прерывать разговор с клиентом недопустимо без его согласия. Если вы бросили трубку, клиент вряд ли захочет общаться с вами снова.", "Не совсем так. Вспомните о том, что прерывать разговор без согласия клиента недопустимо, так же как и вести параллельные разговоры с другими сотрудниками.", "Увы, снова ошибка. Представьте себя на месте клиента. Как бы вам хотелось общаться по телефону? Теперь ответьте на вопросы еще раз.", "С заданием вы не справились. Посмотрите и запомните правильный ответ."]
      }
    }, {
      "page_id": 7, //12
      "title": "Задание 4",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Кто должен перезвонить при необходимости повторного разговора?",
          "questionList": [{
            "label": "клиент",
            "right": 0
          }, {
            "label": "сотрудник компании ",
            "right": 1
          }, {
            "label": "не имеет значения",
            "right": 0
          }]
        }, {
          "taskText": "Кто кладет трубку первым?",
          "questionList": [{
            "label": "позвонивший ",
            "right": 1
          }, {
            "label": "тот, кому позвонили",
            "right": 0
          }, {
            "label": "не имеет значения",
            "right": 0
          }]
        }, {
          "taskText": "Если разговор прервался, кто должен перезвонить?",
          "questionList": [{
            "label": "инициатор разговора  ",
            "right": 1
          }, {
            "label": "тот, кому позвонили",
            "right": 0
          }, {
            "label": "не имеет значения",
            "right": 0
          }]
        }],
        "messages": ["Верно! Есть общее правило: перезванивать при прерывании звонка и заканчивать разговор должен всегда инициатор разговора.", "Не совсем верно. Есть общее правило: перезванивать при прерывании звонка и заканчивать разговор должен всегда инициатор разговора.", "И снова ошибка. Наверное, вы редко звоните по телефону.", "Посмотрите правильный ответ и не совершайте больше подобных ошибок."]
      }
    }, {
      "page_id": 8, //13
      "title": "Завершающий этап разговора",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //14
      "title": "Записная книжка. Задание 1",
      "location": "page09",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Фразы для вашего лексикона"
        }],
        "questionList": [{
          "label": 'Спасибо за заказ! ',
          "marker": -1
        }, {
          "label": "Я рад, что мы смогли вам помочь. ",
          "marker": -1
        }, {
          "label": "Очень было приятно поговорить с вами. ",
          "marker": -1
        }, {
          "label": "Спасибо за звонок!",
          "marker": -1
        }, {
          "label": "Звоните нам в любое время.",
          "marker": -1
        }, {
          "label": "Если у вас возникнут вопросы, пожалуйста, звоните.",
          "marker": -1
        }, {
          "label": "Звоните, будем рады ответить на все ваши вопросы.",
          "marker": -1
        }, {
          "label": "Спасибо, что обратились в нашу компанию!",
          "marker": -1
        }]
      }
    }, {
      "page_id": 10, //15
      "title": "Телефонный имидж компании",
      "location": "page10",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 11, //16
      "title": "Каким должен быть ваш голос?",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //17
      "title": "Задание 5",
      "location": "page12",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Прослушайте аудиофрагменты. <br/>Выберите вариант наиболее подходящего звучания голоса.",
        "questionList": [{
          "label": "audio/a1.mp3",
          "right": 0
        }, {
          "label": "audio/a2.mp3",
          "right": 0
        }, {
          "label": "audio/a3.mp3",
          "right": 0
        }, {
          "label": "audio/a4.mp3",
          "right": 0
        }, {
          "label": "audio/a5.mp3",
          "right": 1
        }],
        "messages": ["Правильный выбор! Ваша речь по телефону должна быть уверенной, внятной и в среднем темпе.", "К сожалению, вы ошиблись. Вспомните о том, что речь по телефону должна быть уверенной, внятной и в среднем темпе.", "Неверно! Слишком мрачный, небрежный или невнятный стиль общения – не совсем то, чего ожидает клиент при телефонном разговоре. Ответьте на вопрос снова.", "Речь по телефону должна быть уверенной, внятной и в среднем темпе. Это правило обязательно пригодится вам!"]
      }
    }, {
      "page_id": 13, //18
      "title": "Записная книжка. Задание 2",
      "location": "page13",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 24,
        "useColumns": true, "maxlength": 10,
        "titles": ['Спокойный', 'Уверенный', 'С выразительными интонациями', 'Низкий', 'Не тихий и не громкий', 'Дружелюбный'],
        "messages": [""]
      }
    }, {
      "page_id": 14, //19
      "title": "Имидж компании в телефонном разговоре",
      "location": "page14",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 15, //20
      "title": "Задание 6",
      "location": "page15",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "У Ольги сложилось впечатление, что Константин настроен помочь.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Константин внимательно слушал Ольгу.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Константин был вежлив.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Константин давал полные и точные сведения.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Константин, в конечном счете, понял проблему Ольги. ",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "У Ольги сложилось впечатление, что Константин ее понял.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "Ольга купит пластиковую карту в этом банке.",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }],
        "messages": ["Совершенно верно! Вряд ли Ольга купит теперь пластиковую карту в этом банке.", "Вы дали неправильный ответ. Пересмотрите эпизод внимательнее и выполните задание снова.", "Вы снова ошиблись. Константин допустил ряд промахов, хотя, в конечном счете, и понял Ольгу.", "Посмотрите правильный ответ. Лучше учиться на чужих ошибках! Не допускайте подобных промахов в своей деятельности. "]
      }
    }, {
      "page_id": 16, //21
      "title": "Задание 7",
      "location": "page16",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": 8, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Отрицательное"
        }, {
          "id": 1,
          "label": "Положительное "
        }],
        "questionList": [{
          "label": 'Доброе утро, компания "NNN", Анна Кравцова, слушаю вас.',
          "right": 1
        }, {
          "label": "К сожалению, Инны Федоровны нет: она сегодня болеет.",
          "right": 0
        }, {
          "label": "Спасибо за заказ. Надеюсь, и в следующий раз вы обратитесь к нам снова. До свидания.",
          "right": 1
        }, {
          "label": "Я действительно не знаю, почему наш сотрудник не перезвонил вам. А вы не пробовали сами позвонить ему?",
          "right": 0
        }, {
          "label": "Она задерживается на встрече, у нее возникли проблемы с клиентом. Может, ей что-то передать?",
          "right": 0
        }, {
          "label": "Доброе утро, сервисный отдел.",
          "right": 0
        }, {
          "label": "Я сразу же передала ваш заказ в отдел доставки. Я не знаю, почему они вам не звонят.",
          "right": 0
        }, {
          "label": "Извините, я этим не занимаюсь. Вам нужно позвонить в отдел заказов.",
          "right": 0
        }],
        "messages": ["1", "2", "3", "4"]
      }
    }, {
      "page_id": 17, //22
      "title": "Задание 8",
      "location": "page17",
      "hasSound": false,
      "type": "note_exercise",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 6,
        "useColumns": false, "maxlength": 100,
        "titles": ["ОТВЕТ НА ЗВОНОК КЛИЕНТА", "ВАШ ВАРИАНТ"],
        "questionList": [{
          "label": "Извините, но, к сожалению, сегодня Инны Федоровны нет: она больна.",
          "right": 0
        }, {
          "label": "Я действительно не знаю, почему наш сотрудник не перезвонил вам. А вы не пробовали сами позвонить ему?",
          "right": 0
        }, {
          "label": "Она задерживается на встрече, у нее возникли проблемы с клиентом. Может, ей что-то передать?",
          "right": 0
        }, {
          "label": "Доброе утро, сервисный отдел.",
          "right": 0
        }, {
          "label": "Я сразу же передала ваш заказ в отдел доставки. Я не знаю, почему они вам не звонят.",
          "right": 0
        }, {
          "label": "Извините, я этим не занимаюсь. Вам нужно позвонить в отдел заказов.",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 18, //23
      "title": "Сравнение",
      "location": "page18",
      "hasSound": false,
      "type": "simple_page",
      "data": {
        "task_fields": 6,
        "chapter_id": 1, // это chapter_id айдишник главы.
        "note_id": 17, // это page_id той страницы откуда берется столбец записей юзера.
        "note_volume": 6, // это сколько полей читать из записи юзера.
        "note_count": 0, // начиная с кокого поля  полей читать из записи юзера.
        "useColumns": true, "maxlength": 50,
        "titles": ["ПРЕДЛАГАЕМЫЙ ОТВЕТ", "ВАШ ВАРИАНТ"],
        "questionList": [{
          "label": "К сожалению, Инна Федоровна сейчас не может подойти к телефону. Может быть, я смогу вам помочь?",
          "right": 0
        }, {
          "label": "Извините, что наш сотрудник не смог перезвонить вам. Чем я могу вам помочь?",
          "right": 0
        }, {
          "label": "Оставьте ваши координаты, я попрошу Елену Сергеевну с вами связаться сразу же, как только она освободится.",
          "right": 0
        }, {
          "label": "Доброе утро, сервисный отдел, Иван Петров, слушаю вас.",
          "right": 0
        }, {
          "label": "Я приношу вам извинения за задержку доставки. Я сейчас все выясню и вам перезвоню.",
          "right": 0
        }, {
          "label": "На ваш вопрос ответят в отделе заказов, обратитесь к диспетчеру Ивану Петрову, я сейчас вас переключу на него (или: телефон Ивана Петрова 257-75-98).",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 19, //24
      "title": "Комментарии",
      "location": "page19",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 20, //25
      "title": "Комментарии",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //26
      "title": "Комментарии",
      "location": "page21",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 22, //27
      "title": "Записная книжка. Задание 3",
      "location": "page22",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 8,
        "useColumns": true,
        "maxlength": 60,
        "titles": ['ОТВЕТ СОТРУДНИКА КОМПАНИИ:', 'ВАШ ВАРИАНТ ОТВЕТА:'],
        "messages": [""]
      }
    }, {
      "page_id": 23, //28
      "title": "Задание 9",
      "location": "page23",
      "hasSound": false,
      "type": "note_exercise",
      "data": {
        "task_fields": 7,
        "useColumns": false,
        "maxlength": 40,
        "titles": ['БЛАНК ДЛЯ ПРИЕМА ТЕЛЕФОННОГО СООБЩЕНИЯ'],
        "messages": [""]
      }
    }, {
      "page_id": 24, //29
      "title": "Комментарии",
      "location": "page24",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 25, //30
      "title": "Записная книжка. Задание 4",
      "location": "page25",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 14,
        "useColumns": true,
        "maxlength": 60,
        "titles": ['БЛАНК ДЛЯ ПРИЕМА ТЕЛЕФОННОГО СООБЩЕНИЯ', 'ДАННЫЕ'],
        "messages": [""]
      }
    }, {
      "page_id": 26, //31
      "title": "Эффективные консультации по телефону",
      "location": "page26",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 27, //32
      "title": "Задание 10",
      "location": "page27",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Киноэпизод ",
              "q_id": 0,
              "video": "r40"
            }],
            "variants": [{
              "label": "Консультант не воспринял смысл сообщения",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Консультант не уловил эмоции",
              "v_id": 0,
              "q_id": -1
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Киноэпизод",
              "q_id": 0,
              "video": "r5"
            }],
            "variants": [{
              "label": "Консультант не воспринял смысл сообщения  ",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Консультант не уловил эмоции ",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Вы дали верный ответ! В первом случае консультант не воспринял смысл сообщения, а во втором – не уловил эмоции.", "Вы перепутали, в каком случае консультант не воспринял смысл сообщения, а где – не уловил эмоции. Попробуйте еще раз.", "Неверно! Посмотрите киноэпизоды внимательнее и выполните задание снова.", "И снова ошибка! Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 28, //33
      "title": "Комментарии",
      "location": "page28",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 29, //34
      "title": "Задание 11",
      "location": "page29",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Эхо-пересказ",
          "right": 0
        }, {
          "label": "Пересказ-резюме ",
          "right": 1
        }],
        "messages": ["Ваш ответ абсолютно верный! Менеджер использовала технику пересказ-резюме.", "Вы ошиблись. Менеджер использовала другую технику пересказа.", "И снова ошибка! Будьте внимательнее.", "Увы, с заданием вы не справились. В данной ситуации менеджер использовала технику пересказа-резюме."]
      }
    }, {
      "page_id": 30, //35
      "title": "Задание 12",
      "location": "page30",
      "hasSound": false,
      "type": "note_exercise",
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 1,
        "useColumns": false, "maxlength": 1000,
        "titles": ['ОСНОВНАЯ ИНФОРМАЦИЯ'],
        "messages": [""]
      }
    }, {
      "page_id": 31, //36
      "title": "Открытые и закрытые вопросы",
      "location": "page31",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 32, //37
      "title": "Задание 13",
      "location": "page32",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Вы узнали о компании из газетной рекламы?",
          "right": 0
        }, {
          "label": "Как вы узнали о нашей компании?",
          "right": 1
        }, {
          "label": "Какие преимущества имеет работа с внешними провайдерами?",
          "right": 1
        }, {
          "label": "Вы часто пользуетесь услугами внешних провайдеров?",
          "right": 0
        }, {
          "label": "Как вы предпочитаете путешествовать?",
          "right": 1
        }, {
          "label": "Вы в первый раз отправляете ребенка за рубеж?",
          "right": 0
        }, {
          "label": "Чем обычно занимается ваш ребенок в свободное время?",
          "right": 1
        }, {
          "label": "Каких сотрудников вы планируете обучать в первую очередь?",
          "right": 1
        }],
        "messages": ["Вы совершенно верно определили открытые вопросы. Теперь смело можете приступать к практике.", "Вы перепутали открытые и зарытые вопросы. Попробуйте еще раз!", "Где-то закралась ошибка. Вспомните, что открытые вопросы побуждают дать развернутый ответ.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 33, //38
      "title": "Сравнение",
      "location": "page33",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 34, //39
      "title": "Задание 14",
      "location": "page34",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Внимательно слушать клиента и запоминать информацию о его потребностях. ",
          "right": 1
        }, {
          "label": "Прежде чем что-то объяснять, надо уточнить потребности, собрать полную информацию, задавая вопросы. ",
          "right": 1
        }, {
          "label": "Говорить четко, не торопясь, рассчитывая, что ваш собеседник ведет записи. ",
          "right": 1
        }, {
          "label": "Проверить правильность понимания собеседником ваших объяснений.  ",
          "right": 1
        }, {
          "label": "Избегать специальных терминов или специально их объяснять.",
          "right": 0
        }, {
          "label": "Делать паузы для ответов собеседника.",
          "right": 0
        }, {
          "label": "Говорить только то, в чем уверен. ",
          "right": 1
        }, {
          "label": "Нельзя поучать, говорить «свысока», допускать фамильярности при общении с клиентом. ",
          "right": 1
        }],
        "messages": [" Вы правы. Действительно, в этом эпизоде консультант нарушил множество правил…", "Не совсем так. Попробуйте ответить еще раз, учитывая, что консультант в этом эпизоде нарушил множество правил.", "И снова ошибка… Константин слушал клиента невнимательно, перебивал его, поучал, говорил свысока и допустил еще ряд ошибок.", "С заданием вы не справились. Запомните правильный ответ."]
      }
    }, {
      "page_id": 35, //40
      "title": "Задание 15",
      "location": "page35",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Отправить дочь в Грецию",
          "right": 0
        }, {
          "label": "Отправить дочь в Турцию",
          "right": 0
        }, {
          "label": "Отправить дочь на дачу к бабушке  ",
          "right": 1
        }],
        "messages": ["Все верно! При таком неграмотном консультировании Ольге остается только отправить дочку на дачу…", "Не совсем так. Консультирование было довольно неудачным… Попробуйте еще раз.", "Будьте внимательнее. После такого разговора вряд ли Ольга захочет отправить дочь за границу.", "А теперь обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 36, //42
      "title": "Задание 16",
      "location": "page36",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Презентация более убедительна, если строится в режиме:",
          "questionList": [{
            "label": "монолога",
            "right": 0
          }, {
            "label": "диалога с клиентом ",
            "right": 1
          }]
        }, {
          "taskText": "С чего лучше всего начать презентацию товара или услуги клиенту:",
          "questionList": [{
            "label": "с наиболее ярких деталей и впечатляющих фактов",
            "right": 0
          }, {
            "label": "с того, что больше всего волнует клиента ",
            "right": 1
          }, {
            "label": "с положительных отзывов других клиентов",
            "right": 0
          }]
        }, {
          "taskText": "Чем больше говорит сотрудник в процессе презентации, тем лучше.",
          "questionList": [{
            "label": "да ",
            "right": 0
          }, {
            "label": "нет",
            "right": 1
          }]
        }],
        "messages": ["Верно! Вы отлично знаете правила презентации.", "Не совсем так. Повторите правила консультирования и выполните задание снова.", "Где-то закралась ошибка… Вспомните, что диалог всегда более продуктивен, и важно использовать то, что больше всего волнует клиента.", "Увы, с заданием вы не справились. Запомните правила презентации: они пригодятся вам в работе."]
      }
    }, {
      "page_id": 37, //42
      "title": "Задание 17",
      "location": "page37",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "У вас есть дорогой, средний по цене и дешевый товар (услуга). Какому алгоритму представления товаров вы будете следовать?",
          "taskType": "single",
          "questionList": [{
            "label": "Начинать с самого дорогого предложения, затем переходить к дешевому, заканчивать – средним по цене.",
            "right": 0
          }, {
            "label": "Начинать с предложения среднего по цене, затем переходить к более дорогому, заканчивать – самым дешевым. ",
            "right": 1
          }, {
            "label": "Начинать с самого дешевого предложения, затем переходить к среднему и заканчивать самым дорогим",
            "right": 0
          }]
        }, {
          "taskText": "Перед презентацией необходимо уточнить запрос клиента.",
          "taskType": "single",
          "questionList": [{
            "label": "да",
            "right": 1
          }, {
            "label": "нет",
            "right": 0
          }]
        }],
        "messages": ["Все верно! Начинать нужно со среднего по цене предложения, а заканчивать – самым дешевым.", "Ваш ответ неверный! В презентации важно опираться на запросы клиента.", "И снова ошибка. Попробуйте изменить порядок представления товаров.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 38, //43
      "title": "Правила телефонной презентации",
      "location": "page38",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 39, //44
      "title": "Правила телефонной презентации",
      "location": "page39",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 40, //45
      "title": "Задание 18",
      "location": "page40",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Остался ли клиент доволен состоявшимся разговором?",
          "taskType": "single",
          "questionList": [{
            "label": "да",
            "right": 1
          }, {
            "label": "нет",
            "right": 0
          }]
        }, {
          "taskText": "Был ли клиент готов к покупке?",
          "taskType": "single",
          "questionList": [{
            "label": "да",
            "right": 1
          }, {
            "label": "нет",
            "right": 0
          }]
        }, {
          "taskText": "Почему продажа не состоялась? ",
          "taskType": "multi",
          "questionList": [{
            "label": "сотрудница невнимательно слушала",
            "right": 0
          }, {
            "label": "сотрудница не уточнила потребности клиентки",
            "right": 0
          }, {
            "label": "сотрудница была не уверена в информации, которую сообщала",
            "right": 0
          }, {
            "label": "сотрудница не предложила записать координаты банка",
            "right": 1
          }, {
            "label": "сотрудница не предложила клиентке сделать следующий шаг – подъехать в банк и оформить карточки",
            "right": 1
          }]
        }],
        "messages": ["Вы правы! Продажа не состоялась лишь потому, что сотрудница банка не предложила клиентке подъехать в офис или хотя бы записать координаты банка.", "Ваш ответ неверный. Продажа почти состоялась: Ольга осталась довольна консультированием. Нужно было лишь перейти от слов к делу…", "Не совсем так. Будьте внимательнее и выполните задание снова.", "Посмотрите правильный ответ. В данной ситуации важно было не только квалифицированно проконсультировать клиента, но и подтолкнуть его к действию."]
      }
    }, {
      "page_id": 41, //46
      "title": "Как сообщать неприятные новости",
      "location": "page41",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 42, //47
      "title": "Задание 19",
      "location": "page42",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Дождаться, пока клиент позвонит вам, и при этом сообщить ему неприятную новость.",
          "right": 0
        }, {
          "label": "Самому первым позвонить клиенту. ",
          "right": 1
        }],
        "messages": ["Вы правы! Сообщать неприятные известия психологически тяжело, поэтому каждый из нас подсознательно оттягивает этот момент. Однако, взяв инициативу в свои руки, можно сгладить негативное впечатление клиента через особую «подачу» неприятных новостей.", "Не совсем так. В любом негативном событии всегда можно найти что-то положительное… Попробуйте еще раз.", "И снова ошибка. Учтите, что взяв инициативу в свои руки, можно сгладить негативное впечатление клиента через особую «подачу» неприятных новостей. Этот навык полезен не только в деловой, но и в личной жизни.", "Увы, с заданием вы не справились. В данной ситуации нужно взять инициативу в свои руки и самому позвонить клиенту."]
      }
    }, {
      "page_id": 43, //48
      "title": "Задание 20",
      "location": "page43",
      "hasSound": false,

      "type": "note_exercise",
      // "type": "note_page", меняем тип
      "typeNote": "note_exercise",
      "data": {
        "task_fields": 6,
        "useColumns": false, "maxlength": 300,
        "titles": ["ВАШ ВАРИАНТ", "СИТУАЦИЯ"],
        "questionList": [{
          "label": "Вы вынуждены тратить время в ожидании",
          "right": 0
        }, {
          "label": "Вы считаете себя не очень хорошим продавцом",
          "right": 0
        }, {
          "label": "Вы зарабатываете меньше денег, чем вам хотелось бы",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 44, //49
      "title": "Сравнение-1",
      "location": "page44",
      "hasSound": "false",
      //"type": "note_page",
      "type": "simple_page",
      "data": {
        "task_fields": 18,
        "chapter_id": 1, // это chapter_id айдишник главы.
        "note_id": 43, // это page_id той страницы откуда берется столбец записей юзера.
        "note_volume": 2, // это сколько полей читать из записи юзера.
        "note_count": 0, // начиная с кокого поля  полей читать из записи юзера.
        "useColumns": true, "maxlength": 50,
        "titles": ["ПРЕДЛАГАЕМЫЕ ВАРИАНТЫ", "ВАШ ВАРИАНТ"],
        "questionList": [{
          "label": "У вас появилось дополнительное время, которое можно использовать в своих целях. В зависимости от ситуации и исходя из ваших личных пристрастий, вы можете, например, еще раз продумать план предстоящей встречи, просто почитать книгу, отдохнуть, учить иностранный язык, решать головоломки и т.д.",
          "right": 0
        }, {
          "label": "Если вы ожидаете, например, встречи, где должен решиться какой-то важный вопрос, то увеличиваются шансы положительного решения. Как правило, многие люди чувствуют себя неудобно из-за того, что заставили кого-то долго ждать, это делает их более уступчивыми и доброжелательными.",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 45, //50
      "title": "Сравнение-2",
      "location": "page45",
      "hasSound": "false",
      //"type": "note_page",
      "type": "simple_page",
      "data": {
        "task_fields": 18,
        "chapter_id": 1, // это chapter_id айдишник главы.
        "note_id": 43, // это page_id той страницы откуда берется столбец записей юзера.
        "note_volume": 2, // это сколько полей читать из записи юзера.
        "note_count": 2, // начиная с кокого поля  полей читать из записи юзера.
        "useColumns": true, "maxlength": 50,
        "titles": ["ПРЕДЛАГАЕМЫЕ ВАРИАНТЫ", "ВАШ ВАРИАНТ"],
        "questionList": [{
          "label": "Считать себя недостаточно профессиональным – это хорошо. Только трезвые и самокритичные люди умеют признавать свое несовершенство и стремятся постоянно оттачивать свои навыки. В настоящий момент вы просто на полпути к вершине!",
          "right": 0
        }, {
          "label": "Если ваш внутренний голос постоянно говорит вам, что вы никогда не станете хорошим продавцом, возможно, вы просто зарываете в землю какой-то другой талант. Прислушайтесь к нему, и вместо того, чтобы впустую тратить время, не упустите шанс реализоваться в другой профессии.",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 46, //51
      "title": "Сравнение-3",
      "location": "page46",
      "hasSound": "false",
      //"type": "note_page",
      "type": "simple_page",
      "data": {
        "task_fields": 18,
        "chapter_id": 1, // это chapter_id айдишник главы.
        "note_id": 43, // это page_id той страницы откуда берется столбец записей юзера.
        "note_volume": 2, // это сколько полей читать из записи юзера.
        "note_count": 4, // начиная с кокого поля  полей читать из записи юзера.
        "useColumns": true, "maxlength": 50,
        "titles": ["ПРЕДЛАГАЕМЫЕ ВАРИАНТЫ", "ВАШ ВАРИАНТ"],
        "questionList": [{
          "label": "Возможно, это шанс научиться ограничивать свои потребности. (Счастлив не тот, у кого много денег, а тот, кому их хватает.)",
          "right": 0
        }, {
          "label": "Внутреннее состояние, когда вам хочется зарабатывать все больше и больше денег, несмотря на то, что ваша зарплата и так постоянно увеличивается, может свидетельствовать о вашем сильном стремлении к независимости и выраженных предпринимательских способностях. Ведь только работая на себя, можно действительно заработать ту сумму, которая вас устроит.",
          "right": 0
        }],
        "messages": [""]
      }
    }, {
      "page_id": 47, //52
      "title": "Задание 21",
      "location": "page47",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Там нет очередей ",
          "right": 1
        }, {
          "label": "Современное оборудование ",
          "right": 1
        }, {
          "label": "Специалисты из лучших поликлиник ",
          "right": 1
        }, {
          "label": "Гарантированное качество услуг ",
          "right": 1
        }, {
          "label": "Поликлиника находится ближе к клиенту  ",
          "right": 1
        }, {
          "label": "Цены ниже  ",
          "right": 1
        }],
        "messages": ["Все верно! Ольга нашла массу плюсов в такой непростой ситуации.", "Не совсем так. Клиент был расстроен тем, что не попадает в определенную клинику, но консультант нашла массу плюсов и разрешила ситуацию.", "И снова ошибка. Наверное, что-то отвлекло вас. Попробуйте снова!", "В этом задании все ответы верные. Ольга нашла массу плюсов, чтобы сгладить неприятную ситуацию."]
      }
    }, {
      "page_id": 48, //53
      "title": "Резюме",
      "location": "page48",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 2
  }, // end of chapter
  {
    "chapter_id": 3,
    "chapter_location": "chapter03",
    "title": "Глава 2",
    "description": "Исходящие («холодные») звонки – поиск новых клиентов по телефону",
    "pages": [{
      "page_id": 1, //54
      "title": "Исходящие («холодные») звонки – поиск новых клиентов по телефону",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //55
      "title": "Холодные звонки",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //56
      "title": "Задание 22. Процесс подготовки к звонку",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Не слушают собеседника",
          "right": 0
        }, {
          "label": "Говорят слишком быстро",
          "right": 1
        }, {
          "label": "Не владеют всей необходимой информацией",
          "right": 0
        }, {
          "label": "Демонстрируют неуверенность",
          "right": 1
        }, {
          "label": "Стремятся сразу делать подробную презентацию",
          "right": 1
        }, {
          "label": "Направляют звонок не тому, кто, вероятно, заинтересуется их предложением",
          "right": 0
        }, {
          "label": "Задают «неразумные» вопросы",
          "right": 1
        }, {
          "label": "Не интересуются, удобно ли клиенту говорить",
          "right": 1
        }, {
          "label": "Бывают слишком фамильярными",
          "right": 0
        }, {
          "label": "Не объясняют цели звонка",
          "right": 0
        }, {
          "label": "Относятся к клиенту как к очередному «телефонному номеру», а не как к личности",
          "right": 1
        }, {
          "label": "Не проявляют интерес и уважение, несдержанны и многословны",
          "right": 0
        }],
        "messages": ["Все верно! Продавец был неуверен в себе, поэтому допустил много ошибок.", "Ваш ответ не совсем верный. В этой ситуации неуверенность продавца повлекла много ошибок в телефонном диалоге.", "И снова ошибка. Будьте внимательнее.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 4, //57
      "title": "Основные этапы подготовки",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //58
      "title": "Разделение клиентов на группы",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //59
      "title": "Записная книжка. Задание 5",
      "location": "page06",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "useColumns": true, "maxlength": 30,
        "titles": ['КЛИЕНТСКИЕ ГРУППЫ', 'ПРЕИМУЩЕСТВА'],
        "messages": [""]
      }
    }, {
      "page_id": 7, //60
      "title": "Задание 23. Сбор информации",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Профиль компании",
          "right": 1
        }, {
          "label": "Планы развития компании",
          "right": 1
        }, {
          "label": "Количество людей, работающих в компании",
          "right": 1
        }, {
          "label": "Кто вас может порекомендовать",
          "right": 1
        }, {
          "label": "Место компании на рынке",
          "right": 1
        }, {
          "label": "Финансовое положение компании",
          "right": 0
        }, {
          "label": "Лицо, ответственное за принятие решения по вашему вопросу",
          "right": 1
        }],
        "messages": ["Это правильный ответ! На этапе сбора информации важно узнать как можно больше о клиенте. О профиле, размере, планах развития компании, а также ее месте на рынке вы узнаете из бизнес-справочников, газет, журналов и т.д. Через секретаря выясните информацию о лице, ответственном за принятие решения по вашему вопросу. Заранее продумайте, кто может вас порекомендовать.", "Не совсем так. Учтите, что на этапе сбора информации важно узнать как можно больше о клиенте.", "И снова ошибка. Попробуйте снова.", "Посмотрите правильный ответ. Информация о профиле, размере, планах развития компании, а также ее месте на рынке берется из бизнес-справочников, газет, журналов и т.д. Через секретаря можно выяснить информацию о лице, ответственном за принятие решения по вашему вопросу. Нужно также заранее продумать, кто может вас порекомендовать."]
      }
    }, {
      "page_id": 8, //61
      "title": "Формулировка целей звонка",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //62
      "title": "Задание 24",
      "location": "page09",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Вы первый раз звоните клиенту, основная цель – назначить встречу.",
          "taskType": "multi",
          "questionList": [{
            "label": "Познакомиться, рассказать клиенту о выгодах сотрудничества с вашей компанией.",
            "right": 1
          }, {
            "label": "Сообщить, что вы молодая, но очень динамично развивающаяся компания. ",
            "right": 0
          }, {
            "label": "Убедить в необходимости приобретения ваших продуктов/услуг.",
            "right": 0
          }]
        }, {
          "taskText": "Ваша компания давно работает на рынке, активно рекламирует свою продукцию. Клиент, которому вы звоните, никогда не работал/или работал очень давно с вашей компанией. Основная цель разговора – назначить встречу.",
          "taskType": "multi",
          "questionList": [{
            "label": "Узнать, почему отсутствует сотрудничество.",
            "right": 1
          }, {
            "label": "Убедить в необходимости приобретения ваших продуктов/услуг.",
            "right": 0
          }, {
            "label": "Подчеркнуть ваши конкурентные преимущества. ",
            "right": 1
          }]
        }],
        "messages": ["Все верно. Если вы звоните клиенту впервые, важно рассказать о выгодах сотрудничества.", "Не совсем так. Попробуйте еще раз.", "Подумайте еще раз. Сформулировать цели звонка очень важно.", "Посмотрите правильный ответ. Если вы звоните клиенту, который прежде работал с вашей компанией, важно узнать, почему отсутствует сотрудничество и рассказать про конкурентные преимущества."]
      }
    }, {
      "page_id": 10, //63
      "title": "Записная книжка. Задание 6",
      "location": "page10",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "useColumns": true, "maxlength": 30,
        "titles": ['ПОТЕНЦИАЛЬНЫЙ КЛИЕНТ', 'ОСНОВНАЯ:', 'ДОПОЛНИТЕЛЬНАЯ:'],
        "messages": [""]
      }
    }, {
      "page_id": 11, //64
      "title": "Этапы разговора по телефону",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //65
      "title": "Этапы холодного звонка: начало разговора",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 13, //66
      "title": "Задание 25",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "videoPoster": "img/video-01.png",
        "videoUrl": "video/r1.mp4",
        "videoWidth": 640,
        "videoHeight": 480,
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Нет"
        }, {
          "id": 1,
          "label": "Да"
        }],
        "questionList": [{
          "label": "Добрый день, вас беспокоит Иван Сидоров, компания «Свежий ветер»…",
          "right": 0
        }, {
          "label": "Здравствуйте, я звоню из компании «Суперобучение», мы обновляем свою базу данных. Не могли бы вы нам помочь и ответить на несколько вопросов?",
          "right": 0
        }, {
          "label": "Добрый день, меня зовут Ирина, компания «Новый дом». Вам удобно сейчас говорить? ",
          "right": 1
        }, {
          "label": "Здравствуйте, это говорит Петров из компании «Эфстайл». Извините, я не отниму у вас много времени, я только хотел узнать…",
          "right": 0
        }],
        "messages": ["Ваш ответ верный! Если мы называем свой звонок «беспокойством», клиент подумает то же самое. Негативная формулировка «не могли бы вы» подталкивает клиента сказать «нет». Начиная разговор с извинений, мы тем самым сигнализируем клиенту, что «холодный звонок» – это нечто предосудительное, и не стоит этого делать. «Холодный звонок» – часть работы всех, кто занимается продажами. Поэтому не стоит извиняться и демонстрировать позицию «снизу».", "Не совсем верно. Учтите главное – «холодный звонок» – часть работы всех, кто занимается продажами. Поэтому не стоит извиняться и демонстрировать позицию «снизу».", "И снова ошибка. Будьте внимательнее.", "С заданием вы не справились. Если мы называем свой звонок «беспокойством», клиент подумает то же самое. Негативная формулировка «не могли бы вы» подталкивает клиента сказать «нет». Начиная разговор с извинений, мы тем самым сигнализируем клиенту, что «холодный звонок» – это нечто предосудительное, и не стоит этого делать. "]
      }
    }, {
      "page_id": 14, //67
      "title": "Как правильно согласовать время разговора",
      "location": "page14",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 15, //68
      "title": "Записная книжка. Задание 7",
      "location": "page15",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 10,
        "useColumns": true, "maxlength": 30,
        "titles": ['ПОТЕНЦИАЛЬНЫЙ КЛИЕНТ', 'ЦЕЛИ РАЗГОВОРА<br/> СОГЛАСОВАНИЕ ВРЕМЕНИ РАЗГОВОРА'],
        "messages": [""]
      }
    }, {
      "page_id": 16, //69
      "title": "Этапы холодного звонка: ключевые фразы",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //70
      "title": "Задание 26",
      "location": "page17",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "да",
          "right": 0
        }, {
          "label": "нет",
          "right": 1
        }],
        "messages": ["Ваш ответ верный. Продавец обидел потенциального клиента, намекнув на его проблемы.", "Не совсем так. Вряд ли потенциальному клиенту понравились намеки Федора.", "Где-то закралась ошибка. Будьте внимательнее, и у вас обязательно получится ответить на вопрос!", "Конечно же, продавец выбрал неверную фразу для привлечения клиента."]
      }
    }, {
      "page_id": 18, //71
      "title": "Записная книжка. Задание 8",
      "location": "page18",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 10,
        "useColumns": true, "maxlength": 30,
        "titles": ['ПОТЕНЦИАЛЬНЫЙ КЛИЕНТ', 'КЛЮЧЕВАЯ ФРАЗА'],
        "messages": [""]
      }
    }, {
      "page_id": 19, //72
      "title": "Этапы холодного звонка: определение потребности",
      "location": "page19",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 20, //73
      "title": "Этапы холодного звонка: преимущества",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //74
      "title": "Задание 27",
      "location": "page21",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "label": "Определить, в чем может заключаться основная потребность потенциального клиента.",
            "order": 0
          }, {
            "label": "Сформулировать преимущество вашего товара/услуги, которое отвечает потребности потенциального клиента.",
            "order": 1
          }, {
            "label": "Сформулировать закрытый вопрос(-ы), помогающий клиенту осознать его потребность, а вам – подготовить почву для формулирования преимущества вашего товара/услуги.",
            "order": 2
          }, {
            "label": "Сформулировать закрытый вопрос, который поможет получить позитивный ответ от клиента в ответ на ваше предложение.",
            "order": 3
          }]
        }],
        "messages": ["Вы расставили шаги подготовки к разговору с клиентом в правильном порядке!", "Не совсем так. Какие-то шаги не на своем месте. Попробуйте еще раз.", "Это неверный порядок шагов для подготовки к разговору с клиентом. Будьте внимательнее!", "Посмотрите правильный порядок шагов для подготовки разговора с клиентом."]
      }
    }, {
      "page_id": 22, //75
      "title": "Записная книжка. Задание 9",
      "location": "page22",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "useColumns": true, "maxlength": 30,
        "titles": ['ПОТЕНЦИАЛЬНЫЙ КЛИЕНТ', 'ВОПРОСЫ', 'ВЫГОДЫ'],
        "messages": [""]
      }
    }, {
      "page_id": 23, //76
      "title": "Завершение подготовки к холодному звонку",
      "location": "page23",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 24, //77
      "title": "Разговор с секретарем",
      "location": "page24",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 25, //78
      "title": "Задание 28",
      "location": "page25",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Не слушал собеседника",
          "right": 0
        }, {
          "label": "Говорил слишком быстро",
          "right": 0
        }, {
          "label": "Не владел всей необходимой информацией",
          "right": 0
        }, {
          "label": "Демонстрировал неуверенность",
          "right": 0
        }, {
          "label": "Пытался сразу делать подробную презентацию",
          "right": 0
        }, {
          "label": "Проявил фамильярность",
          "right": 0
        }, {
          "label": "Неправильно определил цель звонка",
          "right": 1
        }, {
          "label": "Разговаривал не с тем, кому адресовалось предложение",
          "right": 1
        }, {
          "label": "Отнесся к клиенту как к очередному телефонному номеру, а не как к личности",
          "right": 0
        }, {
          "label": "Не проявил интерес и уважение, был несдержанным и многословным",
          "right": 0
        }],
        "messages": ["Все верно! В этой ситуации продавец неверно определил цель звонка и разговаривал с человеком, который не принимает решений по данному вопросу.", "Неверно! Попробуйте еще раз.", "Вы ошиблись. Посмотрите киноэпизод еще раз и попробуйте проанализировать ситуацию.", "Продавец неверно определил цель звонка и разговаривал с человеком, который не принимает решений по данному вопросу."]
      }
    }, {
      "page_id": 26, //79
      "title": "Задание 29",
      "location": "page26",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 27, //80
      "title": "Записная книжка. Задание 10",
      "location": "page27",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Ваши приемы"
        }],
        "questionList": [{
          "label": 'Изложите суть вопроса секретарю и попросите доложить о разговоре шефу.',
          "marker": -1
        }, {
          "label": "Договоритесь о времени, когда вы узнаете результат",
          "marker": -1
        }, {
          "label": "Продиктуйте для руководителя краткое сообщение (типа телефонограммы)",
          "marker": -1
        }, {
          "label": "Попробуйте позвонить в обеденное время: есть шанс, что секретарь ушла обедать, а начальник переключил все звонки на себя",
          "marker": -1
        }, {
          "label": "Можно попробовать звонить каждые полчаса и взять секретаря измором",
          "marker": -1
        }, {
          "label": "Можно послать факс с вашим предложением и просьбой связаться с ним",
          "marker": -1
        }, {
          "label": "Организуйте разговор с руководителем рангом ниже, чтобы через него затем выйти на лицо, принимающее решение",
          "marker": -1
        }]
      }
    }, {
      "page_id": 28, //81
      "title": "Задание 29 ",
      "location": "page28",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какую из тактик использовала героиня? ",
          "taskType": "single",
          "questionList": [{
            "label": "Тактика 1. «Максимум уверенности – минимум информации».",
            "right": 0
          }, {
            "label": "Тактика 2. «Взять секретаря в союзники».",
            "right": 0
          }, {
            "label": "Не использовала ни одну из тактик ",
            "right": 1
          }]
        }, {
          "taskText": "Почему сотруднице не удалось добиться разговора с ответственным лицом? ",
          "taskType": "multi",
          "questionList": [{
            "label": "Сотрудница не представилась",
            "right": 1
          }, {
            "label": "Не назвала компанию, которую она представляет",
            "right": 0
          }, {
            "label": "Не выяснила, кто занимается вопросами рекламы в компании клиента",
            "right": 1
          }, {
            "label": "Не узнала, как зовут секретаря",
            "right": 1
          }, {
            "label": "Не спросила, когда лучше перезвонить лицу, ответственному за рекламу",
            "right": 1
          }, {
            "label": "Не поблагодарила за информацию",
            "right": 0
          }]
        }],
        "messages": ["Верно! В этой ситуации продавец не использовала ни одну из тактик общения с секретарем, поэтому и не добилась своей цели.", "Не совсем так. Сотрудница страховой компании не добилась разговора с ответственным лицом по другим причинам.", "И снова ошибка. ", "Посмотрите правильный ответ. В этой ситуации продавец не использовала ни одну из тактик общения с секретарем, поэтому и не добилась своей цели. Кроме того, сотрудница неправильно выстроила диалог с секретарем"]
      }
    }, {
      "page_id": 29, //82
      "title": "Записная книжка. Задание 11",
      "location": "page29",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 2,
        "useColumns": true, "maxlength": 30,
        "titles": ['«Максимум уверенности – минимум информации»', '«Взять секретаря в союзники»'],
        "messages": [""]
      }
    }, {
      "page_id": 30, //83
      "title": "Как вызвать доверие. средства воздействия при разговоре",
      "location": "page30",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 31, //84
      "title": "Задание 30",
      "location": "page31",
      "hasSound": false,
      "type": "exercise",
      "data": (_data = {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": ""
      }, _defineProperty(_data, "taskText", "Продавец вела себя"), _defineProperty(_data, "taskType", "multi"), _defineProperty(_data, "questionList", [{
        "label": "Нервно и неуверенно",
        "right": 0
      }, {
        "label": "Агрессивно и напористо",
        "right": 1
      }, {
        "label": "Безразлично",
        "right": 0
      }, {
        "label": "Фамильярно",
        "right": 0
      }, {
        "label": "Снисходительно, пренебрежительно",
        "right": 0
      }, {
        "label": "Показала, что она дилетант в вопросе страхования",
        "right": 0
      }, {
        "label": "Спорила, не соглашалась",
        "right": 1
      }, {
        "label": "Морализировала",
        "right": 1
      }, {
        "label": "Советовала",
        "right": 0
      }, {
        "label": "Говорила долго, в режиме монолога",
        "right": 1
      }, {
        "label": "Использовала жаргонные слова, профессионализмы",
        "right": 0
      }, {
        "label": "Задавала вопросы, как на допросе ",
        "right": 0
      }, {
        "label": "Не отвечала на вопросы",
        "right": 0
      }, {
        "label": "Не слушала",
        "right": 1
      }]), _defineProperty(_data, "messages", ["Вы правы! Своей агрессивностью, нежеланием слушать, неумением вести диалог Ольга совершенно отпугнула потенциального клиента.", "Не совсем так. Учтите, что Ольга вела себя напористо и не выстроила диалога с клиентом.", "Вы снова ошиблись. Наверное, что-то отвлекло вас.", "Обратите внимание на правильный ответ. Не стоит допускать подобных ошибок при общении с клиентами."]), _data)
    }, {
      "page_id": 32, //85
      "title": "Задание 31",
      "location": "page32",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 16, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Если вы хотите разрушить доверие…"
        }, {
          "id": 1,
          "label": "Если вы хотите вызвать доверие…"
        }],
        "questionList": [{
          "label": "агрессивно и напористо",
          "right": 0
        }, {
          "label": "нервно и неуверенно",
          "right": 0
        }, {
          "label": "бесцеремонно (главное, что вам сейчас говорить удобно)",
          "right": 0
        }, {
          "label": "советуйте",
          "right": 0
        }, {
          "label": "спорьте, не соглашайтесь",
          "right": 0
        }, {
          "label": "не слушайте, перебивайте",
          "right": 0
        }, {
          "label": "говорите долго, желательно без остановок и в режиме монолога",
          "right": 0
        }, {
          "label": "критикуйте, высказывайте отрицательные оценки",
          "right": 0
        }, {
          "label": "спокойно и уверенно",
          "right": 1
        }, {
          "label": "дружелюбно и настойчиво",
          "right": 1
        }, {
          "label": "тактично (удобно ли клиенту сейчас разговаривать)",
          "right": 1
        }, {
          "label": "хвалите (искренне)",
          "right": 1
        }, {
          "label": "согласитесь, что точка зрения имеет право на существование",
          "right": 1
        }, {
          "label": "слушайте и не перебивайте",
          "right": 1
        }, {
          "label": "говорите кратко, делайте паузы, вовлекайте в диалог",
          "right": 1
        }, {
          "label": "высказывайте мнение, приводите факты",
          "right": 1
        }],
        "messages": ["Вы правы! Чтобы вызвать доверие клиента, ваши фразы, действия и манера разговора должны пробудить интерес, симпатию, приятие, ощущение безопасности. Избегайте внутреннего напряжения, неприятия и дискомфорта – это разрушает доверие клиента.", "Неверно. Вы перепутали фразы, которые разрушают и вызывают доверие клиента. Может быть, повезет в другой раз?", "Не совсем так. Избегайте внутреннего напряжения, неприятия и дискомфорта – это разрушает доверие клиента.", "Помните: если вы хотите вызвать доверие клиента, ваши фразы, действия и манера разговора должны пробудить у клиента интерес, симпатию, приятие, ощущение безопасности."]
      }
    }, {
      "page_id": 33, //86
      "title": "Средства воздействия при общении по телефону",
      "location": "page33",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 34, //87
      "title": "Задание 32",
      "location": "page34",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "label": ["Тихо", "Быстро", "Уверенно", "Невнятно"],
            "order": 0
          }, {
            "label": ["Нормально", "Быстро", "Уверенно", "Невнятно"],
            "order": 1
          }, {
            "label": ["Тихо", "Нормально", "Неуверенно", "Невнятно"],
            "order": 2
          }, {
            "label": ["Нормально", "Нормально", "Уверенно", "Внятно"],
            "order": 3
          }]
        }],
        "messages": ["Все верно! Вы отлично разбираетесь в речевых интонациях.", "Не совсем так. Попробуйте еще раз", "Вы неверно распределили речевые характеристики. Будьте внимательнее.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 35, //88
      "title": "Прямое воздействие – содержание разговора",
      "location": "page35",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 36, //89
      "title": "Задание 33",
      "location": "page36",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Приветствие и представление",
            "label": "Иван Сергеевич, добрый день.  Меня зовут Ольга Каштанова. Я представляю страховую компанию «Зевс».",
            "order": 0
          }, {
            "phrase": "Формулировка цели звонка",
            "label": "Мы предлагаем для вас выгодные условия медицинского страхования сотрудников. ",
            "order": 1
          }, {
            "phrase": "Ключевая фраза для удержания интереса",
            "label": "Все затраты можно будет отнести на себестоимость продукции. Таким образом, вы будете заботиться о здоровье ваших сотрудников и одновременно экономить. ",
            "order": 2
          }, {
            "phrase": "Формулирование выгод",
            "label": "Для руководящего персонала мы предлагаем лучшие медицинские учреждения нашего города. Нашими клиентами уже являются…",
            "order": 3
          }, {
            "phrase": "Ответы на возражение",
            "label": "Уже застрахованы? Жаль. Наши условия наверняка выгоднее. ",
            "order": 4
          }]
        }],
        "messages": ['Ваш ответ верный. Обратите внимание, что в этом примере продавец пропустил некоторые важные этапы разговора. Полная последовательность этапов должна выглядеть так: <div class="answer-comment"><p class="text-accent">Этап разговора</p> <ol> <li>Приветствие<br/>Представление<br/>Формулировка цели звонка<br/>Согласование времени разговора</li> <li>Ключевая фраза для удержания интереса</li> <li>Определение потребности в товаре/услуге<br/>Формулирование выгод</li>  <li>Ответы на возражение</li> <li>Завершающие действия</li>   </ol> </div>', "Вы не совсем верно распределили этапы разговора. Попробуйте еще раз.", "Вы ошиблись. Может быть, стоит посмотреть киноэпизод еще раз?", 'Посмотрите правильный ответ. Обратите внимание, что в этом примере продавец пропустил некоторые важные этапы разговора. Полная последовательность этапов должна выглядеть так: <div class="answer-comment"><p class="text-accent">Этап разговора</p> <ol> <li>Приветствие<br/>Представление<br/>Формулировка цели звонка<br/>Согласование времени разговора</li> <li>Ключевая фраза для удержания интереса</li> <li>Определение потребности в товаре/услуге<br/>Формулирование выгод</li>  <li>Ответы на возражение</li> <li>Завершающие действия</li>   </ol> </div>']
      }
    }, {
      "page_id": 37, //90
      "title": "Задание 34",
      "location": "page37",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 16, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Негативная"
        }, {
          "id": 1,
          "label": "Позитивная"
        }],
        "stageTalk": [{
          // "id": 0, // эквивалентно ответу
          "label": "Приветствие и представление"
        }, {
          // "id": 1,
          "label": "Формулировка цели звонка"
        }, {
          // "id": 1,
          "label": "Ключевая фраза для удержания интереса"
        }, {
          // "id": 1,
          "label": "Формулирование выгод"
        }, {
          // "id": 1,
          "label": "Ответы на возражение"
        }],
        "questionList": [{
          "label": "Иван Сергеевич, добрый день. Меня зовут Ольга Каштанова. Я представляю страховую компанию «Зевс».",
          "right": 1
        }, {
          "label": "Мы предлагаем для вас выгодные условия медицинского страхования сотрудников. ",
          "right": 1
        }, {
          "label": "Все затраты можно будет отнести на себестоимость продукции. Таким образом, вы будете заботиться о здоровье ваших сотрудников и одновременно экономить. ",
          "right": 1
        }, {
          "label": "Для руководящего персонала мы предлагаем лучшие медицинские учреждения нашего города. Нашими клиентами уже являются…",
          "right": 0
        }, {
          "label": "Уже застрахованы? Жаль. Наши условия наверняка выгоднее.",
          "right": 0
        }],
        "messages": ["Все верно! У Ольги плохая обратная связь с собеседником, поэтому в конце разговора клиент был настроен крайне отрицательно.", "Ваш ответ неверный. Учтите, что в начале разговора клиент был настроен позитивно.", "И снова ошибка. Вы где-то перепутали позитивную и негативную реакцию клиента.", "А теперь обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 38, //91
      "title": "Комментарии",
      "location": "page38",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 39, //92
      "title": "Задание 35",
      "location": "page39",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Как формулировалась цель разговора для клиента?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Познакомиться, рассказать клиенту о выгодах сотрудничества с компанией продавца. ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Убедить клиента в необходимости для него продуктов/услуг продавца.",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Ответить на вопросы продавца.",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Цель не была озвучена клиенту.",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Как формулировалась цель разговора для клиента?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Познакомиться, рассказать клиенту о выгодах сотрудничества с компанией продавца. ",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Убедить клиента в необходимости для него продуктов/услуг продавца.",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Ответить на вопросы продавца.",
              "v_id": 2,
              "q_id": 0
            }, {
              "label": "Цель не была озвучена клиенту.",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Было ли согласовано время разговора?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Время разговора было согласовано.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Не было согласовано.",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Было ли согласовано время разговора?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Время разговора было согласовано.",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Не было согласовано.",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Ваш ответ верный! В первом эпизоде продавец правильно определила цели разговора: познакомить клиента с компанией и ответить на его вопросы. Во втором фрагменте время согласовано не было, поэтому во время разговора потенциальный клиент отвлекался и слушал невнимательно.", "Увы, это неверный ответ. Попробуйте выполнить задание снова.", "И снова ошибка. Возможно, вам стоит более точно определить цели разговора.", "Посмотрите правильный ответ. "]
      }
    }, {
      "page_id": 40, //93
      "title": "Задание 36",
      "location": "page40",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Что использовалось для удержания интереса клиента?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Факт, связанный с бизнесом клиента.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Новый продукт/услуга, который предлагает компания продавца.",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Какие-то важные для бизнеса клиента изменения (например, в законодательной базе и пр.).",
              "v_id": 0,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Что использовалось для удержания интереса клиента?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Факт, связанный с бизнесом клиента.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Новый продукт/услуга, который предлагает компания продавца.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Какие-то важные для бизнеса клиента изменения (например, в законодательной базе и пр.).",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Что было сформулировано клиенту в качестве выгод и преимуществ?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Расширенный пакет услуг.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Сокращение расходов.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Высокое качество.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Уникальность продукта/услуги.",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Что было сформулировано клиенту в качестве выгод и преимуществ?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Расширенный пакет услуг.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Сокращение расходов.",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Высокое качество.",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Уникальность продукта/услуги.",
              "v_id": 0,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Отлично! Вы верно определили факты, использованные для удержания интереса клиента, сформулированные выгоды и преимущества.", "Не совсем так. Вы перепутали факты, использованные для удержания интереса клиента, либо сформулированные выгоды и преимущества.", "Это неверный ответ. Выполните задание снова.", "К сожалению, с заданием вы не справились. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 41, //94
      "title": "Вопросы как инструмент выявления потребностей и работы с возражениями",
      "location": "page41",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 42, //95
      "title": "Уточняющие вопросы",
      "location": "page42",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 43, //96
      "title": "Задание 37",
      "location": "page43",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Эти условия мне не подходят.",
            "label": "Чем именно?",
            "order": 0
          }, {
            "phrase": "Ваши условия менее выгодны.",
            "label": "По сравнению с чем?",
            "order": 1
          }, {
            "phrase": "Все, что вы мне предлагаете, меня не устраивает.",
            "label": "Что конкретно вас не устраивает?",
            "order": 2
          }, {
            "phrase": "Мне нужен другой аналог.",
            "label": "Какой именно?",
            "order": 3
          }, {
            "phrase": "Меня не устраивают условия поставки.",
            "label": "В чем именно они вас не устраивают?",
            "order": 4
          }, {
            "phrase": "У вас очень высокие цены.",
            "label": "С чем вы сравниваете?",
            "order": 5
          }]
        }],
        "messages": ["Вы отлично справились с заданием! Все уточняющие вопросы составлены верно.", "Неверно. Будьте внимательнее, и у вас обязательно получится составить уточняющие вопросы.", "Где-то закралась ошибка. Попробуйте еще раз.", "Обратите внимание на правильный ответ. Вам наверняка пригодится умение задавать уточняющие вопросы."]
      }
    }, {
      "page_id": 44, //97
      "title": "Как правильно задавать уточняющие вопросы",
      "location": "page44",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 45, //98
      "title": "Задание 39",
      "location": "page45",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "audio/a11.mp3",
          "questionList": [{
            "label": "audio/a12.mp3",
            "right": 0
          }, {
            "label": "audio/a13.mp3",
            "right": 0
          }, {
            "label": "audio/a14.mp3",
            "right": 1
          }]
        }, {
          "taskText": "audio/a15.mp3",
          "questionList": [{
            "label": "audio/a16.mp3",
            "right": 0
          }, {
            "label": "audio/a17.mp3",
            "right": 1
          }, {
            "label": "audio/a18.mp3",
            "right": 0
          }]
        }, {
          "taskText": "audio/a19.mp3",
          "questionList": [{
            "label": "audio/a20.mp3",
            "right": 0
          }, {
            "label": "audio/a21.mp3",
            "right": 1
          }, {
            "label": "audio/a22.mp3",
            "right": 0
          }]
        }],
        "messages": ["Поздравляем! Вы верно определили все уточняющие вопросы к фразам клиента.", "Не совсем так. Выберите другие варианты вопросов.", "Будьте внимательнее. Это не лучшие варианты уточняющих вопросов. Так клиента не переубедишь.", "Вам не удалось выбрать верные уточняющие вопросы. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 46, //99
      "title": "Развивающие вопросы",
      "location": "page46",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 47, //100
      "title": "Задание 39",
      "location": "page47",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Мы работаем с другим поставщиком. ",
              "q_id": 0
            }],
            "variants": [{
              "label": "И вам никогда не хотелось попробовать поработать с кем-то другим?",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "То есть вы не хотите сотрудничать с нашей компанией? ",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Вы хотите сказать, что вам нужны веские аргументы, чтобы вы стали с нами работать?",
              "v_id": 2,
              "q_id": 0
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Чтобы освоить вашу программу, нам придется переучивать людей, а времени и так не хватает.",
              "q_id": 0
            }],
            "variants": [{
              "label": "Вы боитесь, что ваши сотрудники не справятся с новой программой?",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Вы хотите сказать, что были бы заинтересованы свести к минимуму временные затраты сотрудников при освоении новой программы?",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Вы хотите сказать, что программа не поможет в вашей работе?",
              "v_id": 2,
              "q_id": -1
            }]
          }
        }, {
          "taskText": " ",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Ваши цены слишком высоки.",
              "q_id": 0
            }],
            "variants": [{
              "label": "Вы боитесь получить слишком много преимуществ?",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Если я обосную цену, это облегчит вам принятие решения?",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Вы обвиняете нас в завышении цен?",
              "v_id": 2,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Поздравляем! Вы выбрали наилучшие варианты развивающих вопросов.", "Не совсем так. Это не лучшие варианты развивающих вопросов.", "Неверно. Попробуйте еще раз выбрать варианты развивающих вопросов.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 48, //101
      "title": "Задание 40",
      "location": "page48",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "audio/a23.mp3",
          "questionList": [{
            "label": "audio/a24.mp3",
            "right": 0
          }, {
            "label": "audio/a25.mp3",
            "right": 1
          }, {
            "label": "audio/a26.mp3",
            "right": 0
          }]
        }, {
          "taskText": "audio/a27.mp3",
          "questionList": [{
            "label": "audio/a28.mp3",
            "right": 0
          }, {
            "label": "audio/a29.mp3",
            "right": 0
          }, {
            "label": "audio/a30.mp3",
            "right": 1
          }]
        }],
        "messages": ["Ваш ответ верный! Умение задавать правильные вопросы значительно улучшит взаимоотношения с клиентами.", "Это неверный ответ. Возможно, вы отвлеклись и выбрали не лучшие варианты развивающих вопросов.", "Подумайте еще раз. Наверняка вам удастся найти наилучший вариант!", "Увы, задание выполнено неудовлетворительно. А теперь посмотрите правильный ответ."]
      }
    }, {
      "page_id": 49, //102
      "title": "Задание 41. Преодоление возражений и назначение встречи",
      "location": "page49",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Как продавец преодолевал возражения?",
          "questionList": [{
            "label": "Сразу приводил контраргументы.",
            "right": 0
          }, {
            "label": "Задавал вопросы, потом приводил аргументы.",
            "right": 0
          }, {
            "label": "Принимал возражение (соглашался с клиентом), затем приводил аргументы.",
            "right": 1
          }]
        }, {
          "taskText": "Какие приемы использовал продавец для завершения разговора назначением встречи?",
          "questionList": [{
            "label": "Создал впечатление у клиента, что ему выгоднее купить товар именно сейчас, без долгих раздумий.",
            "right": 1
          }, {
            "label": "Формулировал предложение о встрече в альтернативной форме.",
            "right": 1
          }, {
            "label": "Согласовал дальнейшие действия. Наметил дату и время.",
            "right": 1
          }]
        }],
        "messages": ["Все верно! Федор прекрасно провел переговоры, которые заложили основы нового сотрудничества.", "Не совсем так. Учтите, что Федор весьма успешно провел переговоры.", "И снова ошибка. Попробуйте ответить снова.", "К сожалению, вам не удалось справиться с заданием. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 50, //103
      "title": "Комментарии",
      "location": "page50",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 51, //104
      "title": "Ответы на возражения и завершающие действия. Записная книжка. Задание 12",
      "location": "page51",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 4,
        "useColumns": false,
        "maxlength": 80,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 52, //105
      "title": "Задание 42",
      "location": "page52",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "audio/a31.mp3",
          "questionList": [{
            "label": "audio/a32.mp3",
            "right": 1
          }, {
            "label": "audio/a33.mp3",
            "right": 0
          }, {
            "label": "audio/a34.mp3",
            "right": 0
          }]
        }, {
          "taskText": "audio/a35.mp3",
          "questionList": [{
            "label": "audio/a36.mp3",
            "right": 0
          }, {
            "label": "audio/a37.mp3",
            "right": 0
          }, {
            "label": "audio/a38.mp3",
            "right": 1
          }]
        }],
        "messages": ["Все верно! Вы отлично поработали с возражениями клиента.", "Ваши ответы вряд ли снимут возражения клиента. Попробуйте выбрать другие варианты.", "Где-то закралась ошибка. Выбранные ответы не самые лучшие.", "Обратите внимание на правильный ответ и запомните лучшие варианты работы с возражениями."]
      }
    }, {
      "page_id": 53, //106
      "title": "Записная книжка. Задание 13",
      "location": "page53",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "useColumns": true,
        "maxlength": 200,
        "titles": ['ВОЗРАЖЕНИЯ КЛИЕНТОВ', 'ОТВЕТ'],
        "messages": [""]
      }
    }, {
      "page_id": 54, //107
      "title": "Резюме",
      "location": "page54",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 55, //108
      "title": "Резюме",
      "location": "page55",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 3
  }, // end of chapter
  {
    "chapter_id": 4,
    "chapter_location": "chapter04",
    "title": "Глава 3",
    "description": "Итоговый тест",
    "pages": [{
      "page_id": 1, //109
      "title": "Итоговый тест",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //111
      "title": "Итоговое тестирование ",
      "location": "page02",
      "hasSound": false,
      "type": "test",
      "messages": [""]
    }, {
      "page_id": 3, //112
      "title": "Заключение",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of chapter
  }] // end of chapters array
};

var testStructure = {
  "tests": [{
    "testId": 0,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 5,
      "caption": "group1",
      "qUse": "all",
      "questions": [{
        "question": "Как вы дадите понять, что слушаете абонента?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«Говорите»",
          "right": false
        }, {
          "label": "«Слушаю вас» ",
          "right": true
        }, {
          "label": "«Алло»",
          "right": false
        }]
      }, {
        "question": "Если разговор прервался, кто должен перезвонить?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "инициатор разговора ",
          "right": true
        }, {
          "label": "тот, кому позвонили",
          "right": false
        }, {
          "label": "не имеет значения",
          "right": false
        }]
      }, {
        "question": "Закончите предложение.<br/><i>Умение принимать входящие звонки…</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "влияет на общее положение дел в компании ",
          "right": true
        }, {
          "label": "сказывается только на отношениях с клиентами",
          "right": false
        }, {
          "label": "формирует личный имидж принимающего звонки",
          "right": false
        }]
      }, {
        "question": "К телефону попросили сотрудника, которого нет на месте. Вы от его имени пообещали, что он перезвонит. Правильно ли вы поступили?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Как лучше всего показать клиенту, что мы его услышали?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сказать «я вас понял(-а)»",
          "right": false
        }, {
          "label": "сказать «спасибо, я вас понял(-а)»",
          "right": false
        }, {
          "label": "повторить слова клиента ",
          "right": true
        }]
      }, {
        "question": "Какой вопрос позволяет получить больше информации?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Вы хотите отправить отдыхать ребенка к морю?",
          "right": false
        }, {
          "label": "Куда вы хотите отправить ребенка отдыхать? ",
          "right": true
        }]
      }, {
        "question": "Продолжите утверждение:<br/><i>Консультируя клиента по телефону, надо стремиться…</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "дать как можно больше информации",
          "right": false
        }, {
          "label": "уточнить его потребности и дать лишь необходимую информацию ",
          "right": true
        }]
      }, {
        "question": "С чего лучше всего начать телефонную презентацию товара или услуги клиенту?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "с наиболее ярких деталей и впечатляющих фактов",
          "right": false
        }, {
          "label": "с того, что больше всего волнует клиента ",
          "right": true
        }, {
          "label": "с положительных отзывов других клиентов",
          "right": false
        }]
      }, {
        "question": "Верно ли следующее утверждение?<br/><i>Чем больше говорит сотрудник в процессе презентации по телефону, тем лучше.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да ",
          "right": false
        }, {
          "label": "нет ",
          "right": true
        }]
      }, {
        "question": "«Холодный звонок» имеет такое название, потому что:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "вам «холодно» отвечают",
          "right": false
        }, {
          "label": "вы звоните незнакомому клиенту ",
          "right": true
        }, {
          "label": "во время звонка у вас на лбу выступает холодный пот",
          "right": false
        }]
      }, {
        "question": "Перед «холодным» телефонным звонком необходимо собрать информацию о:",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "профиле деятельности компании ",
          "right": true
        }, {
          "label": "корпоративной культуре",
          "right": false
        }, {
          "label": "количестве людей, работающих в компании ",
          "right": true
        }, {
          "label": "о стиле одежды, принятой в компании",
          "right": false
        }, {
          "label": "месте компании на рынке ",
          "right": true
        }, {
          "label": "финансовом положении компании",
          "right": false
        }, {
          "label": "лице, ответственном за принятие решения по вашему вопросу ",
          "right": true
        }]
      }, {
        "question": "Выберите дополнительные цели разговора с клиентом, если вы первый раз звоните клиенту и основная цель звонка – назначить встречу. Учтите, что ваша компания – молодая, но уже громко заявившая о себе на рынке.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Познакомиться, рассказать клиенту о выгодах сотрудничества с вашей компанией. ",
          "right": true
        }, {
          "label": "Сообщить, что вы молодая, но очень динамично развивающаяся компания.",
          "right": false
        }, {
          "label": "Убедить в необходимости приобретения для нее ваших продуктов/услуг.",
          "right": false
        }]
      }, {
        "question": "Верно ли следующее утверждение?<br/><i>При разговоре с секретарем необходимо проявлять максимум уверенности и давать ему минимум информации.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Верно ли следующее утверждение?<br/><i>При разговоре с секретарем необходимо быть предельно вежливым, доброжелательным, сделать его своим союзником.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": false
        }, {
          "label": "нет",
          "right": true
        }]
      }, {
        "question": "В процессе общения с клиентом необходимо умение налаживать и поддерживать отношение доверия. Завершите предложение.<br/><i>Доверие – это…</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "быть на короткой ноге с клиентом",
          "right": false
        }, {
          "label": "отсутствие коммерческих секретов",
          "right": false
        }, {
          "label": "открытость в общении ",
          "right": true
        }]
      }, {
        "question": "В начале телефонного разговора с клиентом обязательно:",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "поприветствовать клиента и представиться ",
          "right": true
        }, {
          "label": "сформулировать цель звонка ",
          "right": true
        }, {
          "label": "получить согласие на продолжение разговора ",
          "right": true
        }]
      }, {
        "question": "Клиент в разговоре с продавцом произнес: <i>«Вы знаете, мы готовы к повторному заказу, но я не знаю, сколько мне заказывать». </i><br/>Какой из приведенных ниже вопросов, на ваш взгляд, развивает контакт, помогает продвигаться к получению заказа?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Вы хотели бы расширить ассортимент? ",
          "right": true
        }, {
          "label": "Когда вы последний раз заказывали товар?",
          "right": false
        }, {
          "label": "Когда товар закончился?",
          "right": false
        }]
      }, {
        "question": "Определите тип вопроса, который задает клиенту продавец.<br/><strong>Клиент:</strong> «Я считаю, что ваши цены не соответствуют качеству вашей продукции».<br/><strong>Продавец:</strong> <i>«То есть, вы считаете, что цена несколько завышена?».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "альтернативный ",
          "right": false
        }, {
          "label": "развивающий ",
          "right": true
        }]
      }, {
        "question": "Верно ли утверждение:<br/><i>При совершении «холодного звонка» нужно подробно и тщательно рассказать о всех преимуществах или выгодах продукта/услуги. </i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да ",
          "right": false
        }, {
          "label": "нет ",
          "right": true
        }]
      }, {
        "question": "Правильно ли продавец преодолевает возражение клиента:<br/><strong>Клиент:</strong> <i>«Я слышал, у вас цены выше, чем у других».</i><br/><strong>Продавец:</strong> <i>«Вы, видимо, плохо информированы, у нас цены гораздо ниже, чем у конкурентов».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да ",
          "right": false
        }, {
          "label": "нет ",
          "right": true
        }]
      }, {
        "question": "Прочитайте возражение клиента и выберите наиболее подходящий ответ.<br/><strong>Клиент:</strong> <i>«К сожалению, я не смогу встретиться с вами в ближайшие две недели».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«Я понимаю, вы очень занятый человек. Давайте договоримся, я перезвоню через две недели, 14 апреля, и мы назначим время встречи, хорошо?» ",
          "right": true
        }, {
          "label": "«Вы зря отказываетесь от встречи в ближайшее время. Через месяц наше выгодное предложение перестанет действовать».",
          "right": false
        }]
      }]
    }]
  }, {
    "testId": 1,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 55,
      "caption": "group2",
      "qUse": "all",
      "questions": [{
        "question": "Ниже приводятся фразы, которые клиенты услышали в ходе телефонного общения с представителями компании. Отметьте варианты, которые не рекомендуется использовать, беседуя с клиентом.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "«Его сегодня не будет. Может, ему что-то передать?» ",
          "right": true
        }, {
          "label": "«Доброе утро, я вас слушаю»",
          "right": true
        }, {
          "label": "«Извините, я этим не занимаюсь. Вам нужно позвонить в отдел заказов»",
          "right": true
        }]
      }, {
        "question": "Кто кладет трубку первым?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "позвонивший",
          "right": true
        }, {
          "label": "тот, кому позвонили",
          "right": false
        }, {
          "label": "не имеет значения",
          "right": false
        }]
      }, {
        "question": "Если вы разговариваете по телефону, и в это время зазвонил второй аппарат, вы должны:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "прервать разговор с первым абонентом и ответить второму",
          "right": false
        }, {
          "label": "сообщить первому абоненту, что вам нужно ответить на другой звонок и ответить второму абоненту",
          "right": false
        }, {
          "label": "спросить разрешения у первого абонента ответить на второй звонок, поблагодарить за согласие и очень кратко ответить второму абоненту",
          "right": true
        }]
      }, {
        "question": "При приеме телефонного сообщения в бланке не нужно указывать: ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "дополнительную информацию",
          "right": false
        }, {
          "label": "длительность разговора",
          "right": true
        }, {
          "label": "время и дату звонка",
          "right": false
        }, {
          "label": "кто принял сообщение",
          "right": false
        }]
      }, {
        "question": "Чтобы убедиться, что вы правильно поняли клиента, надо по ходу разговора…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "записывать его слова",
          "right": false
        }, {
          "label": "повторять то, что он сказал, своими словами",
          "right": true
        }, {
          "label": "говорить: «Я вас понимаю»",
          "right": false
        }]
      }, {
        "question": "Отметьте, какие из этих вопросов являются закрытыми.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Пользуетесь ли вы сами пластиковой картой? ",
          "right": true
        }, {
          "label": "Что вас не устраивает? ",
          "right": false
        }, {
          "label": "А важно для вас, чтобы были какие-либо ограничения по снятию денежных сумм, например, в день?",
          "right": true
        }]
      }, {
        "question": "Верно ли утверждение:<br/> <i>Прежде чем давать консультацию, надо уточнить потребности, задавая вопросы.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Верно ли утверждение:<br/><i>Презентацию следует начинать с самых ярких деталей и убедительных фактов.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": false
        }, {
          "label": "нет",
          "right": true
        }]
      }, {
        "question": "Верно ли утверждение:<br/><i>Презентация более эффективна, если строится в режиме монолога.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": false
        }, {
          "label": "нет",
          "right": true
        }]
      }, {
        "question": "Отметьте правильные ответы:<br/><i>При подготовке к «холодному звонку» необходимо…</i>",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "разбить потенциальных клиентов на группы ",
          "right": true
        }, {
          "label": "собрать информацию о потенциальном клиенте",
          "right": true
        }, {
          "label": "сформулировать для себя цели звонка",
          "right": true
        }, {
          "label": "составить план предстоящего разговора",
          "right": true
        }]
      }, {
        "question": "Рекламное агентство работает на рынке уже 5 лет. Менеджеру по работе с клиентами этого агентства поставлена задача расширения круга клиентов. Он собирается сделать «холодный звонок» в компанию потенциального заказчика, который хорошо знаком с рынком рекламных услуг. Отметьте цели, которые будут для менеджера дополнительными.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Назначить встречу.",
          "right": false
        }, {
          "label": "Узнать, чем вызвано отсутствие сотрудничества.",
          "right": true
        }, {
          "label": "Получить заказ.",
          "right": true
        }, {
          "label": "Подчеркнуть конкурентные преимущества агентства.",
          "right": true
        }, {
          "label": "Познакомиться, рассказать потенциальному клиенту о выгодах сотрудничества с компанией.",
          "right": true
        }, {
          "label": "Заинтересовать в сотрудничестве. ",
          "right": true
        }]
      }, {
        "question": "При использовании тактики «Взять секретаря в союзники» необходимо…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "постараться предварительно узнать, как зовут человека, ответственного за принятие решения",
          "right": false
        }, {
          "label": "сформулировать свой вопрос так, чтобы секретарь не смогла сама по нему принять решение",
          "right": false
        }, {
          "label": "обратившись к секретарю по имени, узнать, когда вам лучше позвонить ответственному лицу, чтобы застать его на месте (если вас сразу не соединяют)",
          "right": true
        }]
      }, {
        "question": "Отметьте верные утверждения.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Когда клиент испытывает доверие, он делится всей имеющейся у него информацией с продавцом.",
          "right": false
        }, {
          "label": "Когда клиент испытывает доверие, он открыт к восприятию и принятию информации, идущей от продавца. ",
          "right": true
        }]
      }, {
        "question": "Верно ли утверждение?<br/><i>Когда мы делаем «холодный звонок», необходимо поинтересоваться, удобно ли клиенту сейчас говорить.</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Выберите вариант информации, которая не может быть использована для удержания интереса клиента:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "отзыв кого-то из другой компании, кого клиент знает",
          "right": false
        }, {
          "label": "изменения, произошедшие в вашем бизнесе с момента последнего разговора с покупателем",
          "right": false
        }, {
          "label": "ссылка на неудачный опыт клиента при общении с вашими конкурентами",
          "right": true
        }, {
          "label": "содержание письма, которое вы недавно написали клиенту",
          "right": false
        }]
      }, {
        "question": "Прочитайте фразу клиента и выберите лучший вариант уточняющего вопроса.<br/><strong>Клиент:</strong><i> «Я считаю, что ваши цены не соответствуют качеству вашей продукции».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«Не соответствует качеству? А какой должна быть цена, по вашему мнению?»",
          "right": false
        }, {
          "label": "«Не соответствует качеству? Поясните, пожалуйста, на основании чего вы пришли к такому выводу?»",
          "right": true
        }, {
          "label": "«Я понял. Это главное, что вас не устраивает?»",
          "right": false
        }]
      }, {
        "question": "Клиент в разговоре со страховым агентом произнес: «Я вообще не верю страховщикам». Агент может задать клиенту уточняющие и развивающие вопросы. Какие из приведенных ниже вопросов являются уточняющими?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Вообще не верите? По какой причине?",
          "right": true
        }, {
          "label": "Вы хотите сказать, что вам пришлось столкнуться с недобросовестными страховщиками?",
          "right": false
        }, {
          "label": "А что произошло, после чего вы перестали им верить?",
          "right": true
        }]
      }, {
        "question": "Закончите предложение. <br/><i>При общении по телефону у нас нет возможности долго расписывать преимущества или выгоды товара/услуги клиенту. Лучше всего использовать цепочку: </i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«вопрос – выгода – вопрос»",
          "right": true
        }, {
          "label": "«выгода – вопрос – выгода»",
          "right": false
        }, {
          "label": "«выгода – выгода – вопрос»",
          "right": false
        }]
      }, {
        "question": "Преодолевая возражения по телефону, продавцу лучше всего…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сразу приводить контраргументы",
          "right": false
        }, {
          "label": "оправдываться, а потом приводить аргументы",
          "right": false
        }, {
          "label": "принимать возражение (присоединяться к возражению), затем приводить аргументы",
          "right": true
        }]
      }, {
        "question": "Прочитайте возражение клиента и выберите наиболее подходящий ответ.<br/><strong>Клиент: </strong><i>«Поговорите с моим подчиненным».</i>",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«Нет, давайте лучше обсудим предложение лично с вами. Когда вам удобнее, в четверг или в пятницу?»",
          "right": false
        }, {
          "label": "«Как показывает опыт, подчиненные не принимают решений о сотрудничестве. Наша встреча у вас займет не более 15 минут. Давайте встретимся, например, во вторник после обеда, или вам удобнее в среду утром?»",
          "right": false
        }, {
          "label": "«Я обязательно это сделаю. И все же некоторые соображения по поводу новой услуги может оценить только руководитель предприятия. К тому же во время личной встречи мы будем застрахованы от эффекта «испорченного телефона». Мы могли бы встретиться в среду или в четверг на этой неделе. Вам когда удобнее?»",
          "right": true
        }]
      }]
    }]
  }]
};

var manifest = ["img/01-01.png", "img/01-02.png", "img/01-03.png", "img/01-04.png", "img/01_45.jpg", "img/01_52.jpg", "img/02-01-mob.png", "img/02-01.png", "img/03-01-mob.png", "img/03-01.png", "img/04-01.png", "img/101.png", "img/106.jpg", "img/107.png", "img/109.png", "img/128_3.jpg", "img/128_3_blur.png", "img/13.jpg", "img/15.jpg", "img/16.jpg", "img/19.jpg", "img/22.jpg", "img/23.jpg", "img/24.jpg", "img/25.jpg", "img/26.jpg", "img/30-01-01.jpg", "img/31.jpg", "img/32-01-01.jpg", "img/32-01-02.jpg", "img/33.jpg", "img/37_01.png", "img/37_02.png", "img/38_01.jpg", "img/42_01.jpg", "img/44_01.jpg", "img/45_01.jpg", "img/49.jpg", "img/54-480.png", "img/54.png", "img/56.jpg", "img/57.jpg", "img/59.jpg", "img/60.jpg", "img/61-01-01.jpg", "img/61.jpg", "img/63_1.png", "img/64-3.png", "img/64_1.png", "img/64_1fot.png", "img/66.png", "img/66_480.png", "img/68-480.png", "img/68.png", "img/7.jpg", "img/71-480.png", "img/71.png", "img/72-480.png", "img/72.png", "img/75.jpg", "img/76.jpg", "img/8.jpg", "img/82.jpg", "img/85.jpg", "img/87.jpg", "img/89.jpg", "img/92.jpg", "img/93.jpg", "img/95.jpg", "img/97.jpg", "img/arrow.png", "img/bg-arrow.png", "img/bg-device.png", "img/custom-video-sprite.png", "img/icon-sound-m-orange.png", "img/icon-sound-m.png", "img/icon-sound-s-orange.png", "img/icon-sound-s.png", "img/icon-sound.png", "img/modal_false.jpg", "img/modal_true.jpg", "img/nd.png", "img/png_icons.png", "img/sound-big.png", "img/sound-medium.png", "img/sound-small.png", "img/task-bg.jpg", "img/taskNote.jpg", "img/tm.jpg", "img/interface_buttons/about.png", "img/interface_buttons/btn_continue.png", "img/interface_buttons/btn_nav-back.png", "img/interface_buttons/btn_nav-forward.png", "img/interface_buttons/cross.png", "img/interface_buttons/glossary.png", "img/interface_buttons/menu.png", "img/interface_buttons/stat.png", "img/interface_buttons/vopros.png", "img/tasks/marker-blue.png", "img/tasks/marker-green.png", "img/tasks/marker-orange.png", "img/tasks/marker-red.png", "img/tasks/marker-yellow.png", "video/posters/01-01.png", "video/posters/01.jpg", "video/posters/02-01.png", "video/posters/02.jpg", "video/posters/03-01.png", "video/posters/03.jpg", "video/posters/05-01.png", "video/posters/05.jpg", "video/posters/06-01.png", "video/posters/06.jpg", "video/posters/07-01.png", "video/posters/07.jpg", "video/posters/10-01.png", "video/posters/10.jpg", "video/posters/11-01.png", "video/posters/11.jpg", "video/posters/12-01.png", "video/posters/12.jpg", "video/posters/13-01.png", "video/posters/13.jpg", "video/posters/14-01.png", "video/posters/14.jpg", "video/posters/15-01.png", "video/posters/15.jpg", "video/posters/16-01.png", "video/posters/16.jpg", "video/posters/17-01.png", "video/posters/17.jpg", "video/posters/18-01.png", "video/posters/18.jpg", "video/posters/19-01.png", "video/posters/19.jpg", "video/posters/20-01.png", "video/posters/20.jpg", "video/posters/21-01.png", "video/posters/21.jpg", "video/posters/22-01.png", "video/posters/22.jpg", "video/posters/23-01.png", "video/posters/23.jpg", "video/posters/24-01.png", "video/posters/24.jpg", "video/posters/25-01.png", "video/posters/25.jpg", "video/posters/26-01-m.png", "video/posters/26-01.png", "video/posters/26.jpg", "video/posters/27-01.png", "video/posters/27.jpg", "video/posters/29-01.png", "video/posters/29.jpg", "video/posters/30-01.png", "video/posters/30.jpg", "video/posters/31-01.png", "video/posters/31.jpg", "video/posters/32-01.png", "video/posters/32.jpg", "video/posters/33-01.png", "video/posters/33.jpg", "video/posters/34-01.png", "video/posters/34.jpg", "video/posters/35-01.png", "video/posters/35.jpg", "video/posters/36-01-01.png", "video/posters/36-01.png", "video/posters/36.jpg", "video/posters/37-01-01.png", "video/posters/37-01.png", "video/posters/37-11.png", "video/posters/37-22.png", "video/posters/37.jpg", "video/posters/38-01-01.png", "video/posters/38-01.png", "video/posters/38.jpg", "video/posters/39-01.png", "video/posters/39.jpg", "video/posters/40-01.png", "video/posters/40.jpg", "video/posters/41-01.png", "video/posters/41.jpg", "video/posters/43-01.png", "video/posters/43-02.png", "video/posters/43-03.png", "video/posters/43-04.png", "video/posters/green-01-01.png", "video/posters/red-01-01.png", "video/posters/yellow-01-01.png"];

;(function () {
  'use strict';

  config.$inject = ["$stateProvider", "$urlRouterProvider", "courseDataObj"];
  run.$inject = ["$state", "$rootScope", "$timeout", "staticService", "userService", "scormWrapper", "courseInfo", "courseDataObj"];
  angular.module('courseApp', ['ui.router', 'ngAnimate', 'ngSanitize', 'vjs.video']).constant('courseDataObj', courseStructure).constant('testDataObj', testStructure).constant('courseInfo', {
    bookmark: {
      page: 1,
      chapterPage: 1,
      chapter: 1
    },
    exercises: [],
    notes: [],
    testScore: 0
  }).directive('compile', ['$compile', function ($compile) {
    return function (scope, element, attrs) {
      scope.$watch(function (scope) {
        // watch the 'compile' expression for changes
        return scope.$eval(attrs.compile);
      }, function (value) {
        // when the 'compile' expression changes assign it into the current DOM
        element.html(value);
        // compile the new DOM and link it to the current scope.
        // NOTE: we only compile .childNodes so that we don't get into infinite loop compiling ourselves
        $compile(element.contents())(scope);
      });
    };
  }]).config(config).run(run);

  /* @ngInject */
  function config($stateProvider, $urlRouterProvider, courseDataObj) {

    $stateProvider.state('page', {
      url: '/chapter/:chapter/page/:page',
      views: {
        'header': {
          templateUrl: 'js/components/header/headerTmpl.html',
          controller: 'HeaderCtrl',
          controllerAs: '$ctrl'
        },
        'content': {
          templateUrl: function templateUrl($stateParams) {

            // переход по кастомным папкам типа «page04a»
            var chapterLocation = courseDataObj.chapters[$stateParams.chapter - 1].chapter_location,
                pageLocation = courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].location;
            // console.log('::main:: confog:', chapterLocation, pageLocation)
            return "pages/" + chapterLocation + "/" + pageLocation + "/index.html";
          },
          controller: 'PageCtrl',
          controllerAs: '$ctrl'
        },
        'footer': {
          templateUrl: 'js/components/footer/footerTmpl.html',
          controller: 'FooterCtrl',
          controllerAs: '$ctrl'
        }
      }
    });
    // .state('test', {})

    // $urlRouterProvider.otherwise('/chapter/1/page/1')
  }

  /* @ngInject */
  function run($state, $rootScope, $timeout, staticService, userService, scormWrapper, courseInfo, courseDataObj) {

    var _preload = function preload() {
      if (_preload != null) {
        // preload.close();
      }
      _preload = new createjs.LoadQueue(false);
      _preload.on('fileload', onFileload, this);
      _preload.on('progress', onProgress, this);
      _preload.on('complete', onComplete, this);
      _preload.on('error', onError, this);
      _preload.loadManifest(manifest);
    };

    var onFileload = function onFileload() {
      // 
    };
    var onProgress = function onProgress() {
      // 
    };
    var onComplete = function onComplete() {
      // alert('img laded!')
      // console.log('all img loaded!')
      $state.go('page', { chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage });
    };
    var onError = function onError(e) {
      console.error('can`t load image!', e.data.src);
    };

    _preload();

    scormWrapper.setAPIVersion("1.2");
    scormWrapper.doLMSInitialize();

    if (scormWrapper.LMSIsInitialized()) {
      console.info('<:: Load from LMS ::>');

      var completionStatus = scormWrapper.doLMSGetValue('cmi.completion_status');
      console.info('Course completion status » ' + completionStatus);

      if (completionStatus === 'not attempted') {
        scormWrapper.doLMSSetValue('cmi.suspend_data', '');
      }

      // alert('suspend_data >> '+suspend_data)
      var suspend_data = scormWrapper.doLMSGetValue('cmi.suspend_data').replace(/\*\#/g, '[').replace(/\#\*/g, ']');

      var score = scormWrapper.doLMSGetValue('cmi.core.score.raw');
      console.log('%c LMS score -> ', 'color:#C0FFEE;', score);

      courseInfo.testScore = score;
      console.log('%c courseInfo testScore -> ', 'color:#BADA55;', courseInfo.testScore);

      if (suspend_data.length > 0) {
        try {
          courseInfo = JSON.parse(suspend_data);
          window.bookmark = courseInfo.bookmark;
          window.bookmark.loaded = false;
          window.exercises = courseInfo.exercises;
          window.exercises.loaded = false;
          userService.loadExs(courseInfo.exercises);
          userService.loadNotes(courseInfo.notes);
        } catch (e) {
          console.error('Что-то пошло не так... \n', e);
        }
      }

      console.info('main:: courseInfo', courseInfo);
    }

    // alert('start change bookmark')
    // $state.go('page', ({chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage}));

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState) {

      // stop audio
      staticService.stopAudio(true);
      // replace current position of audio slider to zero
      staticService.setAudioTime(0);

      staticService.setBookmark(Number(toParams.page), Number(toParams.chapter));

      userService.sendToLMS();
    });

    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
      $timeout(function () {
        // stop audio
        staticService.stopAudio(false);
      }, 100);
    });
  }
})();
/********************************************************************************
**
** Prometheus Research SCORM API Wrapper
** 
** Supports:
**
** SCORM 1.2, SCORM 2004.[1]
**
** The following is a porting of the code from the
** original APIWrapper.js file to Angular JS with a 
** number of improvements from
** Concurrent Technologies Corporation (CTC) released
** under the MIT style license available
** on the ADL scorm website [2]
** 
** The code has been updated to wrap the original functions in
** in angularjs and extend support for SCORM 2004 [4].
** It draws upon some of concepts offered in the Pipewerks[3]
** 
** The code is served as an AngularJS service [5].
** 
** References/Inspiration:
** 
** [1] ADL
** http://www.adlnet.gov/scorm
** 
** [2] CTC SCORM SCORM 1.2 API wrapper
** http://www.adlnet.gov/resources/scorm-1-2-content-packages?type=software_downloads
** 
** [3] Pipewerks SCORM wrapper
** https://github.com/pipwerks/scorm-api-wrapper
** 
** [4] SCORM.com
** http://scorm.com/scorm-explained/technical-scorm/run-time/
** 
** [5] Angularjs services
** http://docs.angularjs.org/guide/dev_guide.services
**
** Copyright (c) Prometheus Research 2014
** Copyright (c) Philip Hutchison
** Copyright (c) Concurrent Technologies Corporation (CTC)
** ---------------------------------------------------------------------------------
** License:
** 
** 
** Permission is hereby granted, free of charge, to any person obtaining a 
** copy of this software and associated documentation files (the “Software”), 
** to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the Software is furnished to
** do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in 
** all copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
** 
*********************************************************************************/
;(function () {
  "use strict";

  angular.module('courseApp').service('scormWrapper', scormWrapper);

  /* @ngInject */
  function scormWrapper() {

    var version = "Auto";
    var API = false;
    var scormVersions = ["Auto", "1.2", "2004"];

    this.setAPIVersion = function (scormVersion) {

      scormVersion = scormVersion || "Auto";
      console.log('set SCORM ver:', scormVersion);

      var v = scormVersions.indexOf(scormVersion.toString());
      v > -1 ? version = scormVersions[v] : console.log("Not found, default to Auto");
      return version;
    };

    this.getAPIVersion = function () {
      return version;
    };

    this.isAvailable = function () {
      return true;
    };

    this.doLMSInitialize = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSInitialize", "Initialize")(""));
    };

    this.doLMSFinish = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSFinish", "Terminate")(""));
    };

    this.doLMSGetValue = function (parameter) {
      return this.getAPICall("LMSGetValue", "GetValue")(parameter);
    };

    this.doLMSSetValue = function (parameter, value) {
      return this.cmiBooleanToJs(this.getAPICall("LMSSetValue", "SetValue")(parameter, value));
    };

    this.doLMSCommit = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSCommit", "Commit")(""));
    };

    this.doLMSGetLastError = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.doLMSGetErrorString = function (errorCode) {
      return this.getAPICall("LMSGetErrorString", "GetErrorString")(errorCode.toString());
    };

    this.doLMSGetDiagnostic = function (errorCode) {
      return this.getAPICall("LMSGetDiagnostic", "GetDiagnostic")(errorCode.toString());
    };

    this.LMSIsInitialized = function () {
      return API;
    };

    this.ErrorHandler = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.cmiBooleanToJs = function (value) {
      return value === "1" || value === 1 || value === "true" || value === true;
    };

    this.getAPIHandle = function () {

      var win = window;

      if (win.parent && win.parent != win) {
        this.findAPI(win.parent);
      }

      if (!API && win.top.opener) {
        this.findAPI(win.top.opener);
      } else if (!API) {
        console.log("Unable to find API adapter");
      }
    };

    this.findAPI = function (win) {

      var findAttempts = 0,
          findAttemptLimit = 500;

      for (findAttempts; findAttempts < findAttemptLimit; findAttempts++) {

        if (win.API && (version === "1.2" || version === "Auto")) {
          API = win.API;
          version = "1.2";
          break;
        } else if (win.API_1484_11 && (version === "2004" || version === "Auto")) {
          API = win.API_1484_11;
          version = "2004";
          break;
        } else if (win.parent && win.parent != win) {
          findAttempts++;
          win = win.parent;
        }
      }
    };

    this.getAPICall = function (funcname12, funcname2004) {

      if (!API) {
        this.getAPIHandle();
        if (!API) {
          return function () {
            console.log("No API found, can't execute: " + funcname12 + " or " + funcname2004);
          };
        }
      }

      switch (version) {
        case "2004":
          return function () {
            return API[funcname2004].apply(API, arguments);
          };

        case "1.2":
          return function () {
            return API[funcname12].apply(API, arguments);
          };
      }
    };
  };
})();
;(function () {
  'use strict';

  staticService.$inject = ["courseDataObj", "courseInfo"];
  angular.module('courseApp').service('staticService', staticService);

  /* @ngInject */
  function staticService(courseDataObj, courseInfo) {
    var _this = this,
        _arguments = arguments;

    var modals = {
      'menu': { state: false },
      'stats': { state: false },
      'about': { state: false },
      'notes': { state: false },
      'help': { state: false },
      'exercise': { state: false },
      'video': { state: false },
      'cloak': { state: false },
      'addInfo': { state: false }
    };

    //
    this.getModalState = function (index) {
      // console.log('staticService:: getModalState: index', index)
      return modals[index].state;
    };

    this.showModal = function (index, headText, bodyText, answer, specific) {
      // console.log('staticService:: showModal:', index, modals[index])
      if (modals[index].state) {
        modals[index].state = false;
      } else {
        _this.closeModals();

        if (index == 'exercise') {
          document.getElementsByClassName('modal_head')[0].innerHTML = headText;
          document.getElementsByClassName('modal_body')[0].innerHTML = bodyText;
          if (specific != "final") document.getElementById('pie-chart').style.display = 'none';
          modals['exercise'].content = bodyText;
          modals['exercise'].answer = answer;
          modals['exercise'].heading = headText;
        }
        modals[index].state = true;
        modals['cloak'].state = true;
      }
    };

    this.closeModals = function (index) {
      for (var key in modals) {
        if (key == 'video' && modals[key].state == true) {
          var oldPlayer = document.querySelector('.my-home-video');
          // console.warn('closeModals:: oldPlayer:', oldPlayer)
          videojs(oldPlayer).dispose();
        }
        modals[key].state = false;
      }
    };

    //
    this.getCourseName = function () {
      return {
        course: courseDataObj.course,
        description: courseDataObj.description
      };
    };

    // call getChapterObj() from 'HeaderCtrl' controller
    this.getChapterObj = function (index) {
      return courseDataObj.chapters[index];
    };

    this.getChaptersTotal = function () {
      return courseDataObj.chapters;
    };

    this.getPageTotal = function () {
      var totalPages = 0;
      for (var i = 0; i < courseDataObj.chapters.length; i++) {
        totalPages += courseDataObj.chapters[i].pages.length;
      }
      return totalPages;
    };
    this.getBookmark = function () {
      return courseInfo.bookmark;
    };

    this.setBookmark = function (chapterPage, chapter) {
      console.warn('staticService:: try to setBookmark:', chapterPage, chapter);
      courseInfo.bookmark.chapterPage = chapterPage;
      courseInfo.bookmark.chapter = chapter;

      if (chapter == 1) {
        courseInfo.bookmark.page = chapterPage;
      } else {
        var tmpPages = 0;
        for (var i = 0; i < chapter - 1; i++) {
          tmpPages += courseDataObj.chapters[i].pages.length;
        }
        courseInfo.bookmark.page = tmpPages + chapterPage;
      }
      console.log('staticService:: setBookmark ChP: %d, Ch: %d, Page: %d', chapterPage, chapter, courseInfo.bookmark.page);
    };

    // get exercise data array
    this.getData = function ($stateParams, prop) {
      // console.log('staticService:: courseDataObj:', courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1])
      if (prop == 'data') {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data;
      } else {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data[prop];
      }
    };

    // get chapter's title
    this.getTitle = function ($stateParams) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].title;
    };

    // get message array
    this.getMessage = function ($stateParams, num) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].messages[num];
    };

    //for task-marker-note
    this.setMarkerNote = function ($stateParams, index, marker) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data.questionList[index].marker = marker;
    };

    /**
    *  audio section
    */
    var audioTime = 0,
        stopAudio = false;

    this.setAudioTime = function (time) {
      audioTime = time;
    };

    this.getAudioTime = function () {
      return audioTime;
    };

    this.stopAudio = function (bool) {
      stopAudio = bool;
    };

    this.getStopAudio = function () {
      return stopAudio;
    };

    var waitAudio = false;
    this.startAudio = function (toggler) {
      if (_arguments.length === 0) {
        return waitAudio;
      };
      waitAudio = toggler;
    };

    /***************************************************************
    /  For addInfo modal
    /**************************************************************/

    this.addInfo = function (content, state, heading) {
      modals['addInfo'].content = content;
      modals['addInfo'].state = state;
      modals['addInfo'].heading = heading;
    };

    this.getAddInfo = function () {
      return modals['addInfo'];
    };

    this.getExercise = function () {
      return modals['exercise'];
    };
  }
})();

;(function () {
  'use strict';

  userService.$inject = ["courseDataObj", "testDataObj", "$document", "scormWrapper", "courseInfo"];
  angular.module('courseApp').service('userService', userService);

  function userService(courseDataObj, testDataObj, $document, scormWrapper, courseInfo) {
    var _this2 = this;

    var userDataObj = courseDataObj.chapters.map(function (elem) {
      return {
        id: elem.id,
        visited: 1,
        completed: false,
        pages: elem.pages.map(function (item, index) {
          return {
            id: item.id,
            type: item.type,
            title: item.title,
            visited: index === 0 ? true : false,
            completed: ''
          };
        })
      };
    });

    this.exs = [];
    this.notes = [];
    this.notes1 = [];
    if (!this.start_date) {
      this.start_date = new Date();
    }
    courseDataObj.chapters.forEach(function (elem, index) {
      elem.pages.map(function (page, i) {

        if (page.type == 'exercise') {
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
        }

        if (page.type == 'note_page') {
          // console.info('note_page', page)

          var fields = [];
          for (var _i = 0; _i < page.data.task_fields; _i++) {
            fields.push({
              id: _i,
              text: ""
            });
          }

          _this2.notes.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: fields
          });
        }

        if (page.type == 'note_exercise') {
          // console.info('note_page', page)
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
          var _fields = [];
          for (var ik = 0; ik < page.data.task_fields; ik++) {
            _fields.push({
              id: ik,
              text: ""
            });
          }

          _this2.notes1.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: _fields
          });
        }
      });
    });
    // console.warn('userService:: setUp exs Arr', JSON.stringify(this.exs));
    // console.warn('userService:: setUp notes Arr', JSON.stringify(this.notes));

    // this.testData = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));
    this.ConvertMilliSecondsIntoSCORM2004Time = function (intTotalMilliseconds) {

      var ScormTime = "";

      var HundredthsOfASecond; //decrementing counter - work at the hundreths of a second level because that is all the precision that is required 

      var Seconds; // 100 hundreths of a seconds 
      var Minutes; // 60 seconds 
      var Hours; // 60 minutes 
      var Days; // 24 hours 
      var Months; // assumed to be an "average" month (figures a leap year every 4 years) = ((365*4) + 1) / 48 days - 30.4375 days per month 
      var Years; // assumed to be 12 "average" months 

      var HUNDREDTHS_PER_SECOND = 100;
      var HUNDREDTHS_PER_MINUTE = HUNDREDTHS_PER_SECOND * 60;
      var HUNDREDTHS_PER_HOUR = HUNDREDTHS_PER_MINUTE * 60;
      var HUNDREDTHS_PER_DAY = HUNDREDTHS_PER_HOUR * 24;
      var HUNDREDTHS_PER_MONTH = HUNDREDTHS_PER_DAY * ((365 * 4 + 1) / 48);
      var HUNDREDTHS_PER_YEAR = HUNDREDTHS_PER_MONTH * 12;

      HundredthsOfASecond = Math.floor(intTotalMilliseconds / 10);

      Years = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_YEAR);
      HundredthsOfASecond -= Years * HUNDREDTHS_PER_YEAR;

      Months = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MONTH);
      HundredthsOfASecond -= Months * HUNDREDTHS_PER_MONTH;

      Days = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_DAY);
      HundredthsOfASecond -= Days * HUNDREDTHS_PER_DAY;

      Hours = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_HOUR);
      HundredthsOfASecond -= Hours * HUNDREDTHS_PER_HOUR;

      Minutes = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MINUTE);
      HundredthsOfASecond -= Minutes * HUNDREDTHS_PER_MINUTE;

      Seconds = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_SECOND);
      HundredthsOfASecond -= Seconds * HUNDREDTHS_PER_SECOND;

      if (Years > 0) {
        ScormTime += Years + "Y";
      }
      if (Months > 0) {
        ScormTime += Months + "M";
      }
      if (Days > 0) {
        ScormTime += Days + "D";
      }

      //check to see if we have any time before adding the "T" 
      if (HundredthsOfASecond + Seconds + Minutes + Hours > 0) {

        ScormTime += "T";

        if (Hours > 0) {
          ScormTime += Hours + "H";
        }

        if (Minutes > 0) {
          ScormTime += Minutes + "M";
        }

        if (HundredthsOfASecond + Seconds > 0) {
          ScormTime += Seconds;

          if (HundredthsOfASecond > 0) {
            ScormTime += "." + HundredthsOfASecond;
          }

          ScormTime += "S";
        }
      }

      if (ScormTime == "") {
        ScormTime = "0S";
      }

      ScormTime = "P" + ScormTime;
      return ScormTime;
    };

    this.loadExs = function (data) {
      // alert('load exs!')
      console.log('load exs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('exs not empty')
        _this2.exs = data;
      }
      courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
    };
    this.loadNotes = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
    };

    this.loadNotes1 = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      courseInfo.notes1 = JSON.parse(JSON.stringify(_this2.notes));
    };

    this.currentTestQuestion = {};
    this.setCurrentTestQuestion = function (question, answers) {
      _this2.currentTestQuestion.question = question;
      _this2.currentTestQuestion.answers = answers;
    };

    // console.log('userService:: exs',this.exs)
    this.getExs = function () {
      // console.log('userService:: getExs, exs', this.exs)
      return _this2.exs;
    };

    this.getPageVisit = function () {
      //
    };
    this.setPageVisit = function (module, page) {
      //
    };
    this.setUserProgress = function (score, status, chapter, page) {
      // console.log('userService:: setUserProgress this.exs', this.exs)
      // console.log('userService:: setUserProgress income params', score, status, chapter, page)
      _this2.exs.forEach(function (item) {
        console.log('=>', item, chapter, page);
        if (item.chapter_id == chapter && item.page_id == page) {
          item.score = score;
          item.status = status;
          console.log('userService:: setUserProgress----------------------------------------------:', item.score, item.status, chapter, page);
        }
      });
      // console.log('userService:: setUserProgress > this.exs',this.exs)

      courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
      // courseInfo.excercises = this.exs;

      _this2.sendToLMS();
    };

    this.getUserNotes = function () {
      return _this2.notes;
    };

    this.getUserNotes1 = function () {
      return _this2.notes1;
    };

    this.setUserNotes = function (notes, chapter, page) {

      console.log('userService:: setNotes-------------------------------------------------------:', notes, chapter, page);

      _this2.notes.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          item = notes;
        }
      });
      console.log('this.notes-------------------------------------------------------:', _this2.notes);
      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
      console.warn('courseInfo.notes', courseInfo.notes);
      _this2.sendToLMS();
    };
    this.sendToLMS = function () {
      var session_time;
      var end_date = new Date();

      session_time = end_date - _this2.start_date; // in milliseconds
      session_time = _this2.ConvertMilliSecondsIntoSCORM2004Time(session_time);

      _this2.dataCourse = courseInfo;
      _this2.dataCourse.exercises.forEach(function (elem) {
        delete elem.title;
      });
      _this2.dataCourse.notes.forEach(function (elem) {
        delete elem.title;
      });

      var suspendData = JSON.stringify(_this2.dataCourse, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }

        return value;
      }).replace(/\[/g, '*#').replace(/\]/g, '#*');
      console.info('sendToLMS suspendData: ', suspendData);
      console.info('sendToLMS suspendData.length: ', suspendData.length);
      console.warn('Put => session_time: ' + session_time);
      scormWrapper.doLMSSetValue('cmi.suspend_data', suspendData);
      scormWrapper.doLMSSetValue('cmi.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.score.raw', courseInfo.testScore);

      if (courseInfo.testScore >= 60) {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'completed');
      } else {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'incomplete');
      }

      scormWrapper.doLMSCommit();
    };

    window.onbeforeunload = function (e) {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');

      var e = e || window.event;

      //IE & Firefox
      if (e) {}

      // For Safari
      scormWrapper.doLMSFinish();
    };

    this.closeCourse = function () {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');
      _this2.sendToLMS();
      scormWrapper.doLMSFinish();
      var a = confirm('Вы уверены, что хотите закончить прохождение курса?');
      if (a) {
        //close_window();
        document.getElementsByClassName('course-wrapper')[0].innerHTML = '<p class="close-msg">Работа с модулем курса завершена.</p>';
      }
    };
  }
})();
;(function () {
  'use strict';

  CourseCtrl.$inject = ["$http", "$sce", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('CourseCtrl', CourseCtrl);

  /* @ngInject */
  function CourseCtrl($http, $sce, $stateParams, staticService, userService) {
    var self = this;

    //if (device.mobile() && device.portrait()) {
    //  self.turnMobile = true;
    //} else {
    //  self.turnMobile = false;
    //}
  }
})();
;(function () {
  'use strict';

  PageCtrl.$inject = ["$document", "staticService", "$scope", "courseInfo"];
  angular.module('courseApp').controller('PageCtrl', PageCtrl);

  /* @ngInject */
  function PageCtrl($document, staticService, $scope, courseInfo) {

    this.tabNum = 1;

    $scope.getModalState = function (index) {
      return staticService.getModalState(index);
    };
    $scope.closeModals = function () {
      return staticService.closeModals();
    };

    // uses for sync of audio and content changes (some kind of animation)
    this.time = function () {
      return staticService.getAudioTime();
    };
  }
})();
;(function () {
  'use strict';

  AccordionCtrl.$inject = ["$scope", "$element", "$attrs"];
  AccordionPanelCtrl.$inject = ["$scope", "$timeout", "$element", "$attrs"];
  AccordionContentCtrl.$inject = ["$document", "$scope", "$element", "$attrs"];
  angular.module('courseApp').component('accordion', {
    transclude: true,
    template: '<div class="accordion" ng-transclude></div>',
    controller: 'AccordionCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionCtrl', AccordionCtrl).component('accordionPanel', {
    require: {
      'parent': '^accordion'
    },
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: 'js/components/accordion/accordionPanelTmpl.html',
    controller: 'AccordionPanelCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionPanelCtrl', AccordionPanelCtrl).controller('AccordionContentCtrl', AccordionContentCtrl);

  /* @ngInject */
  function AccordionCtrl($scope, $element, $attrs) {
    var self = this;

    var panels = [];
    // here we take the panel and add to our list of panels
    // to preselect the first panel we call turnOn function on the first panel
    self.addPanel = function (panel) {
      console.warn("arguments.length: ", arguments.length);
      if (arguments.length === 0) {
        console.warn("panels(if (arguments.length === 0)): ", panels);
        return {
          index: panels.length - 1,
          firstOpen: $attrs.firstOpen
        };
      };
      panels.push(panel);
      console.warn("panels(panels.push(panel);): ", arguments.length);
      if ($attrs.firstOpen === 'true' && panel === panels[0]) {
        return false;
      }
      return true;
    };
    // when a panel is selected we would want to open the content
    // here we take the panel find it in our array and turn if on if not selected
    // and off it.
    self.selectPanel = function (panel, isCollapsed) {
      for (var i in panels) {
        if (panel === panels[i]) {
          if (isCollapsed) {
            panels[i].turnOn();
          } else {
            panels[i].turnOff();
          }
        } else {
          panels[i].turnOff();
        }
      }
    };
  }

  /* @ngInject */
  function AccordionPanelCtrl($scope, $timeout, $element, $attrs) {

    var self = this;
    $scope.isCollapsed = true; // panel is closed on default

    // self.hintShow needs to show/hide hint on panels of accordion
    self.hintShow = $($element).index() === 0 || $($element).index() === 1 ? false : 'visited';
    $timeout(function () {
      self.hintShow = self.hintShow === false ? true : self.hintShow;
    }, 10000);

    // register the panel in init
    self.$onInit = function () {
      var accordionState = {};

      $scope.isCollapsed = self.parent.addPanel(self);
      accordionState = self.parent.addPanel();
      if (accordionState.firstOpen === 'true' && accordionState.index === 1) {
        self.hintShow = false;
      } else if (accordionState.firstOpen === 'false' && accordionState.index === 0) {
        self.hintShow = false;
      } else {
        self.hintShow = 'visited';
      }
    };

    // Turns on the panel
    self.turnOn = function () {
      $scope.isCollapsed = false;
    };

    // Turns off the panel
    self.turnOff = function () {
      $scope.isCollapsed = true;
    };

    $scope.toggle = function () {
      self.hintShow = 'visited';
      self.parent.selectPanel(self, $scope.isCollapsed);
    };
  }

  // /* @ngInject */
  function AccordionContentCtrl($document, $scope, $element, $attrs) {
    var element = $element[0];
    var start = 0;

    $scope.$watch($attrs.collapse, function (collapse) {

      var newHeight = collapse ? 0 : 1;
      if (newHeight === 1) {
        if (start === 0) {

          start = 1;
          (function (elem) {
            setTimeout(function () {
              return element.style.height = getElementAutoHeight() + 'px';
            }, 460);
          })(element);
        } else {
          return element.style.height = getElementAutoHeight() + 'px';
        }
      }
      return element.style.height = newHeight + 'px';
    });

    function getElementAutoHeight() {
      var currentHeight = getElementCurrentHeight();

      element.style.height = 'auto';
      var autoHeight = getElementCurrentHeight();

      element.style.height = currentHeight;
      // Force the browser to recalc height after moving it back to normal
      getElementCurrentHeight();

      return autoHeight;
    }

    function getElementCurrentHeight() {
      return element.offsetHeight;
    }
  }
})();

(function () {
  'use strict';

  AddInfoCtrl.$inject = ["$element", "$attrs", "staticService"];
  angular.module('courseApp').component('addInfo', {
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: './js/components/add-info/addInfoTmpl.html',
    controller: 'AddInfoCtrl',
    controllerAs: '$ctrl'
  }).controller('AddInfoCtrl', AddInfoCtrl);

  /* @ngInject */
  function AddInfoCtrl($element, $attrs, staticService) {
    var self = this;

    self.getAddInfo = function () {
      staticService.addInfo($element.find('ng-transclude').prop('innerHTML'), true, $attrs.heading);
    };
  }
})();
;(function () {
  'use strict';

  CustomAudioCtrl.$inject = ["$document", "$interval", "staticService"];
  angular.module('courseApp').component('customAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hassound: '@'
    },
    templateUrl: 'js/components/custom-audio/customAudioTmpl.html',
    controller: 'CustomAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomAudioCtrl', CustomAudioCtrl);

  /* @ngInject */
  function CustomAudioCtrl($document, $interval, staticService) {
    var _this3 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hassound)
      if (_this3.hassound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init');
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      _this3.audio = $document[0].createElement('audio');
      _this3.audio.src = "pages/" + _this3.chapter + "/" + _this3.page + "/audio/page-" + _this3.chapter + "-" + _this3.page + ".mp3";

      _this3.audio.oncanplaythrough = function () {

        _this3.changePlayPause = function () {

          if (_this3.audio.paused) {
            _this3.audio.play();
            _this3.play = '#pause';
          } else {
            _this3.audio.pause();
            _this3.play = '#play';
          }
        };

        _this3.updateSeekSlider = function () {
          var seekNewPos = _this3.audio.currentTime * (100 / _this3.audio.duration),
              // position in seek slider
          curmins = Math.floor(_this3.audio.currentTime / 60),
              // current minutes value
          cursecs = Math.floor(_this3.audio.currentTime - curmins * 60),
              // current seconds value
          durmins = Math.floor(_this3.audio.duration / 60),
              // audio duration in minutes
          dursecs = Math.floor(_this3.audio.duration - durmins * 60); // audio duration in rest seconds

          _this3.seekPos = Math.floor(seekNewPos);

          if (curmins < 10) {
            curmins = '0' + curmins;
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs;
          };
          if (durmins < 10) {
            durmins = '0' + durmins;
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs;
          };

          _this3.curTime = curmins + ':' + cursecs; // display current time in the audio player
          _this3.durTime = durmins + ':' + dursecs; //  display audio duration time in the audio player
          if (_this3.audio.currentTime === _this3.audio.duration) {
            _this3.play = '#play';
          }
        };

        _this3.changeSeekPos = function () {
          _this3.audio.currentTime = _this3.audio.duration * (_this3.seekPos / 100);
        };

        $interval(function () {

          if (!_this3.audio) return;
          _this3.updateSeekSlider();

          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this3.audio.currentTime);

          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this3.audio.pause();
            _this3.audio = null;
            return;
          }
        }, 100);

        _this3.changeMuteState = function () {
          _this3.mute = '#unmute';

          if (_this3.audio.muted) {
            _this3.audio.muted = false;
            _this3.mute = '#unmute';
          } else {
            _this3.audio.muted = true;
            _this3.mute = '#mute';
          }
        };

        _this3.changeVolume = function () {
          _this3.audio.volume = _this3.volume;
        };

        _this3.restart = function () {
          _this3.audio.currentTime = 0;
          _this3.audio.play();
          _this3.play = '#pause';
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  CustomMiniAudioCtrl.$inject = ["$attrs", "$document", "$interval", "staticService"];
  angular.module('courseApp').component('customMiniAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hasSound: '@',
      src: '@'
    },
    templateUrl: 'js/components/custom-mini-audio/customMiniAudioTmpl.html',
    controller: 'CustomMiniAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomMiniAudioCtrl', CustomMiniAudioCtrl);

  /* @ngInject */
  function CustomMiniAudioCtrl($attrs, $document, $interval, staticService) {
    var _this4 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hasSound)
      if (_this4.hasSound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init');
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      _this4.audio = $document[0].createElement('audio');
      _this4.audio.src = _this4.src;
      console.log("SRC ", _this4.audio.src);
      _this4.audio.autoplay = false;

      _this4.audio.oncanplaythrough = function () {

        _this4.changePlayPause = function () {

          if (_this4.audio.paused) {
            _this4.audio.play();
            _this4.play = '#pause';
          } else {
            _this4.audio.pause();
            _this4.play = '#play';
          }
        };

        $interval(function () {
          if (!_this4.audio) return;
          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this4.audio.currentTime);
          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this4.audio.pause();
            _this4.audio = null;
            return;
          }
        }, 100);
      };
    };
  }
})();
(function () {
  'use strict';

  CustomVideoCtrl.$inject = ["$document", "$timeout", "staticService"];
  angular.module('courseApp').component('customVideo', {
    bindings: {
      src: '@'
    },
    templateUrl: 'js/components/custom-video/customVideoTmpl.html',
    controller: 'CustomVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomVideoCtrl', CustomVideoCtrl);

  /* @ngInject */
  function CustomVideoCtrl($document, $timeout, staticService) {
    var self = this;

    self.play = 'play'; // variable for play/pause btn that toggle icons
    self.mute = 'unmute'; // variable for mute/unmute btn that toggle icons
    self.volume = 1; // define volume in volume slider
    self.seekPos = 0;

    self.$onInit = function () {
      var video = $($document).find('.custom-video__video')[0];

      video.oncanplaythrough = function () {
        console.log('here');
        $(video).on('timeupdate', updateSeekSlider);

        updateSeekSlider();

        self.changePlayPause = function () {
          if (video.paused) {
            video.play();
            self.play = 'pause';
          } else {
            video.pause();
            self.play = 'play';
          }
        };

        self.changeSeekPos = function () {
          video.currentTime = video.duration * (self.seekPos / 100);
        };

        function updateSeekSlider() {
          var seekNewPos = video.currentTime * (100 / video.duration),
              curhours = Math.floor(video.currentTime / 3600),
              curmins = Math.floor(video.currentTime / 60),
              cursecs = Math.floor(video.currentTime - curmins * 60),
              durhours = Math.floor(video.duration / 3600),
              durmins = Math.floor(video.duration / 60),
              dursecs = Math.floor(video.duration - durmins * 60);

          self.seekPos = Math.floor(seekNewPos);
          if (video.currentTime === video.duration) {
            self.play = 'play';
          }

          if (curmins < 10) {
            curmins = '0' + curmins || '00';
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs || '00';
          };
          if (durmins < 10) {
            durmins = '0' + durmins || '00';
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs || '00';
          };
          $timeout(function () {

            self.curtimetext = curmins + ':' + cursecs;
            self.durtimetext = durmins + ':' + dursecs;
          });
        }

        self.changeMuteState = function () {

          if (video.muted) {
            video.muted = false;
            self.mute = 'unmute';
          } else {
            video.muted = true;
            self.mute = 'mute';
          }
        };

        self.changeVolume = function () {
          video.volume = self.volume;
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  TestCtrl.$inject = ["$scope", "$state", "$compile", "$stateParams", "testDataObj", "staticService", "userService", "courseInfo"];
  angular.module('courseApp').component('finalTest', {
    templateUrl: 'js/components/final-test/finalTestTmpl.html',
    controller: 'TestCtrl',
    controllerAs: '$ctrl'
  }).controller('TestCtrl', TestCtrl);

  /* @ngInject */
  function TestCtrl($scope, $state, $compile, $stateParams, testDataObj, staticService, userService, courseInfo) {
    var _this5 = this;

    /**
    *   tasks:
    *     single, multi, sortab
    */

    // составляем список вопросов и мешаем его
    // this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));
    //console.log("heeeeeeeeeeeeeeeeeeeeeeeeeere: ",$stateParams.chapter - 1,$stateParams.page);

    //костыль для testStructure
    var chapter = -1;
    if ($stateParams.chapter == 1) chapter = 0;else if ($stateParams.chapter == 4) chapter = 1;

    this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
    // console.log('questions!!!!!!!!!!!!!! ', this.questionList);

    //номер вопроса
    this.currentQuest = 0;

    // состояния теста: 
    this.state = 0;
    $scope.$on('myTestState', function (e, data) {
      _this5.state = data;
    });

    this.testScore = 0;

    this.testRight = 0;

    this.testTask = document.getElementsByClassName('test-task')[0];

    this.buildQuestion = function () {

      _this5.questionList[_this5.currentQuest].answers = _.shuffle(_this5.questionList[_this5.currentQuest].answers);
      userService.setCurrentTestQuestion(_this5.questionList[_this5.currentQuest].question, _this5.questionList[_this5.currentQuest].answers);

      // console.warn('TestCtrl:: buildQuestion:',this.questionList[this.currentQuest])
      var tmpstr = '';
      switch (_this5.questionList[_this5.currentQuest].type) {
        case 'single':
          tmpstr = '<task-single-choice test="true"></task-single-choice>';
          break;
        case 'multi':
          tmpstr = '<task-multi-choice test="true"></task-multi-choice>';
          break;
      }

      _this5.testTask.appendChild($compile(tmpstr)($scope)[0]);
      //console.warn($compile(tmpstr)($scope))
    };

    this.nextQuestion = function (e) {
      if (e.target.classList.contains('btn_disabled')) {
        return;
      }

      _this5.checkAnswer();

      _this5.currentQuest++;
      if (_this5.currentQuest < _this5.questionList.length) {
        _this5.state = 0;
        _this5.testTask.innerHTML = '';
        _this5.buildQuestion();
      } else {
        _this5.state = 2;
        _this5.currentQuest--;
        // console.log('TEST::>', this.testScore/(this.questionList.length))
        courseInfo.testScore = Math.round(_this5.testScore / _this5.questionList.length);
        courseInfo.testRight = _this5.testRight;
        // alert('konec')
        // show result window
        // to showModal: modal id, head comment, text comment
        userService.sendToLMS();
        if (courseInfo.testScore < 75) {
          _this5.chartTitle = 'Тест не пройден.';
        } else {
          _this5.chartTitle = 'Тест пройден!';
        }
        console.log("this.chartTitle", _this5.chartTitle);
        Chart.defaults.global.defaultFontSize = 22;
        Chart.defaults.global.defaultFontColor = '#000';
        staticService.showModal('exercise', staticService.getTitle($stateParams), _this5.chartTitle /*'Набрано баллов: '+courseInfo.testScore+' из 100.'*/, '', "final");
        new Chart(document.getElementById("pie-chart"), {
          type: 'pie',
          data: {
            labels: ["Правильных ответов", "Неправильных ответов"],
            datasets: [{
              label: "",
              backgroundColor: ["#c5edff", "#fe9f39"],
              data: [courseInfo.testRight, _this5.questionList.length - courseInfo.testRight]
            }]
          },
          options: {
            plugins: {
              fillter: {
                propagate: false
              }
            },
            title: {
              display: true,
              text: 'Ваш результат - ' + courseInfo.testScore + ' %'

            }
          }
        });
      }
    };

    this.checkAnswer = function () {
      var answersElements = document.getElementsByClassName('task-question');
      // console.warn('answersElements', answersElements) 
      // console.warn('questionList', this.questionList[this.currentQuest].answers) 

      for (var i = 0; i < answersElements.length; i++) {
        var answer = _this5.questionList[_this5.currentQuest].answers[i].right,
            question = answersElements[i].classList.contains('radio-selected');

        // console.warn('check answers', answer, question)
        if (answer !== question) {
          // неверный ответ
          //console.warn('ответ на вопрос теста неверен')
          //console.info('score', this.testScore, this.testRight)
          return;
        }
      }
      //console.warn('ответ на вопрос верен')
      _this5.testScore += 100;
      _this5.testRight += 1;
      //console.info('score', this.testScore, this.testRight)
      // 
    };

    this.removeRestart = function () {
      _this5.state = 0;
      _this5.testScore = 0;
      _this5.testRight = 0;
      _this5.currentQuest = 0;
      _this5.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
      _this5.testTask.innerHTML = '';
      _this5.buildQuestion();
    };

    angular.element(document).ready(function () {
      // console.log(this.questionList)
      _this5.buildQuestion();
    });
  }
})();
;(function () {
  'use strict';

  FooterCtrl.$inject = ["$state", "$stateParams", "staticService", "userService", "courseInfo", "courseDataObj"];
  angular.module('courseApp').controller('FooterCtrl', FooterCtrl);

  /* @ngInject */
  function FooterCtrl($state, $stateParams, staticService, userService, courseInfo, courseDataObj) {
    var _this6 = this;

    if (window.bookmark && !window.bookmark.loaded) {
      window.bookmark.loaded = true;
      document.getElementsByClassName('paginator')[0].innerHTML = window.bookmark.page + ' / ' + staticService.getPageTotal();
      staticService.setBookmark(window.bookmark.chapterPage, window.bookmark.chapter);
    } else {
      document.getElementsByClassName('paginator')[0].innerHTML = courseInfo.bookmark.page + ' / ' + staticService.getPageTotal();
    }

    this.bookmark = staticService.getBookmark();
    // console.log('FooterCtrl::', this.bookmark)

    // alert(JSON.stringify(courseInfo))

    this.coursePage = document.querySelector('.page-wrapper');

    this.curChapterNum = Number($stateParams.chapter);
    // страница в главе
    this.curPageNum = Number($stateParams.page);
    // всего страниц в курсе
    this.pageAmountTotal = '' + staticService.getPageTotal();
    // всего страниц в главе
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    var currChapterObj = courseDataObj.chapters[this.curChapterNum - 1];
    this.chapterLocation = currChapterObj.chapter_location;
    this.pageLocation = currChapterObj.pages[this.curPageNum - 1].location;
    this.pageHasSound = currChapterObj.pages[this.curPageNum - 1].hasSound;
    console.warn('FooterCtrl:: locs: %s, %s, sound: %s', this.chapterLocation, this.pageLocation, this.pageHasSound);

    this.toBack = function () {
      if (_this6.curChapterNum == 1 && _this6.curPageNum == 1) {
        return;
      }

      if (_this6.curPageNum == 1) {
        _this6.curPageNum = staticService.getChapterObj(_this6.curChapterNum - 2).pages.length;
        _this6.curChapterNum--;
      } else {
        _this6.curPageNum--;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      _this6.coursePage.classList.add('backward');
      // console.warn('FooterCtrl:: локейшены', courseDataObj.chapters[this.curChapterNum-1].chapter_location, courseDataObj.chapters[this.curChapterNum-1].pages[this.curPageNum-1].location)

      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toForward = function () {
      if (_this6.curChapterNum == staticService.getChaptersTotal().length && _this6.curPageNum == _this6.pageAmountChapter) {
        return;
      }

      if (_this6.curPageNum == _this6.pageAmountChapter) {
        _this6.curChapterNum++;
        _this6.curPageNum = 1;
      } else {
        _this6.curPageNum++;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      userService.setPageVisit(_this6.curChapterNum - 1, _this6.curPageNum);
      _this6.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toggleAbout = function () {
      //
    };
    this.toggleHelp = function () {
      //
    };
  }
})();
;(function () {
  'use strict';

  HeaderCtrl.$inject = ["$state", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('HeaderCtrl', HeaderCtrl);

  /* @ngInject */
  function HeaderCtrl($state, $stateParams, staticService, userService) {
    var _this7 = this;

    this.chapters = staticService.getChaptersTotal();

    this.exercises = userService.exs;

    this.getExs = function () {
      return userService.getExs();
    };

    this.getNotes = function () {
      return userService.getUserNotes();
    };

    this.countExs = function () {
      return userService.getExs().length;
    };

    this.countDoneExs = function () {
      var exs = userService.getExs(),
          counter = 0;
      exs.forEach(function (item, i, arr) {
        if (item.status == 1) {
          counter++;
        }
      });
      return counter;
    };

    this.addInfo = function () {
      return staticService.getAddInfo();
    };

    this.exerciseData = function () {
      return staticService.getExercise();
    };

    this.title = {
      course: staticService.getCourseName().course,
      chapter: staticService.getChapterObj(Number($stateParams.chapter) - 1).title,
      exercise: this.chapters[Number($stateParams.chapter) - 1].pages[Number($stateParams.page) - 1].title
    };

    this.getModalState = function (index) {
      return staticService.getModalState(index);
    };

    this.menuPagesCounter = 1;
    this.countPages = function () {
      return _this7.menuPagesCounter++;
    };

    this.coursePage = document.querySelector('.page-wrapper');

    this.goFromMenu = function (page, chapter) {
      console.log('HeaderCtrl:: goFromMenu, page: %d, chapter: %d, SP: %s, SC: %s', page.page_id, chapter.chapter_id, $stateParams.page, $stateParams.chapter);

      if (chapter.chapter_id > Number($stateParams.chapter)) {
        _this7.coursePage.classList.remove('backward');
      } else if (chapter.chapter_id == Number($stateParams.chapter)) {
        if (page.page_id > Number($stateParams.page)) {
          _this7.coursePage.classList.remove('backward');
        } else {
          _this7.coursePage.classList.add('backward');
        }
      } else {
        _this7.coursePage.classList.add('backward');
      }

      $state.go('page', { chapter: chapter.chapter_id, page: page.page_id });

      staticService.closeModals();
    };
    this.getCurrent = function () {
      return staticService.getBookmark().page;
    };
    this.toggleMenu = function () {
      staticService.showModal('menu');
      scrollMenu();
    };

    this.scrollMenu = function () {
      _this7.curChapterNum = Number($stateParams.chapter);
      _this7.curPageNum = Number($stateParams.page);
      var currentItem = document.querySelector('#page_' + _this7.curChapterNum + '_' + _this7.curPageNum);
      var menu = document.querySelector('.modal_nav-menu');

      // console.warn('curr offsetTop',currentItem.offsetTop)
      setTimeout(function () {
        menu.scrollTop = currentItem.offsetTop - 300;
      }, 30);
    };

    this.toggleStat = function () {
      // this.exercises = userService.exs;
      staticService.showModal('stats');
    };
    this.toggleModal = function (modalName) {
      staticService.showModal(modalName);
    };

    this.closeModals = function () {
      staticService.closeModals();
    };

    this.closeCourse = function () {
      userService.closeCourse();
    };

    this.curChapterNum = Number($stateParams.chapter);
    this.curPageNum = Number($stateParams.page);
    this.coursePage = document.querySelector('.page-wrapper');
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    this.toForward = function (exStatus) {
      if (!exStatus) {
        return;
      }

      if (_this7.curChapterNum == staticService.getChaptersTotal().length && _this7.curPageNum == _this7.pageAmountChapter) {
        return;
      }

      if (_this7.curPageNum == _this7.pageAmountChapter) {
        _this7.curChapterNum++;
        _this7.curPageNum = 1;
      } else {
        _this7.curPageNum++;
      }

      staticService.setBookmark(_this7.curPageNum, _this7.curChapterNum);
      userService.setPageVisit(_this7.curChapterNum - 1, _this7.curPageNum);
      _this7.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this7.curChapterNum, page: _this7.curPageNum });
    };
  }
})();
;(function () {
  'use strict';

  pageVideoCtrl.$inject = ["staticService"];
  angular.module('courseApp').component('pageVideo', {
    bindings: {
      videourl: '@', // ссылка на видео
      videoposter: '@', // превью картинка
      suburl: '@', // ссылка на субтитры
      videowidth: '@',
      videoheight: '@'
    },
    templateUrl: 'js/components/page-video/pageVideoTmpl.html',
    controller: 'pageVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('pageVideoCtrl', pageVideoCtrl);

  /* @ngInject */
  function pageVideoCtrl(staticService) {
    var _this8 = this;

    this.openVideo = function () {
      var videoElement = document.querySelector('.modal_video__body'),
          videoStr = "<video class=\"video-js vjs-default-skin video-element my-home-video\" controls preload=\"auto\"\n                               width=\"" + _this8.videowidth + "\" height=\"" + _this8.videoheight + "\" poster=\"" + _this8.videoposter + "\" vjs-video>\n                            <source src=\"" + _this8.videourl + "\" type=\"video/mp4\">\n                            <track enabled kind=\"captions\" src=\"" + _this8.suburl + "\" srclang=\"ru\" label=\"Russian Subtitles\" default />\n                        </video>";
      staticService.showModal('video');
      videoElement.innerHTML = videoStr;
    };
  }
})();
;(function () {
  'use strict';

  LeaderLineCtrl.$inject = ["$element", "$attrs", "userService"];
  angular.module('courseApp').component('makeLine', {
    bindigs: {
      lineTo: '@'
    },
    controller: 'LeaderLineCtrl'
  }).controller('LeaderLineCtrl', LeaderLineCtrl);

  /* @ngInject */
  function LeaderLineCtrl($element, $attrs, userService) {

    /*angular.element(document).ready(()=> {
      this.elementsFrom = JSON.parse($attrs.linefrom);
      this.elementsTo = JSON.parse($attrs.lineto);
      // console.log(this.elementsFrom, this.elementsTo)
      
      for (var i = 0; i < this.elementsFrom.length; i++) {
        console.log('draw line')
        let start = document.getElementById(this.elementsFrom[i]),
            end = document.getElementById(this.elementsTo[i]),
            params = JSON.parse(start.getAttribute('data'));
            // console.log(params)
        new LeaderLine(
            start,
            end,
            params
          )
      }
    })*/

    //TODO: 
    // var e = document.getElementsByClassName('leader-line')
    // e[0].remove()
    // 
  }
})();
;(function () {
  'use strict';

  ComboChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskComboChoice', {
    templateUrl: 'js/components/task-combo-choice/taskComboChoiceTmpl.html',
    controller: 'ComboChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ComboChoiceCtrl', ComboChoiceCtrl);

  /* @ngInject */
  function ComboChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this9 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ComboCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ComboCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ComboCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ComboCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this9.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this9.selectAnswer = function (parentIndex, index) {
        if (_this9.state == 2) {
          return;
        }

        switch (_this9.taskExs[parentIndex].taskType) {
          case "multi":
            selectMulti(_this9.active[parentIndex][index]);
            break;
          case "single":
            selectSingle(_this9.active[parentIndex], index);
            break;
        }

        // console.log('select', this.active[parentIndex][index])

        function selectMulti(item) {
          // console.log('trace ===>>', )
          item.selected = !item.selected;
        }
        function selectSingle(item) {
          item.forEach(function (elem) {
            elem.selected = false;
          });
          item[index].selected = true;
        }

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this9.active.length; i++) {
          for (var j = 0; j < _this9.active[i].length; j++) {
            if (_this9.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this9.active.length) {
          if (_this9.test) {
            $scope.$emit('myTestState', 1);
          }
          _this9.state = 1;
        } else {
          if (_this9.test) {
            $scope.$emit('myTestState', 0);
          }
          _this9.state = 0;
        }
      }; // end of selectAnswer()

      _this9.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this9.userAttempt === _this9.attemptNum) {
          _this9.userAttempt = 0;
        }
        _this9.userAttempt++;
        _this9.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this9.taskExs.length; i++) {
          var item_i = _this9.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this9.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskComboChoice:: упражнение провалено')

              if (_this9.userAttempt == _this9.attemptNum && _this9.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[_this9.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskComboChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[0], true);
      };

      _this9.removeRestart = function () {

        _this9.state = 0;

        if (_this9.taskOptions.shuffle) {
          _this9.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this9.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskComboChoice:: showAnswer')
        for (var i = 0; i < _this9.taskExs.length; i++) {
          for (var j = 0; j < _this9.taskExs[i].questionList.length; j++) {
            _this9.active[i][j].selected = _this9.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  taskragCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDrag', {
    templateUrl: 'js/components/task-drag/taskDragTmpl.html',
    controller: 'taskragCtrl',
    controllerAs: '$ctrl'
  }).controller('taskragCtrl', taskragCtrl);

  /* @ngInject */
  function taskragCtrl($scope, $stateParams, $attrs, staticService, userService) {

    angular.element(document).ready(function () {});
  }
})();
;(function () {
  'use strict';

  ManyMultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManyMultiChoice', {
    templateUrl: 'js/components/task-many-multi-choice/taskManyMultiChoiceTmpl.html',
    controller: 'ManyMultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManyMultiChoiceCtrl', ManyMultiChoiceCtrl);

  /* @ngInject */
  function ManyMultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this10 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManyMultiCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManyMultiCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManyMultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManyMultiCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this10.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this10.selectAnswer = function (parentIndex, index) {
        if (_this10.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this10.active[parentIndex][index].selected = !_this10.active[parentIndex][index].selected;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this10.active.length; i++) {
          for (var j = 0; j < _this10.active[i].length; j++) {
            if (_this10.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this10.active.length) {
          if (_this10.test) {
            $scope.$emit('myTestState', 1);
          }
          _this10.state = 1;
        } else {
          if (_this10.test) {
            $scope.$emit('myTestState', 0);
          }
          _this10.state = 0;
        }
      }; // end of selectAnswer()

      _this10.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this10.userAttempt === _this10.attemptNum) {
          _this10.userAttempt = 0;
        }
        _this10.userAttempt++;
        _this10.state = 2;

        // console.log('mas => r, s', this.taskExs, this.active)
        for (var i = 0; i < _this10.taskExs.length; i++) {
          var item_i = _this10.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right, this.active[i][j])
            if (item_i[j].right != _this10.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManyMultiChoice:: упражнение провалено')

              if (_this10.userAttempt == _this10.attemptNum && _this10.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[_this10.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManyMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this10.removeRestart = function () {

        _this10.state = 0;

        if (_this10.taskOptions.shuffle) {
          _this10.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this10.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var i = 0; i < _this10.taskExs.length; i++) {
          for (var j = 0; j < _this10.taskExs[i].questionList.length; j++) {
            _this10.active[i][j].selected = _this10.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice', {
    templateUrl: 'js/components/task-many-single-choice/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoiceCtrl', ManySingleChoiceCtrl);

  /* @ngInject */
  function ManySingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this11 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this11.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      } else {
        this.taskExs.forEach(function (item, i) {
          _this11.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this11.selectAnswer = function (parentIndex, index) {
        if (_this11.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        if (_this11.active[parentIndex][index].selected == true) {
          checkedTasks--;
          _this11.active[parentIndex][index].selected = false;
          return;
        }

        _this11.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this11.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this11.active.length; i++) {
          for (var j = 0; j < _this11.active[i].length; j++) {
            if (_this11.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this11.active.length) {
          if (_this11.test) {
            $scope.$emit('myTestState', 1);
          }
          _this11.state = 1;
        } else {
          if (_this11.test) {
            $scope.$emit('myTestState', 0);
          }
          _this11.state = 0;
        }
      };

      _this11.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this11.userAttempt === _this11.attemptNum) {
          _this11.userAttempt = 0;
        }
        _this11.userAttempt++;
        _this11.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this11.taskExs.length; i++) {
          var item_i = _this11.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this11.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this11.userAttempt == _this11.attemptNum && _this11.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[_this11.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[0], true);
      };

      _this11.removeRestart = function () {

        _this11.state = 0;

        if (_this11.taskOptions.shuffle) {
          _this11.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this11.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        } else {
          _this11.taskExs.forEach(function (item, i) {
            _this11.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var i = 0; i < _this11.taskExs.length; i++) {
          for (var j = 0; j < _this11.taskExs[i].questionList.length; j++) {
            _this11.active[i][j].selected = _this11.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoice42Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice42', {
    templateUrl: 'js/components/task-many-single-choice-exc42/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoice42Ctrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoice42Ctrl', ManySingleChoice42Ctrl);

  /* @ngInject */
  function ManySingleChoice42Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this12 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    console.log(JSON.parse(angular.toJson(this.taskData.exs)));
    this.exampleList = [];

    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    this.rightArray = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.rightArray = this.taskExs[0].questionList.filter(function (element) {
          return element.right > 0;
        });
        //console.log("rightArray", rightArray)
        var wrongArray = _.shuffle(this.taskExs[0].questionList).filter(function (element) {
          return element.right === 0;
        });
        //console.log("wrongArray", wrongArray)
        this.rightArray = _.shuffle(this.rightArray.concat(wrongArray[0], wrongArray[1]));
        // console.log("rightArray", this.rightArray)
        for (var i = 0; i < 2; i++) {
          this.active[i] = [];
          this.active[i] = this.rightArray.map(function () {
            return { selected: 0 };
          });
        }
        // console.log("this.active", this.active)
      }
    }

    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this12.selectAnswer = function (parentIndex, index) {
        if (_this12.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this12.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this12.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var _i2 = 0; _i2 < _this12.active.length; _i2++) {
          for (var j = 0; j < _this12.active[_i2].length; j++) {
            if (_this12.active[_i2][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this12.active.length) {
          if (_this12.test) {
            $scope.$emit('myTestState', 1);
          }
          _this12.state = 1;
        } else {
          if (_this12.test) {
            $scope.$emit('myTestState', 0);
          }
          _this12.state = 0;
        }
      };

      _this12.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this12.userAttempt === _this12.attemptNum) {
          _this12.userAttempt = 0;
        }
        _this12.userAttempt++;
        _this12.state = 2;

        for (var _i3 = 0; _i3 < _this12.active.length; _i3++) {
          for (var j = 0; j < _this12.active[_i3].length; j++) {
            if (_this12.active[_i3][j].selected > 0 && _this12.rightArray[j].right == 0) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this12.userAttempt == _this12.attemptNum && _this12.taskOptions.showAnswer) {
                showAnswer();
              }
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[_this12.userAttempt], false);
              return;
            }
          }
        }

        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[0], true);
      };

      _this12.removeRestart = function () {

        _this12.state = 0;

        if (_this12.taskOptions.shuffle) {
          for (var i = 0; i < 2; i++) {
            _this12.active[i] = [];
            _this12.active[i] = _this12.rightArray.map(function () {
              return { selected: 0 };
            });
          }
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i4 = 0; _i4 < _this12.active.length; _i4++) {
          for (var j = 0; j < _this12.active[_i4].length; j++) {

            if (_this12.rightArray[j].right == _i4 + 1) {
              _this12.active[_i4][j].selected = _this12.rightArray[j].right;
            } else {
              _this12.active[_i4][j].selected = 0;
            }
          }
        }
      }; // end of showAnswer()
    });
  }
})();
;(function () {
  'use strict';

  MarkerChoiceCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerChoice', {
    templateUrl: 'js/components/task-marker-choice/taskMarkerChoiceTmpl.html',
    controller: 'MarkerChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerChoiceCtrl', MarkerChoiceCtrl);

  /* @ngInject */
  function MarkerChoiceCtrl($scope, $stateParams, staticService, userService) {
    var _this13 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    // сколько ответов будет видно на странице
    var qCount = this.taskData.qCount;
    if (this.taskData.qCount > this.taskData.questionList.length) {
      var _qCount = this.taskData.questionList.length;
    }

    // составляем список ответов и мешаем егo
    // _.sample(list, [n])
    if (this.taskData.shuffle) {
      var randomList = angular.fromJson(angular.toJson(_.shuffle(this.taskData.questionList))),
          usedId = [];
      this.questionList = [];

      // рандомно набираем по 1 ответу к каждому маркеру
      for (var _i5 = 0; _i5 < this.markers.length; _i5++) {
        for (var j = 0; j < randomList.length; j++) {
          if (this.markers[_i5].id == randomList[j].right) {
            this.questionList.push(randomList[j]);
            usedId.push(j);
            break;
          }
        }
      }
      // добираем ответы до нужного значения (qCount)
      for (var _i6 = 0; _i6 < randomList.length; _i6++) {
        var check = false;
        for (var _j = 0; _j < usedId.length; _j++) {
          if (_i6 == usedId[_j]) {
            check = true;
            break;
          }
        }
        if (check) {
          continue;
        } else {
          this.questionList.push(randomList[_i6]);
        }

        if (this.questionList.length >= qCount) {
          break;
        }
      }
      // ещё раз мешаем
      this.questionList = _.shuffle(this.questionList);
      // console.log('this.questionList:: =>', this.questionList, usedId)
    } else {
      this.questionList = this.taskData.questionList;
    }

    this.useVideo = staticService.getData($stateParams, 'useVideo');
    this.videoPoster = staticService.getData($stateParams, 'videoPoster');

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    // выделенный маркер
    this.marker = -1;
    // кол-во попыток
    this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
      this.active[i].marker = -1;
    }

    angular.element(document).ready(function () {
      if (_this13.useVideo) {
        // set video bg
        document.getElementsByClassName('btn_task-video')[0].style.background = 'url(' + _this13.videoPoster + ')';
      }

      /**
      *   Выбор цвета маркера
      */
      _this13.selectMarker = function (marker) {
        _this13.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this13.selectAnswer = function (index, $event) {
        if (_this13.marker == -1 || _this13.state == 2) {
          return;
        }

        _this13.active[index].selected = 1;
        _this13.active[index].marker = _this13.marker;
        $event.currentTarget.setAttribute('data', 'marker' + _this13.marker);
        _this13.state = 1;
      };
    });

    this.checkAnswer = function (e) {

      if (_this13.userAttempt === _this13.attemptNum) {
        _this13.userAttempt = 0;
      }
      _this13.userAttempt++;
      _this13.state = 2;

      for (var _i7 = 0; _i7 < _this13.questionList.length; _i7++) {
        // console.log('rightAnswer:', this.questionList[i].rightAnswer, 'userAnswer:', this.active[i].marker)
        if (_this13.questionList[_i7].right != _this13.active[_i7].marker) {
          //упражнение провалено
          if (_this13.userAttempt === 3) {
            // console.log('taskMarkerChoice:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[_this13.userAttempt], false);
          return;
        }
      }
      // console.log('taskMarkerChoice:: упражнение верно')
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[0], true);
    };
    this.removeRestart = function () {
      var aItems = document.getElementsByClassName('task__marker-choice-item');

      for (var i = 0; i < _this13.active.length; i++) {
        _this13.active[i].selected = false;
        _this13.active[i].marker = -1;
        aItems[i].setAttribute('data', 'marker');
      }
      _this13.state = 0;
      _this13.marker = -1;

      if (_this13.taskData.shuffle) _this13.questionList = _.shuffle(_this13.questionList);
    }; // end of removeRestart

    this.showVideo = function () {
      var videoElement = document.querySelector('.modal_video__body');

      _this13.videoUrl = staticService.getData($stateParams, 'videoUrl');
      // console.warn('HeaderCtrl:: this.videoUrl:', this.videoUrl)
      _this13.videoPoster = staticService.getData($stateParams, 'videoPoster');
      _this13.videoWidth = staticService.getData($stateParams, 'videoWidth');
      _this13.videoHeight = staticService.getData($stateParams, 'videoHeight');

      staticService.showModal('video');
      var videoStr = "<video class=\"video-js vjs-default-skin video-element\" controls preload=\"auto\"\n                               width=\"" + _this13.videoWidth + "\" height=\"" + _this13.videoHeight + "\" poster=\"" + _this13.videoPoster + "\" vjs-video>\n                            <source src=\"" + _this13.videoUrl + "\" type=\"video/mp4\">\n                        </video>";
      videoElement.innerHTML = videoStr;
    }; // end of showVideo()

    var showAnswer = function showAnswer() {
      var itemList = document.querySelectorAll('.task__marker-choice-item');
      for (var i = 0; i < itemList.length; i++) {
        itemList[i].setAttribute('data', 'marker' + _this13.questionList[i].right);
      }
    };
  }
})();
;(function () {
  'use strict';

  MarkerNoteCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerNote', {
    controller: 'MarkerNoteCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerNoteCtrl', MarkerNoteCtrl);

  /* @ngInject */
  function MarkerNoteCtrl($scope, $stateParams, staticService, userService) {
    var _this14 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    //массив утверждений
    this.questionList = this.taskData.questionList;

    // массив для работы с ответами
    this.active = [];
    // выделенный маркер
    this.marker = -1;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].marker = this.questionList[i].marker;
      this.active[i].marker == -1 ? this.active[i].selected = 0 : this.active[i].selected = 1;
    }

    angular.element(document).ready(function () {
      /**
      *   Выбор цвета маркера
      */
      _this14.selectMarker = function (marker) {
        _this14.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this14.selectAnswer = function (index, $event) {
        if (_this14.active[index].selected == 1) {
          _this14.active[index].selected = 0;
          _this14.active[index].marker = -1;
          $event.currentTarget.setAttribute('data', 'marker-1');
        } else {
          _this14.active[index].selected = 1;
          _this14.active[index].marker = _this14.marker;
          $event.currentTarget.setAttribute('data', 'marker' + _this14.marker);
        }
      };

      _this14.saveNote = function () {
        for (var i = 0; i < _this14.questionList.length; i++) {
          staticService.setMarkerNote($stateParams, i, _this14.active[i].marker);
        }

        staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
      };
    });
  }
})();
;(function () {
  'use strict';

  MultiBoxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiBox', {
    templateUrl: 'js/components/task-multi-box/taskMultiBoxTmpl.html',
    controller: 'MultiBoxCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiBoxCtrl', MultiBoxCtrl);

  /* @ngInject */
  function MultiBoxCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this15 = this;

    var answers = [[0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1]];

    // массив для работы с ответами
    this.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    this.taskData = staticService.getData($stateParams, 'data');

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this15.selectAnswer = function (index, row) {
        if (_this15.state == 2) {
          return;
        }
        // console.log('select', index)
        _this15.active[row][index] = !_this15.active[row][index];
        var check = false;
        for (var i = 0; i < _this15.active.length; i++) {
          for (var j = 0; j < _this15.active[i].length; j++) {
            if (_this15.active[i][j]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this15.state = 1;
        } else {
          _this15.state = 0;
        }
      };

      _this15.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this15.userAttempt === _this15.attemptNum) {
          _this15.userAttempt = 0;
        }
        _this15.userAttempt++;
        _this15.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this15.active.length; i++) {
          for (var j = 0; j < _this15.active[i].length; j++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j])
            if (_this15.active[i][j] != answers[i][j]) {
              //упражнение провалено
              if (_this15.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3')
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[_this15.userAttempt], false);
              return;
            }
          }
        }

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this15.removeRestart = function () {

        _this15.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        _this15.state = 0;
      }; // end of removeRestart
    });
    var showAnswer = function showAnswer() {
      _this15.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();
;(function () {
  'use strict';

  MultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoice', {
    templateUrl: 'js/components/task-multi-choice/taskMultiChoiceTmpl.html',
    controller: 'MultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceCtrl', MultiChoiceCtrl);

  /* @ngInject */
  function MultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this16 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    var qCount = 0;
    if (!this.test) {
      if (this.taskData.qCount == -1) {
        qCount = this.taskData.questionList.length;
      } else {
        qCount = this.taskData.qCount;
      }
    }
    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      this.questionList = _.sample(this.taskData.questionList, qCount);
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this16.selectAnswer = function (index) {
        if (_this16.state == 2) {
          return;
        }
        // console.log('select', index)
        _this16.active[index].selected = !_this16.active[index].selected;
        var check = false;
        for (var _i8 = 0; _i8 < _this16.active.length; _i8++) {
          if (_this16.active[_i8].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this16.test) {
            $scope.$emit('myTestState', 1);
          }
          _this16.state = 1;
        } else {
          if (_this16.test) {
            $scope.$emit('myTestState', 0);
          }
          _this16.state = 0;
        }
      };

      _this16.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this16.userAttempt === _this16.attemptNum) {
          _this16.userAttempt = 0;
        }
        _this16.userAttempt++;
        _this16.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this16.questionList.length; i++) {
          // console.log('taskMultiChoice:: упражнение не верно')
          if (_this16.questionList[i].right != _this16.active[i].selected) {
            //упражнение провалено

            if (_this16.userAttempt == _this16.attemptNum && _this16.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[_this16.userAttempt], false);
            return;
          }
        }
        // console.log('taskMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[0], true);
      };

      _this16.removeRestart = function () {

        for (var i = 0; i < _this16.active.length; i++) {
          _this16.active[i].selected = false;
        }
        _this16.state = 0;

        _this16.questionList = _.sample(_this16.taskData.questionList, qCount);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var _i9 = 0; _i9 < _this16.questionList.length; _i9++) {
          _this16.active[_i9].selected = _this16.questionList[_i9].right;
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  NoteCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNote', {
    templateUrl: 'js/components/task-note/taskNoteTmpl.html',
    controller: 'NoteCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteCtrl', NoteCtrl);

  /* @ngInject */
  function NoteCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this17 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this17.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this17.items.fields.length / 2;

      if (!bool) {
        from = _this17.items.fields.length / 2;
        to = _this17.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this17.items.fields[i]);
      }
      return range;
    };

    loadNotes();

    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        // console.log(inputs[i].value)
        _this17.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this17.items, chapter, page);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteColumnCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumn', {
    templateUrl: 'js/components/task-note-column/taskNoteColumnTmpl.html',
    controller: 'NoteColumnCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnCtrl', NoteColumnCtrl);

  /* @ngInject */
  function NoteColumnCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this18 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes1();
      // let data = userService.getUserNotes();
      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this18.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this18.items.fields.length / 2;

      if (!bool) {
        from = _this18.items.fields.length / 2;
        to = _this18.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this18.items.fields[i]);
      }
      return range;
    };

    loadNotes();

    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        console.log(inputs[i].value);
        _this18.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this18.items, chapter, page);
      console.log("this.items - ", _this18.items);
      console.log("chapter - ", chapter);
      console.log("page - ", page);
      console.log("this.items - ", _this18.items.fields.text);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteColumnReadCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumnRead', {
    templateUrl: 'js/components/task-note-column-read/taskNoteColumnReadTmpl.html',
    controller: 'NoteColumnReadCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnReadCtrl', NoteColumnReadCtrl);

  /* @ngInject */
  function NoteColumnReadCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this19 = this;

    self.currentImg = 0;
    var items2 = [];
    var items3 = [];
    var items4 = [];
    var items5 = [];
    this.items = [];

    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');

    var idNote = this.taskData.note_id;
    var chapter_idNote = this.taskData.chapter_id;
    var lei = this.taskData.questionList.length;

    var taskDataM = this.taskData.questionList;
    function readNotes() {
      for (var k = 0; k < lei; k++) {
        items2[k] = taskDataM[k].label;
      }
      items3 = userService.getUserNotes1();
      console.log('items3********', items3);
      items3.forEach(function (item) {
        if (item.id == idNote && item.chapter_id == chapter_idNote) {
          items4 = item.fields;
        }
      });

      for (var n = 0; n < lei; n++) {
        items5[n] = items4[n].text;
      }
    }
    readNotes();
    this.indicators = items2;
    this.indicators2 = items5;
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this19.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this19.items.fields.length / 2;

      if (!bool) {
        from = _this19.items.fields.length / 2;
        to = _this19.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this19.items.fields[i]);
      }
      return range;
    };

    loadNotes();

    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        console.log(inputs[i].value);
        _this19.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this19.items, chapter, page);
      console.log("this.items - ", _this19.items);
      console.log("chapter - ", chapter);
      console.log("page - ", page);
      console.log("this.items - ", _this19.items.fields.text);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteColumnRead2Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumnRead2', {
    templateUrl: 'js/components/task-note-column-read2/taskNoteColumnRead2Tmpl.html',
    controller: 'NoteColumnRead2Ctrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnRead2Ctrl', NoteColumnRead2Ctrl);

  /* @ngInject */
  function NoteColumnRead2Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this20 = this;

    self.currentImg = 0;
    var items2 = [];
    var items3 = [];
    var items4 = [];
    var items5 = [];
    this.items = [];

    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');

    var idNote = this.taskData.note_id;
    var chapter_idNote = this.taskData.chapter_id;
    var lei = this.taskData.questionList.length;

    var note_count = this.taskData.note_count;
    var note_volume = this.taskData.note_volume;
    console.log('note_count********----------**********', note_count);
    console.log('note_volume********----------**********', note_volume);

    var taskDataM = this.taskData.questionList;

    function readNotes() {
      for (var k = 0; k < lei; k++) {
        items2[k] = taskDataM[k].label;
      }
      items3 = userService.getUserNotes1();
      console.log('items3********', items3);
      items3.forEach(function (item) {
        if (item.id == idNote && item.chapter_id == chapter_idNote) {
          items4 = item.fields;
        }
      });

      for (var n = 0; n < lei; n++) {
        items5[n] = items4[n + note_count].text;
      }
    }
    readNotes();
    this.indicators = items2;
    this.indicators2 = items5;
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this20.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this20.items.fields.length / 2;

      if (!bool) {
        from = _this20.items.fields.length / 2;
        to = _this20.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this20.items.fields[i]);
      }
      //for (let i = note_count; i < (note_count+to); i++) {
      //  range.push(this.items.fields[i]);
      //}
      return range;
    };

    loadNotes();

    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        console.log(inputs[i].value);
        _this20.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this20.items, chapter, page);
      console.log("this.items - ", _this20.items);
      console.log("chapter - ", chapter);
      console.log("page - ", page);
      console.log("this.items - ", _this20.items.fields.text);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  NoteColumnRead3Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumnRead3', {
    templateUrl: 'js/components/task-note-column-read3/taskNoteColumnRead3Tmpl.html',
    controller: 'NoteColumnRead3Ctrl',
    controllerAs: '$ctrl'
  }).controller('NoteColumnRead3Ctrl', NoteColumnRead3Ctrl);

  /* @ngInject */
  function NoteColumnRead3Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    self.currentImg = 0;
    var itemss2 = [];
    //var items3 = [];
    //var items4 = [];
    //var items5 = [];
    //this.items = [];


    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData3 = staticService.getData($stateParams, 'data');

    //var idNote = this.taskData.note_id;
    //var chapter_idNote = this.taskData.chapter_id;
    var leii = this.taskData3.questionList.length;
    console.log('lei t********----------**********', leii);
    //var note_count = this.taskData.note_count;
    //var note_volume = this.taskData.note_volume;
    //console.log('note_count********----------**********',  note_count);
    // console.log('note_volume********----------**********',  note_volume);

    var taskDataMM = this.taskData3.questionList;

    function readNotes() {
      for (var k = 0; k < leii; k++) {
        itemss2[k] = taskDataMM[k].label;
      }
      //  items3 = userService.getUserNotes1();
      //  console.log('items3********',  items3);
      //  items3.forEach((item)=> {
      //    if (item.id == idNote && item.chapter_id == chapter_idNote) {
      //    items4 = item.fields;
      //  }
      //
      //})
      //
      //  for (var n = 0; n < lei; n++) {
      //    items5[n] = items4[n].text;
      //  }

    }
    readNotes();
    this.indicatorss = itemss2;
    //this.indicators2 = items5;
    this.useColumnss = this.taskData3.useColumns;

    //const loadNotes = ()=> {
    //  let data = userService.getUserNotes();
    //
    //  data.forEach((item)=> {
    //    if (item.chapter_id == chapter && item.page_id == page) {
    //      this.items = item;
    //    }
    //  })
    //}

    //this.range = (bool)=> {
    //
    //  let range = [],
    //      from = 0,
    //      to = this.items.fields.length / 2;
    //
    //  if (!bool) {
    //    from = this.items.fields.length / 2;
    //    to = this.items.fields.length
    //  }
    //
    //  for (let i = from; i < to; i++) {
    //    range.push(this.items.fields[i]);
    //  }
    //  //for (let i = note_count; i < (note_count+to); i++) {
    //  //  range.push(this.items.fields[i]);
    //  //}
    //  return range;
    //}

    //loadNotes()

    // console.log('NoteCtrl:: fields:', this.items)

    //this.saveNote = ()=> {
    //  let inputs = document.getElementsByClassName('task-note_item_input');
    //  // console.log(inputs)
    //  for (let i = 0; i < inputs.length; i++) {
    //     console.log(inputs[i].value);
    //    this.items.fields[i].text = inputs[i].value;
    //  }
    //
    //  userService.setUserNotes(this.items, chapter, page);
    //  console.log("this.items - ",this.items);
    //  console.log("chapter - ",chapter);
    //  console.log("page - ",page);
    //  console.log("this.items - ",this.items.fields.text);
    //  staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    //}

  }
})();
;(function () {
  'use strict';

  NoteColumn2Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNoteColumn2', {
    templateUrl: 'js/components/task-note-column2/taskNoteColumn2Tmpl.html',
    controller: 'NoteColumn2Ctrl',
    controllerAs: '$ctrlL'
  }).controller('NoteColumn2Ctrl', NoteColumn2Ctrl);

  /* @ngInject */
  function NoteColumn2Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this21 = this;

    var itemss2 = [];
    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.useColumns = this.taskData.useColumns;
    // console.log('taskData********----------**********',  this.taskData );
    var leii = this.taskData.questionList.length;
    //console.log('lei t********----------**********',  leii );
    var taskDataMM = this.taskData.questionList;
    function readNotes() {
      for (var k = 0; k < leii; k++) {
        itemss2[k] = taskDataMM[k].label;
      }
      //console.log('itemss2t****itemss2**----------**********',  itemss2 );
    }
    readNotes();
    this.indicators = itemss2;
    console.log('this.indicators**----------**********', this.indicators);
    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes1();
      // let data = userService.getUserNotes();
      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this21.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this21.items.fields.length / 2;

      if (!bool) {
        from = _this21.items.fields.length / 2;
        to = _this21.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this21.items.fields[i]);
      }
      return range;
    };

    loadNotes();

    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      console.log('this.saveNote----------**********', inputs);

      // let inputs = document.getElementsByClassName('task-note_item_input');
      //
      //console.log('inputs----------**********',inputs.length)
      // for (let i = 0; i < inputs.length; i++) {
      // //  for (let i = 3; i < 9; i++) {
      //    console.log(inputs[i].value);
      //   this.items.fields[i].text = inputs[i].value;
      // }
      //
      // userService.setUserNotes(this.items, chapter, page);
      // console.log("this.items - ",this.items);
      // console.log("chapter - ",chapter);
      // console.log("page - ",page);
      // console.log("this.items - ",this.items.fields.text);
      // staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  SelectCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSelect', {
    templateUrl: 'js/components/task-select/taskSelectTmpl.html',
    controller: 'SelectCtrl',
    controllerAs: '$ctrl'
  }).controller('SelectCtrl', SelectCtrl);

  /* @ngInject */
  function SelectCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this22 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    for (var i = 0; i < this.taskExs.length; i++) {
      this.taskExs[i].questionList.questions = this.taskExs[i].questionList.questions.map(function (item) {
        item.default = _this22.taskData.defaultLabel;
        item.v_id = -1;
        item.open = 0;
        return item;
      });
      this.taskExs[i].questionList.variants = this.taskExs[i].questionList.variants.map(function (item) {
        item.selected = -1;
        item.connectedTo = -1;
        return item;
      });
    }

    // console.warn('SelectCtrl:: taskOptions:', this.taskOptions);
    // console.warn('SelectCtrl:: taskExs:', this.taskExs);

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i10 = 0; _i10 < this.taskExs.length; _i10++) {
        this.taskExs[_i10].questionList.variants = _.shuffle(this.taskExs[_i10].questionList.variants);
        // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
      }
    }

    this.showComment = false;

    this.selectChange = function (e, v_id, questIndex, taskIndex) {
      // console.log('select element', v_id, questIndex, taskIndex)
      if (v_id == -1) {
        return;
      }
      if (_this22.state == 2) {
        return;
      }
      // console.log( index )

      // проверяем был ли уже дан ответ на вопрос
      if (_this22.taskExs[taskIndex].questionList.questions[questIndex].v_id != -1) {

        var _v_id = _this22.taskExs[taskIndex].questionList.questions[questIndex].v_id;

        for (var _i11 = 0; _i11 < _this22.taskExs[taskIndex].questionList.variants.length; _i11++) {
          if (_this22.taskExs[taskIndex].questionList.variants[_i11].v_id == _v_id) {
            _this22.taskExs[taskIndex].questionList.variants[_i11].selected = -1;
          }
          break;
        }
      }

      // в вопросе отмечаем какой на него дали ответ
      _this22.taskExs[taskIndex].questionList.questions[questIndex].v_id = v_id;

      // отмечаем, что ответ использован
      for (var _i12 = 0; _i12 < _this22.taskExs[taskIndex].questionList.variants.length; _i12++) {
        if (_this22.taskExs[taskIndex].questionList.variants[_i12].v_id == v_id) {
          _this22.taskExs[taskIndex].questionList.variants[_i12].selected = 1;
          // выводим лейбл ответа
          _this22.taskExs[taskIndex].questionList.questions[questIndex].default = _this22.taskExs[taskIndex].questionList.variants[_i12].label;
        }
      }

      // проверяем везде ли выбрали ответ
      var check = true;
      for (var _i13 = 0; _i13 < _this22.taskExs.length; _i13++) {
        for (var j = 0; j < _this22.taskExs[_i13].questionList.questions.length; j++) {
          if (_this22.taskExs[_i13].questionList.questions[j].v_id == -1) {
            check = false;
            break;
          }
        }
      }

      if (check) {
        _this22.state = 1;
      }

      // можно ли выбирать одни и теже ответы
      if (!_this22.taskExs[taskIndex].sameQ) {
        _this22.filteredList = _this22.getNotSelected(taskIndex);
      }
      _this22.toggleSelect(e, questIndex, taskIndex);

      e.stopPropagation();
    }; // end of selectChange()


    this.checkAnswer = function () {
      // console.log('SelectCtrl:: checkAnswer:')
      if (_this22.userAttempt === _this22.attemptNum) {
        _this22.userAttempt = 0;
      }
      _this22.userAttempt++;
      _this22.state = 2;

      for (var _i14 = 0; _i14 < _this22.taskExs.length; _i14++) {
        for (var j = 0; j < _this22.taskExs[_i14].questionList.questions.length; j++) {

          var thisQuestion = _this22.taskExs[_i14].questionList.questions[j];

          if (_this22.taskData.exs[_i14].questionList.variants[thisQuestion.v_id].q_id != thisQuestion.q_id) {
            // неправильно дан ответ
            if (_this22.userAttempt == _this22.attemptNum && _this22.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[_this22.userAttempt], false);
            return;
          }
        }
      }

      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {

      _this22.state = 0;
      // мешаем вопросы
      if (_this22.taskOptions.shuffle) {
        for (var _i15 = 0; _i15 < _this22.taskExs.length; _i15++) {
          _this22.taskExs[_i15].questionList.variants = _.shuffle(_this22.taskExs[_i15].questionList.variants);
          // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
        }
      }
      // this.active = angular.fromJson(angular.toJson(this.taskExs));

      for (var _i16 = 0; _i16 < _this22.taskExs.length; _i16++) {
        for (var j = 0; j < _this22.taskExs[_i16].questionList.questions.length; j++) {
          _this22.taskExs[_i16].questionList.questions[j].default = _this22.taskData.defaultLabel;
          _this22.taskExs[_i16].questionList.questions[j].open = 0;
          _this22.taskExs[_i16].questionList.questions[j].v_id = -1;
        }
        for (var _j2 = 0; _j2 < _this22.taskExs[_i16].questionList.variants.length; _j2++) {
          _this22.taskExs[_i16].questionList.variants[_j2].selected = -1;
        }
      }
      _this22.filteredList = _this22.getNotSelected(-1);
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      console.log('SelectCtrl:: showAnswer:');

      // this.userAttempt = 0;

      for (var i = 0; i < _this22.taskExs.length; i++) {
        for (var j = 0; j < _this22.taskExs[i].questionList.questions.length; j++) {
          for (var k = 0; k < _this22.taskExs[i].questionList.variants.length; k++) {
            if (_this22.taskExs[i].questionList.questions[j].q_id == _this22.taskExs[i].questionList.variants[k].q_id) {
              _this22.taskExs[i].questionList.questions[j].default = _this22.taskExs[i].questionList.variants[k].label;
              break;
            }
          }
        }
      }
    }; // end of showAnswer()

    this.toggleSelect = function (e, questIndex, taskIndex) {
      // console.log('toggleSelect', questIndex, taskIndex);
      _this22.taskExs[taskIndex].questionList.questions[questIndex].open = !_this22.taskExs[taskIndex].questionList.questions[questIndex].open;
      e.stopPropagation();
    }; // end of toggleSelect()

    this.getNotSelected = function (taskIndex) {
      // console.log('filering::', taskIndex)
      var filtered = [];
      for (var _i17 = 0; _i17 < _this22.taskExs.length; _i17++) {
        filtered[_i17] = [];
        if (_i17 == taskIndex) {
          for (var j = 0; j < _this22.taskExs[_i17].questionList.variants.length; j++) {
            if (_this22.taskExs[_i17].questionList.variants[j].selected < 0) {
              filtered[_i17].push(_this22.taskExs[_i17].questionList.variants[j]);
            }
          }
        } else {
          filtered[_i17] = angular.fromJson(angular.toJson(_this22.taskExs[_i17].questionList.variants));
        }
      }
      return filtered;
    }; // end of getNotSelected()

    //инициализация списка ответов
    this.filteredList = this.getNotSelected(-1);
  }; // end of SelectCtrl()
})();
(function () {
  'use strict';

  TaskSequenceQuestCtrl.$inject = ["$stateParams", "$document", "$element", "staticService", "userService"];
  angular.module('courseApp').controller('TaskSequenceQuestCtrl', TaskSequenceQuestCtrl);

  /* @ngInject */
  function TaskSequenceQuestCtrl($stateParams, $document, $element, staticService, userService) {
    var self = this,
        variantNum = 3,
        // number of variants in blocks
    currentQuestNum = 0; // current question number

    self.taskData = staticService.getData($stateParams, 'exs');

    /* 
    *  self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "exs": {
    *      "taskText": "<p>Какой характеристики не хватает формулировке для того, чтобы стать целью?</p><p>Какой вопрос необходимо задать, чтобы трансформировать данную формулировку в цель?</p><p>Выберите правильный уточняющий вопрос и характеристику. Переход далее осуществляется только при правильном ответе.</p><p>Темным цветом написана формулировка, светлым – цель, которой она должна стать.</p>",
    *      "variant": [{
    *        "final": "Нашему отделу необходимо поднять уровень продаж. ",
    *        "initial": "Необходимо работать более эффективно.",
    *        "characterNum": 0,
    *        "questionNum": 0
    *      }],
    *      "characterList": [
    *        "Четкость, ясность",
    *        "Измеримость",
    *        "Ограниченность во времени",
    *        "Достижимость",
    *        "Актуальность",
    *        "Письменная формулировка",
    *        "Мобилизующий фактор"
    *      ],
    *      "questionList": [
    *        "Кому необходимо работать более эффективно? Что значит «более эффективно»?",
    *        "На сколько процентов необходимо поднять уровень продаж?",
    *        "К какому сроку?",
    *        "Какими путями?",
    *        "Зачем надо работать более эффективно?",
    *        "Как долго надо работать более эффективно?"
    *      ]
    *    }
    *  }
    */

    self.showVariant = false;
    self.show = false;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: true
    };

    self.userAnswer = [];
    self.userAnswer.length = variantNum + 1;
    for (var i = 0; i < self.userAnswer.length; i++) {
      self.userAnswer[i] = {};
      self.userAnswer[i].character = "";
      self.userAnswer[i].characterNum = "";
      self.userAnswer[i].question = "";
      self.userAnswer[i].questionNum = "";
    };

    function getArr(type, arr, num) {
      var newArr = _.shuffle(arr.filter(function (elem, i) {
        return i !== num;
      })),
          randomNum = _.random(0, variantNum);

      newArr.splice(randomNum, 0, arr[num]);
      newArr.length = variantNum + 1;

      self.userAnswer.forEach(function (elem) {
        elem[type + "Num"] = randomNum;
      });
      return newArr;
    };

    self.getVariantList = function (elem, i) {
      return i <= currentQuestNum;
    };

    self.orderByQuest = function (elem, i) {
      return i === currentQuestNum;
    };

    self.getAnswer = function (prop, index) {
      if (prop === "character") {
        self.userAnswer.forEach(function (elem) {
          return elem.character = "";
        });
        self.userAnswer[index].character = index === self.userAnswer[index].characterNum ? true : false;
      } else {
        self.userAnswer.forEach(function (elem) {
          return elem.question = "";
        });
        self.userAnswer[index].question = index === self.userAnswer[index].questionNum ? true : false;
      }
      if (self.userAnswer.filter(function (elem) {
        return elem.character !== "";
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question !== "";
      }).length) {
        self.btnDisabledState.answer = false;
      }
    };

    // check answers
    self.checkAnswer = function () {
      if (self.userAnswer.filter(function (elem) {
        return elem.character === true;
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question === true;
      }).length) {
        if (self.show === false && currentQuestNum + 1 !== self.taskData.variant.length) {
          self.show = true;
          return staticService.showModal('exercise', 'Результат', 'Верно! Следующая цель: ' + self.taskData.variant[currentQuestNum + 1].final + ' Закройте окно и нажмите кнопку "Далее".', true);
        }
        self.show = false;
        if (currentQuestNum + 1 !== self.taskData.variant.length) {
          currentQuestNum++;
          self.userAnswer.forEach(function (elem) {
            return elem.character = "";
          });
          self.userAnswer.forEach(function (elem) {
            return elem.question = "";
          });
          self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
          self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
          self.btnDisabledState.answer = true;
        } else {
          self.btnDisabledState.answer = true;
          self.show = true;
          self.end = true;
          // send data to userService (needs for statistics), query to staticService to show modal with comment
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', 'Верный ответ!', true);
        }
      } else {
        self.show = true;
        self.btnDisabledState.answer = true;
        self.btnDisabledState.restart = false;
        return staticService.showModal('exercise', 'Ваш результат', 'Неверно! Начните заново.', false);
      }
    };

    // restart
    self.removeRestart = function () {
      self.show = false;
      self.btnDisabledState.answer = true;
      self.btnDisabledState.restart = true;
      self.userAnswer.forEach(function (elem) {
        return elem.character = "";
      });
      self.userAnswer.forEach(function (elem) {
        return elem.question = "";
      });
      self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
      self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
    };

    self.removeRestart();
  }
})();
;(function () {
  'use strict';

  SingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSingleChoice', {
    templateUrl: 'js/components/task-single-choice/taskSingleChoiceTmpl.html',
    controller: 'SingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('SingleChoiceCtrl', SingleChoiceCtrl);

  /* @ngInject */
  function SingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this23 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('SingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)
      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;
      console.log('SingleCCtrl:: Answers:', this.questionList);
    } else {
      // Вопрос упражнения
      this.taskText = staticService.getData($stateParams, 'taskText');
      this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this23.selectAnswer = function (index) {
        if (_this23.state == 2) {
          return;
        }

        _this23.active.forEach(function (item) {
          item.selected = 0;
        });
        _this23.active[index].selected = 1;
        if (_this23.test) {
          $scope.$emit('myTestState', 1);
        }
        _this23.state = 1;
      };

      _this23.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this23.userAttempt === _this23.attemptNum) {
          _this23.userAttempt = 0;
        }
        _this23.userAttempt++;
        _this23.state = 2;

        for (var i = 0; i < _this23.questionList.length; i++) {
          // console.log('taskSingleChoice:: упражнение не верно')
          if (_this23.questionList[i].right !== _this23.active[i].selected) {
            //упражнение провалено

            if (_this23.userAttempt == _this23.attemptNum && _this23.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this23.taskData.messages[_this23.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this23.taskData.messages[0], true);
      };

      _this23.removeRestart = function () {

        for (var i = 0; i < _this23.active.length; i++) {
          _this23.active[i].selected = false;
        }
        _this23.state = 0;

        _this23.questionList = _.shuffle(_this23.questionList);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i18 = 0; _i18 < _this23.questionList.length; _i18++) {
          _this23.active[_i18].selected = _this23.questionList[_i18].right;
        }
      };
    });
  }
})();
(function () {
  'use strict';

  TaskStrictSortableCtrl.$inject = ["$element", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('TaskStrictSortableCtrl', TaskStrictSortableCtrl);

  /* @ngInject */
  function TaskStrictSortableCtrl($element, $stateParams, staticService, userService) {
    var self = this;

    self.taskData = JSON.parse(angular.toJson(staticService.getData($stateParams, 'data')));
    // console.log('taskData',self.taskData)
    /* 
    * self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "options":{
    *      "attempts": 3,       // кол-во попыток
    *      "shuffle": true,     // мешать ответы?
    *      "showAnswer": true,  // показывать правильный ответ в конце
    *    },
    *    "exs": {
    *      "taskText": "",
    *      "variant": [{
    *        "content": ""
    *      }]
    *    }
    *  }
    */

    // attempt number
    var attemptNum = self.taskData.options.attempts,
        userAttempt = 0;

    self.taskText = self.taskData.exs.taskText;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: false
    };

    angular.element(document).ready(function () {
      var itemList = $($element).find(".sortable-box__item");
      var basketsList = $($element).find(".sortable-box");

      $($element).find('.sortable-box__item').draggable({
        containment: ".sortable-container",
        refreshPositions: true,
        revert: true
      });
      $($element).find('.sortable-box').droppable({
        drop: function drop(event, ui) {
          var overBlock = $(event.target).find('.sortable-box__item'),
              overBlockContent = overBlock.html(),
              prevNumber = ui.draggable.attr("data-number"),
              newNumber = overBlock.attr("data-number"),
              topPos = $(basketsList[prevNumber]).position().top - overBlock.position().top,
              leftPos = $(basketsList[prevNumber]).position().left - overBlock.position().left;

          overBlock.html(ui.draggable.html()).css({ 'z-index': 10000 });
          ui.draggable.html(overBlockContent);
        }
      });
      self.checkAnswer = function () {
        var answerList = $($element).find(".sortable-box__item");

        self.btnDisabledState.restart = false;
        self.btnDisabledState.answer = true;

        userAttempt === attemptNum ? userAttempt = 0 : userAttempt++;

        for (var i = 0; i < answerList.length; i++) {
          // console.log(i, $.trim($(answerList[i]).html().replace(/'/g, '"')));
          // console.log(i, $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"')));
          if ($.trim($(answerList[i]).html().replace(/'/g, '"')) !== $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"'))) {
            self.taskData.exs.variant[i].answer = false;
          } else {
            self.taskData.exs.variant[i].answer = true;
          }
        }
        // console.log('=>',self.taskData.exs.variant.filter((elem) => elem.answer === true).length)
        // console.log('=>',self.taskData.exs.variant.length)
        console.log('=>', userAttempt);
        if (self.taskData.exs.variant.filter(function (elem) {
          return elem.answer === true;
        }).length === self.taskData.exs.variant.length) {
          // верно
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[0], true);
        } else {

          if (userAttempt === attemptNum) {
            showAnswer();
          }

          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[userAttempt], false);
        }
      };

      self.removeRestart = function () {
        self.btnDisabledState.restart = true;
        self.btnDisabledState.answer = false;

        var numberList = _.shuffle(_.range(basketsList.length));
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[numberList[i]].content);
        };
        self.taskData.exs.variant.forEach(function (elem) {
          return elem.answer = "";
        });
      };
      self.removeRestart();

      var showAnswer = function showAnswer() {
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[i].content);
          self.taskData.exs.variant[i].answer = true;
        }
      };
    });
  };
})();
;(function () {
  'use strict';

  SwapListCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskSwapList', {
    templateUrl: 'js/components/task-swap-list/taskSwapListTmpl.html',
    controller: 'SwapListCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListCtrl', SwapListCtrl);

  /* @ngInject */
  function SwapListCtrl($scope, $stateParams, staticService, userService) {
    var _this24 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var i = 0; i < this.taskExs.length; i++) {
        this.taskExs[i].questionList = _.shuffle(this.taskExs[i].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this24.userAttempt === _this24.attemptNum) {
        _this24.userAttempt = 0;
      }
      _this24.userAttempt++;
      _this24.state = 2;
      $(".task-swap-list_item").draggable('disable');

      var taskList = document.querySelectorAll('.task-swap-list');

      for (var _i19 = 0; _i19 < _this24.taskData.exs.length; _i19++) {
        var list = taskList[_i19].querySelectorAll('.task-swap-list_item');

        for (var j = 0; j < _this24.taskData.exs[_i19].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this24.taskData.exs[_i19].questionList[j].order) {
            // неправильно дан ответ
            if (_this24.userAttempt == _this24.attemptNum && _this24.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this24.taskData.messages[_this24.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this24.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this24.state = 1;
      _this24.showRight = 0;
      $(".task-swap-list_item").draggable('enable');

      // мешаем вопросы
      if (_this24.taskOptions.shuffle) {
        for (var _i20 = 0; _i20 < _this24.taskExs.length; _i20++) {
          _this24.taskExs[_i20].questionList = _.shuffle(_this24.taskExs[_i20].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this24.showRight = 1;
    };

    angular.element(document).ready(function () {
      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {},
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  }; // end of SwapListCtrl()
})();
;(function () {
  'use strict';

  taskTextInput1Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskTextInput1', {
    templateUrl: 'js/components/task-text-input/task-text-input-1/taskTextInput1Tmpl.html',
    controller: 'taskTextInput1Ctrl',
    controllerAs: '$ctrl'
  }).controller('taskTextInput1Ctrl', taskTextInput1Ctrl);

  /* @ngInject */
  function taskTextInput1Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this25 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.taskData = staticService.getData($stateParams, 'data'); // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs))[0]; // arr

    // console.log('taskTextInput1Ctrl::', this.taskData)

    this.userAttempt = 0;
    this.attemptNum = this.taskData.options.attempts;

    this.checkAnswer = function () {
      if (_this25.state == 2) {
        return;
      }

      if (_this25.userAttempt === _this25.attemptNum) {
        _this25.userAttempt = 0;
      }
      _this25.userAttempt++;
      _this25.state = 2;

      var inputs = document.getElementsByClassName('task-input');

      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this25.taskExs.questionList.length; j++) {
        // console.log('taskTextInput1Ctrl:: =>',inputs[j].value,  this.taskExs.questionList[j].label)
        if (inputs[j].value != _this25.taskExs.questionList[j].label) {
          // неправильный ответ
          if (_this25.userAttempt == _this25.attemptNum) {
            // console.log('taskTextInput1Ctrl:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          // to staticService (индекс, заголовок, тело соощения)
          staticService.showModal('exercise', 'Ваш результат', _this25.taskData.messages[_this25.userAttempt], false);
          return;
        }
      }
      // }
      // правильный ответ
      _this25.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this25.taskData.messages[0], true);
    };

    this.removeRestart = function () {
      _this25.state = 1;
      // this.userAttempt = 0;
      var inputs = document.getElementsByClassName('task-input');
      for (var i = 0; i < inputs.length; i++) {
        inputs[i].value = '';
      }
    };

    var showAnswer = function showAnswer() {
      var inputs = document.getElementsByClassName('task-input');
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this25.taskExs.questionList.length; j++) {
        inputs[j].value = _this25.taskExs.questionList[j].label;
      }
      // }
    }; // end of showAnswer()

    // angular.element(document).ready( () => {} )
  }
})();