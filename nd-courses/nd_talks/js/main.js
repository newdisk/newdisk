"use strict";

var _ref;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *   пример упражнения singleChoice:
 *    {
 *      "id": 2,
 *      "title": "Упражнение №1",
 *      "location": "page02",
 *      "hasSound": false,
 *      "type": "exercise",
 *      "data": {
 *        "attempts": 3,  // кол-во попыток
 *        "shuffle": true,  // мешать ответы?
 *        "showAnswer": false, // показывать правильный ответ в конце
 *        "taskText": "Упражнение на одиночный выбор, какой ответ верный?",
 *        "questionList": [{
 *          "label": "Правильный ответ",
 *          "right": 1
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        },{
 *          "label": "Неверный ответ",
 *          "right": 0
 *        }],
 *      "messages": ["Правильный ответ!",
 *                  "Ответ неверный!"]
 *      }
 *    }
 *
 *
 *   звук страниц укладывать в папку audio страницы, файл звука должен иметь название:
 *   «page-папка главы-папка страницы.mp3» Пример: page-chapter04-page04.mp3
 */
var courseStructure = {
  "course": "Коммерческие переговоры",
  "description": "Модульный курс для дистанционного обучения",
  "chapters": [{
    "chapter_id": 1,
    "chapter_location": "chapter01",
    "title": "Введение",
    //"description": "Мультимедийный курс «Коммерческие переговоры»",
    "description": "Введение",
    "pages": [{
      "page_id": 1, //01
      "title": "Коммерческие переговоры",
      "location": "page01",
      "hasSound": true,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //02
      "title": "Введение. На пути к мастерству",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //03
      "title": "Каково содержание курса?",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //04
      "title": "Как построено обучение",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //05
      "title": "Введение. Предварительный тест",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //06
      "title": "Предварительный тест",
      "location": "page06",
      "hasSound": false,
      "type": "test",
      "data": {
        "messages": [""]
      }
    }] // end of pages array in chapter 1 (intro)
  }, // end of chapter
  {
    "chapter_id": 2,
    "chapter_location": "chapter02",
    "title": "Глава 1",
    "description": "Глава 1. Отличие переговоров от процесса продажи",
    "pages": [{
      "page_id": 1, //07
      "title": "Отличие переговоров от процесса продажи",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //08
      "title": "Что такое переговоры?",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //09
      "title": "Задание 1",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {

            "questions": [{
              "label": "9_1",
              "q_id": 0
            }],
            "variants": [{
              "label": "процесс продажи",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "процесс переговоров",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "9_2",
              "q_id": 0
            }],
            "variants": [{
              "label": "процесс продажи",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "процесс переговоров",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Абсолютно правильно! <br/><p>При продаже продавец убеждает покупателя принять его предложение в неизменном, первоначальном виде (не меняет никаких условий, не идет ни на какие уступки). Таким образом, продажа – это процесс убеждения покупателя в том, что предлагаемый продукт или услуга полностью соответствуют его потребностям. <br/>Переговоры – это процесс обсуждения условий сделки с возможностью менять условия договора (цену, сроки поставки, условия оплаты и т.д.). Чтобы вести переговоры, продавец должен иметь полномочия и быть готовым при необходимости поступиться частью интересов компании или своих интересов ради заключения контракта.<p>", "Вы где-то ошиблись. <br/><p>Попробуйте дать ответ снова.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>При продаже продавец убеждает покупателя принять его предложение в неизменном, первоначальном виде (не меняет никаких условий, не идет ни на какие уступки). Таким образом, продажа – это процесс убеждения покупателя в том, что предлагаемый продукт или услуга полностью соответствуют его потребностям. <br>Переговоры – это процесс обсуждения условий сделки с возможностью менять условия договора (цену, сроки поставки, условия оплаты и т.д.). Чтобы вести переговоры, продавец должен иметь полномочия и быть готовым при необходимости поступиться частью интересов компании или своих интересов ради заключения контракта.</p>"]
      }
    }, {
      "page_id": 4, //10
      "title": "Задание 2",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Продажи"
        }, {
          "id": 1,
          "label": "Переговоры"
        }],
        "questionList": [{
          "label": "У сторон имеются расхождения по некоторым условиям договора, и они встретились, чтобы их обсудить.",
          "right": 1
        }, {
          "label": "Одна из сторон должна убедить другую начать сотрудничество со своей компанией и принять предложение в неизменном, первоначальном виде. ",
          "right": 0
        }, {
          "label": "Ни одна из сторон не может изменить условия сделки (снизить цену и т. д.).",
          "right": 0
        }, {
          "label": "Стороны  могут менять условия сделки, согласуясь с требованиями партнера и со своими интересами.",
          "right": 1
        }],
        "messages": ["Вы ответили совершенно верно! <br/><p>Переговоры имеют место при наличии нескольких условий:</p> <ol><li><p>Важно, чтобы в предмете обсуждения были заинтересованы обе стороны: например, продавец желает продать товар, а покупатель хочет его приобрести (этапы выявления потребностей, презентации и ответов на возражения уже пройдены).</p></li><li><p>У сторон имеются расхождения по некоторым условиям договора: или ценам, или  срокам поставки, или условиям оплаты и т.д.</p></li><li><p>Стороны должны иметь право менять эти условия, согласуясь с требованиями партнера по переговорам и согласуясь со своими интересами. Если «торг не уместен», то места для переговоров нет.</p></li></ol>", "В ответе есть неточности. <br/><p>Попробуйте выполнить задание снова – у вас обязательно получится.</p>", "Подумайте еще. <br/><p>Вспомните реальные ситуации продаж и переговоров, в которых вы принимали участие.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Не забывайте, переговоры имеют место при наличии нескольких условий:</p> <br/><ol><li><p>Важно, чтобы в предмете обсуждения были заинтересованы обе стороны.</p></li><li><p>У сторон имеются расхождения по некоторым условиям договора: ценам, срокам поставки, условиям оплаты и т.д.</p></li><li><p>Стороны должны иметь право менять эти условия, согласуясь с требованиями партнера по переговорам и со своими интересами. Если «торг не уместен», то места для переговоров нет.</p></li></ol>"]
      }
    }, {
      "page_id": 5, //11
      "title": "Задание 3",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Предлагая «скидочку», продавец...",
          "questionList": [{
            "label": "использует скидку как аргумент продажи (убеждает начать сотрудничество)",
            "right": 1
          }, {
            "label": "предлагает скидку как аргумент переговоров (согласует условия сделки)",
            "right": 0
          }]
        }, {
          "taskText": "Выгодно ли Компании использовать скидки как аргумент продажи?",
          "questionList": [{
            "label": "да ",
            "right": 0
          }, {
            "label": "нет",
            "right": 1
          }]
        }, {
          "taskText": "Выгодно ли Компании использовать скидки как аргумент переговоров?",
          "questionList": [{
            "label": "да ",
            "right": 0
          }, {
            "label": "нет",
            "right": 0
          }, {
            "label": "выгодно при определенных условиях",
            "right": 1
          }]
        }],
        "messages": ["Это правильный ответ. <br/><p>Ваша оценка ситуации абсолютно справедлива. Диалог продавца с покупателем вполне можно назвать презентацией, и в данном случае выбранная форма общения вполне соответствует целям продажи.</p>", "Ответ неверный. <br/><p>Попробуйте выполнить задание снова.</p>", "Вы вновь ошиблись. <br/><p>Подумайте еще.</p>", "Закройте это окно и посмотрите правильный ответ. <br/><p>Диалог продавца с покупателем вполне можно назвать презентацией, и в данном случае выбранная форма общения вполне соответствует целям продажи.</p>"]
      }
    }, {
      "page_id": 6, //12
      "title": "Задание 4",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": " Какой процент от прибыли теряет ваша компания, если вы продаете товар с такой скидкой?",
        "questionList": [{
          "label": "5%",
          "right": 0
        }, {
          "label": "25%",
          "right": 0
        }, {
          "label": "50%",
          "right": 1
        }],
        "messages": ["Абсолютно правильно! <br/><p>Посчитать потенциальный размер потерянной прибыли – это важный навык для коммерческих переговоров.</p>", "Ваш ответ неверный. <br/><p>Скорректируйте расчет.</p>", "Подумайте еще. <br/><p>Рассчитайте сначала общую сумму прибыли.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 7, //13
      "title": "Задание 5",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Задавая этот вопрос, вы...",
        "questionList": [{
          "label": "продолжаете продавать",
          "right": 1
        }, {
          "label": "вступаете в процесс переговоров",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Фиксированная цена – важное отличие продаж от переговоров.</p>", "Вы ошиблись. <br/><p>Подумайте еще.</p>", "Ваш ответ неверный.", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 8, //14
      "title": "Записная книжка. Задание 1",
      "location": "page08",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 9, //15
      "title": "«Золотое правило» переговоров",
      "location": "page09",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 2
  }, // end 1of chapter
  {
    "chapter_id": 3,
    "chapter_location": "chapter03",
    "title": "Глава 2",
    "description": "Глава 2. Стратегии переговоров",
    "pages": [{
      "page_id": 1, //16
      "title": "Стратегии переговоров",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //17
      "title": "Выбор стратегии переговоров",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //18
      "title": "Жесткая стратегия",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //19
      "title": "Жесткая стратегия: признаки",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //20
      "title": "Жесткая стратегия: результаты",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //21
      "title": "Задание 6",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Выиграл – проиграл",
          "right": 0
        }, {
          "label": "Проиграл – выиграл",
          "right": 0
        }, {
          "label": "Проиграл – проиграл",
          "right": 1
        }, {
          "label": "Выиграл – выиграл",
          "right": 0
        }],
        "messages": ["Это правильный ответ! <br/><p>Владимир на этапе подписания договора в последний момент меняет некоторые условия в пользу своей компании и отказывается эти изменения обсуждать с партнером. Поставщик посуды не поддался давлению и отказался от сотрудничества. Такой результат является проигрышем и для поставщика одноразовой посуды (он потерял заказ), и для Владимира, который вынужден срочно искать новых поставщиков.</p>", "Вы ошиблись. <br/><p>Результат был несколько иным.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. <br>Владимир на этапе подписания договора в последний момент меняет некоторые условия в пользу своей компании и отказывается эти изменения обсуждать с партнером. Поставщик посуды не поддался давлению и отказался от сотрудничества. Такой результат является проигрышем и для поставщика одноразовой посуды (он потерял заказ), и для Владимира, который вынужден срочно искать новых поставщиков.</p>"]
      }
    }, {
      "page_id": 7, //22
      "title": "Жесткая стратегия: правила использования",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //23
      "title": "Мягкая стратегия",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //24
      "title": "Задание 7",
      "location": "page09",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Выиграл – проиграл",
          "right": 0
        }, {
          "label": "Проиграл – выиграл",
          "right": 1
        }, {
          "label": "Проиграл – проиграл",
          "right": 0
        }, {
          "label": "Выиграл – выиграл",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Вы правильно оценили позицию покупателя.</p>", "Это неверный ответ. <br/><p>Сравните предполагаемые потери и приобретения каждой из сторон в результате сложившейся ситуации.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизоды.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 10, //25
      "title": "Задание 8",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какую позицию в переговорах с женой традиционно занимал Владимир?",
          "questionList": [{
            "label": "Выиграл – проиграл",
            "right": 1
          }, {
            "label": "Проиграл – выиграл",
            "right": 0
          }, {
            "label": "Проиграл – проиграл",
            "right": 0
          }, {
            "label": "Выиграл – выиграл",
            "right": 0
          }]
        }, {
          "taskText": "В какой ситуации он оказался в данном случае?",
          "questionList": [{
            "label": "Выиграл – проиграл",
            "right": 0
          }, {
            "label": "Проиграл – выиграл",
            "right": 1
          }, {
            "label": "Проиграл – проиграл",
            "right": 0
          }, {
            "label": "Выиграл – выиграл",
            "right": 0
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>В данном случае Владимир оказался в роли проигравшего, в отличие от своей жены.</p>", "Это неверный ответ. <br/><p>Обратите внимание, как изменились позиции обеих сторон.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 11, //26
      "title": "Стратегия сотрудничества",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //27
      "title": "Стратегия сотрудничества: с чего начать",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 13, //28
      "title": "Задание 9",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Принципы соперничества"
        }, {
          "id": 1,
          "label": "Принципы сотрудничества"
        }],
        "questionList": [{
          "label": "Трактовка фактов " + "(оценка, обвинение)",
          "right": 0
        }, {
          "label": "Доминирование " + "(установка на нападение)",
          "right": 0
        }, {
          "label": "Ориентация на заявленную позицию " + "(стремление влиять, переубеждать, контролировать, использовать угрозы)",
          "right": 0
        }, {
          "label": "Жесткое следование выбранной тактике " + "(состязание, маневрирование)",
          "right": 0
        }, {
          "label": "Равнодушие " + "(апатия, пассивность, игнорирование чувств участников переговоров)",
          "right": 0
        }, {
          "label": "Изложение фактов " + "(честный поиск информации)",
          "right": 1
        }, {
          "label": "Равноправие " + "(установка на взаимодействие)",
          "right": 1
        }, {
          "label": "Ориентация на интересы, поиск решения " + "(общие задачи, поиск общего знаменателя, предложение кооперации)",
          "right": 1
        }, {
          "label": "Спонтанность " + "(гибкость, прямота, свободное взаимодействие, творчество)",
          "right": 1
        }, {
          "label": "Сопереживание " + "(разделение чувств, понимание, признание)",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Вы знаете, чем отличаются принципы сотрудничества от принципов соперничества.</p>", "Вы ошиблись. <br/><p>Какие-то принципы относятся к другой стратегии.</p>", "Подумайте еще. <br/><p>Вспомните, чем переговорные стратегии отличаются друг от друга.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 14, //29
      "title": "Задание 10",
      "location": "page14",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Установка на взаимодействие.",
          "right": 1
        }, {
          "label": "Изложение фактов (честный поиск информации).",
          "right": 0
        }, {
          "label": "Равноправие.",
          "right": 1
        }, {
          "label": "Ориентация на интересы, поиск решения (общие задачи, поиск общего знаменателя, предложение кооперации).",
          "right": 1
        }, {
          "label": "Спонтанность (гибкость, прямота, свободное взаимодействие).",
          "right": 0
        }, {
          "label": "Сопереживание (разделение чувств, понимание, признание).",
          "right": 0
        }, {
          "label": "Взаимное уважение, доверие.",
          "right": 1
        }, {
          "label": "Предвидение (готовность экспериментировать, проводить исследования, творчество, новаторство).",
          "right": 1
        }],
        "messages": ["Именно так! <br/><p>Вы совершенно верно отметили принципы, которыми посоветовала руководствоваться мать Светланы.</p>", "Вы ошиблись. <br/><p>В данном случае обсуждался другой набор принципов.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 15, //30
      "title": "Компромисс, или путь взаимных уступок",
      "location": "page15",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 16, //31
      "title": "Сильные и слабые стороны компромисса",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //32
      "title": "Компромисс: правила использования",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //33
      "title": "Задание 11",
      "location": "page18",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Елена",
          "questionList": [{
            "label": "Выиграл-проиграл ",
            "right": 1
          }, {
            "label": "Выиграл-выиграл",
            "right": 0
          }, {
            "label": "Компромисс",
            "right": 0
          }]
        }, {
          "taskText": "Виктор",
          "questionList": [{
            "label": "Выиграл-проиграл ",
            "right": 0
          }, {
            "label": "Выиграл-выиграл",
            "right": 1
          }, {
            "label": "Компромисс",
            "right": 0
          }]
        }],
        "messages": ["Именно так! <br/><p>Вы знаете, чем отличаются друг от друга разные позиции в переговорах.</p>", "Ответ неверный. <br/><p>В данном случае намерения персонажей были несколько иными.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.<br/> Помните, чем отличаются друг от друга разные позиции в переговорах «Выиграл-проиграл»: ориентация на краткосрочное взаимодействие; «Выиграл-выиграл»: стремление к взаимовыгодному сотрудничеству, налаживание долгосрочных отношений с клиентом; «Компромисс» – пополам: ни тебе-ни мне.</p>"]
      }
    }, {
      "page_id": 19, //34
      "title": "Задание 12",
      "location": "page19",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 1, // эквивалентно ответу
          "label": "Целесообразно"
        }, {
          "id": 0,
          "label": "Нецелесообразно"
        }],
        "questionList": [{
          "label": "Вы и ваш партнер по переговорам способны изложить суть интересов и выслушать друг друга.",
          "right": 1
        }, {
          "label": "У Вас сильная позиция и влияние, и исход переговоров очень важен для Вас. ",
          "right": 1
        }, {
          "label": "У вас тесные и взаимозависимые отношения.",
          "right": 1
        }, {
          "label": "Для Вас важно достижение краткосрочного результата, а отсроченные последствия не столь важны.",
          "right": 0
        }, {
          "label": "Вы на равных ищете решение проблемы. ",
          "right": 1
        }, {
          "label": "Вы ведете обсуждение всего одного, не очень важного для вас компонента соглашения.",
          "right": 0
        }, {
          "label": "Вы делаете ставку на долгосрочные отношения с партнером. ",
          "right": 1
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы знаете, в каких случаях целесообразно использовать стратегию сотрудничества, а в каких – нет.</p>", "Вы ошиблись. <br/><p>Стратегию сотрудничества целесообразнее использовать при ином наборе условий.</p>", "Подумайте еще. <br/><p>Вспомните основные характеристики стратегии сотрудничества.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 20, //35
      "title": "Резюме",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //36
      "title": "Записная книжка. Задание 2",
      "location": "page21",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": false,
        "maxlength": 120,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 22, //37
      "title": "Записная книжка. Задание 3",
      "location": "page22",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 3,
        "showTitle": false,
        "maxlength": 120,
        "titles": [''],
        "messages": [""]
      }
    }] // end of pages array in chapter 3
  }, // end 2of chapter
  {
    "chapter_id": 4,
    "chapter_location": "chapter04",
    "title": "Глава 3",
    "description": "Глава 3. Этапы переговорного процесса",
    "pages": [{
      "page_id": 1, //38
      "title": "Этапы переговорного процесса",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //39
      "title": "Этапы переговорного процесса: краткая характеристика",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //40
      "title": "Шаг 1. Формулирование целей, анализ интересов",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //41
      "title": "Формулирование целей",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //42
      "title": "Интересы и позиции",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //43
      "title": "Записная книжка. Задание 4",
      "location": "page06",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "showTitle": false,
        "maxlength": 120,
        "titles": ['Моя компания', 'Компания партнера'],
        "messages": [""]
      }
    }, {
      "page_id": 7, //44
      "title": "Шаг 2. Сбор информации",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //45
      "title": "Записная книжка. Задание 5",
      "location": "page08",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 1,
        "showTitle": false,
        "maxlength": 120,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 9, //46
      "title": "Комментарии",
      "location": "page09",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 10, //47
      "title": "Записная книжка. Задание 6",
      "location": "page10",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 120,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 11, //48
      "title": "Шаг 3. Выделение вопросов для обсуждения на переговорах",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //49
      "title": "Шаг 4. Определение области торга",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 13, //50
      "title": "Задание 13",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Целевая точка",
              "q_id": 0
            }],
            "variants": [{
              "label": "9",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "10,5",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "12",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "13,5",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Точка сопротивления",
              "q_id": 0
            }],
            "variants": [{
              "label": "9",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "10,5",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "12",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "13,5",
              "v_id": 3,
              "q_id": 0
            }]
          }
        }],
        "defaultLabel": "Выберите ответ",
        "messages": ["Совершенно верно! <br/><p>Вы правильно рассчитали значения для данной ситуации.</p>", "Ответ неверный. <br/><p>Ваш расчет требует корректировки.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 14, //51
      "title": "Записная книжка. Задание 7",
      "location": "page14",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 15,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Параметры торга', 'Целевая точка', 'Точка сопротивления'],
        "messages": [""]
      }
    }, (_ref = {
      "page_id": 15, //52
      "title": "Определение области торга: область обсуждения",
      "location": "page15",
      "hasSound": false
    }, _defineProperty(_ref, "hasSound", false), _defineProperty(_ref, "type", "simple_page"), _defineProperty(_ref, "messages", [""]), _ref), {
      "page_id": 16, //53
      "title": "Положительная область обсуждения",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //54
      "title": "Отрицательная область обсуждения",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //55
      "title": "Отсутствие области торга",
      "location": "page18",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 19, //56
      "title": "Задание 14",
      "location": "page19",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [],
        "messages": ["Это правильный ответ! <br/><p>Каждая сторона обычно стремится скрыть свою точку сопротивления любой ценой и пытается убедить другую сторону в том, что ее точка сопротивления близка, если не совпадает, с целевой точкой. Стороны часто сознательно создают видимость того, что у них расстояние от целевой точки до точки сопротивления очень мало. Это главный парадокс, объясняющий ход большинства переговоров. Если обе стороны успешно убедят друг друга в том, что их точка сопротивления близка к целевой точке, может сложиться впечатление образования отрицательной зоны обсуждения, хотя в реальности она не возникала вовсе.</p>", "Вы ошиблись. <br/><p>Попробуйте определить область обсуждения заново.</p>", "Подумайте еще. <br/><p>Подумайте еще. Вспомните, от чего зависят пределы на арене переговоров.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.  Каждая сторона обычно стремится скрыть свою точку сопротивления любой ценой и пытается убедить другую сторону в том, что ее точка сопротивления близка, если не совпадает, с целевой точкой. Стороны часто сознательно создают видимость того, что у них расстояние от целевой точки до точки сопротивления очень мало. Это главный парадокс, объясняющий ход большинства переговоров. Если обе стороны успешно убедят друг друга в том, что их точка сопротивления близка к целевой точке, может сложиться впечатление образования отрицательной зоны обсуждения, хотя в реальности она не возникала вовсе.</p>"]
      }
    }, {
      "page_id": 20, //57
      "title": "Определение области торга: диапазон целей",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //58
      "title": "Задание 15",
      "location": "page21",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Область торга",
          "taskType": "single",
          "questionList": [{
            "label": "10 руб. – 16 руб.",
            "right": 0
          }, {
            "label": "10 руб. – 16 руб.",
            "right": 0
          }, {
            "label": "12 руб. – 14 руб.",
            "right": 1
          }]
        }, {
          "taskText": "Диапазон целей покупателя",
          "taskType": "single",
          "questionList": [{
            "label": "11 руб. – 14 руб.",
            "right": 1
          }, {
            "label": "10,5 руб. – 13,5 руб.",
            "right": 0
          }, {
            "label": "9 руб. – 15 руб.",
            "right": 0
          }]
        }, {
          "taskText": "Диапазон целей продавца",
          "taskType": "single",
          "questionList": [{
            "label": "12 руб. – 15 руб.",
            "right": 1
          }, {
            "label": "10 руб. – 16 руб.",
            "right": 0
          }, {
            "label": "9,5 руб. – 14,5 руб.",
            "right": 0
          }]
        }],
        "messages": ["Это правильный ответ! <br/><p>Вы верно рассчитали область торга и диапазоны целей продавца и покупателя.</p>", "Вы ошиблись. <br/><p>Какие-то диапазоны значений необходимо скорректировать.</p>", "Подумайте еще. <br/><p>Прочитайте внимательно исходные условия.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 22, //59
      "title": "Записная книжка. Задание 8",
      "location": "page22",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 30,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Параметры торга', 'Целевая точка', 'Промежуточные шаги', '', '', 'Точка сопротивления'],
        "messages": [""]
      }
    }, {
      "page_id": 23, //60
      "title": "Шаг 5. Взаимосвязь интересов сторон. Определение цены и ценности уступки",
      "location": "page23",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 24, //61
      "title": "Задание 16",
      "location": "page24",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Сроки поставки",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 60 дней",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Б - 55 дней",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 50 дней",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 45 дней",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 40 дней",
              "v_id": 4,
              "q_id": -1
            }, {
              "label": "Е - 35 дней",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 30 дней",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 25 дней",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 20 дней",
              "v_id": 8,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Размер скидки",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 0%",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Б - 1%",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 2%",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 3%",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 4%",
              "v_id": 4,
              "q_id": 0
            }, {
              "label": "Е - 5%",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 6%",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 7%",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 8%",
              "v_id": 8,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Условия оплаты",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 1 платеж",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Б - 2 платежа",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 3 платежа",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 4 платежа",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 5 платежей",
              "v_id": 4,
              "q_id": -1
            }, {
              "label": "Е - 6 платежей",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 7 платежей",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 8 платежей",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 9 платежей",
              "v_id": 8,
              "q_id": 0
            }]
          }
        }],
        "defaultLabel": "Выберите ответ",
        "messages": ["Абсолютно правильно! <br/><p>Вам удалось найти наиболее выгодный вариант для обеих сторон.</p>", "Вы ошиблись. <br/><p>Соглашение на подобных условиях вряд ли можно назвать взаимовыгодным.</p>", "Подумайте еще. <br/><p>Посчитайте внимательнее выгоды каждой из сторон.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 25, //62
      "title": "Взаимосвязь интересов сторон: противоположные интересы",
      "location": "page25",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 26, //63
      "title": "Взаимосвязь интересов сторон: неравноценные интересы",
      "location": "page26",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 27, //64
      "title": "Неравноценные интересы по параметру оплаты",
      "location": "page27",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 28, //65
      "title": "Неравноценные интересы: взаимовыгодное решение",
      "location": "page28",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 29, //66
      "title": "Задание 17",
      "location": "page29",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Сроки поставки",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 60 дней",
              "v_id": -1,
              "q_id": 0
            }, {
              "label": "Б - 55 дней",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 50 дней",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 45 дней",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 40 дней",
              "v_id": 4,
              "q_id": -1
            }, {
              "label": "Е - 35 дней",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 30 дней",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 25 дней",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 20 дней",
              "v_id": 8,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Размер скидки",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 0%",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Б - 1%",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 2%",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 3%",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 4%",
              "v_id": 4,
              "q_id": 0
            }, {
              "label": "Е - 5%",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 6%",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 7%",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 8%",
              "v_id": 8,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Условия оплаты",
              "q_id": 0
            }],
            "variants": [{
              "label": "A - 1 платеж",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Б - 2 платежа",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "В - 3 платежа",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Г - 4 платежа",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Д - 5 платежей",
              "v_id": 4,
              "q_id": 0
            }, {
              "label": "Е - 6 платежей",
              "v_id": 5,
              "q_id": -1
            }, {
              "label": "Ж - 7 платежей",
              "v_id": 6,
              "q_id": -1
            }, {
              "label": "З - 8 платежей",
              "v_id": 7,
              "q_id": -1
            }, {
              "label": "И - 9 платежей",
              "v_id": 8,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Выберите ответ",
        "messages": ["Абсолютно правильно! <br/><p>Вам удалось найти наиболее выгодный вариант для обеих сторон.</p>", "Вы ошиблись. <br/><p>Соглашение на подобных условиях вряд ли можно назвать взаимовыгодным.</p>", "Подумайте еще. <br/><p>Посчитайте внимательнее выгоды каждой из сторон.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 30, //67
      "title": "Взаимосвязь интересов сторон: совпадающие интересы",
      "location": "page30",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 31, //68
      "title": "Цена и ценность уступок",
      "location": "page31",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 32, //70
      "title": "Задание 18",
      "location": "page32",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какие параметры переговоров имеют наиболее низкую цену для поставщиков одноразовой посуды? ",
          "taskType": "multi",
          "questionList": [{
            "label": "Цена товара.",
            "right": 0
          }, {
            "label": "Доставка (за счет поставщика).",
            "right": 1
          }, {
            "label": "Сроки поставки.",
            "right": 1
          }, {
            "label": "Объемы поставки.",
            "right": 0
          }]
        }, {
          "taskText": "Какие параметры переговоров имеют наибольшую ценность для покупателя одноразовой посуды?",
          "taskType": "multi",
          "questionList": [{
            "label": "Цена товара.",
            "right": 1
          }, {
            "label": "Доставка (за счет поставщика).",
            "right": 0
          }, {
            "label": "Сроки поставки.",
            "right": 1
          }, {
            "label": "Объемы поставки.",
            "right": 0
          }]
        }, {
          "taskText": "Какой параметр переговоров продавцам одноразовой посуды следует использовать как уступку?",
          "taskType": "single",
          "questionList": [{
            "label": "Цена товара.",
            "right": 0
          }, {
            "label": "Доставка (за счет поставщика).",
            "right": 0
          }, {
            "label": "Сроки поставки.",
            "right": 1
          }, {
            "label": "Объемы поставки.",
            "right": 0
          }]
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы верно определили параметры, важные для каждой из сторон.</p>", "Вы ошиблись. <br/><p>Попробуйте выполнить задание снова.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Сроки поставки крайне важны для покупателя, а для поставщика имеют низкую цену, поэтому этот параметр и стоит использовать продавцу как уступку.</p>"]
      }
    }, {
      "page_id": 33, //70
      "title": "Задание 19",
      "location": "page33",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Высокая "
        }, {
          "id": 1,
          "label": "Низкая"
        }],
        "questionList": [{
          "label": "Поставить логотип поставщика в меню баров гостиницы",
          "right": 1
        }, {
          "label": "Рецептура приготовления кофе",
          "right": 0
        }, {
          "label": "Минимальные сроки поставки обжаренного кофе",
          "right": 0
        }],
        "questionList1": [{
          "label": "Поставить логотип поставщика в меню баров гостиницы",
          "right": 0
        }, {
          "label": "Рецептура приготовления кофе",
          "right": 1
        }, {
          "label": "Минимальные сроки поставки обжаренного кофе",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Вам удалось точно определить, какую ценность имеет та или иная уступка для каждой стороны.</p>", "Вы ошиблись. <br/><p>Ценность уступок для каждой из сторон будет несколько иной.</p>", "Подумайте еще. <br/><p>Прочитайте внимательно исходные условия.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 34, //71
      "title": "Записная книжка. Задание 9",
      "location": "page34",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Уступка', 'Ценность для партнера', 'Цена для вас'],
        "messages": [""]
      }
    }, {
      "page_id": 35, //72
      "title": "Шаг 6. Продумывание вариантов соглашения",
      "location": "page35",
      "hasSound": false,
      "type": "simple_page",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "questionList": [{
            "phrase": "Открывающая часть",
            "label": "Привлечь внимание, завоевать эмоциональное расположение аудитории.",
            "order": 0
          }, {
            "phrase": "Введение",
            "label": "Пробудить содержательный интерес аудитории, ответить на вопрос «зачем мне это надо?»",
            "order": 1
          }, {
            "phrase": "Основная часть",
            "label": "Донести главное содержание и решить основные задачи презентации.",
            "order": 2
          }, {
            "phrase": "Обзор",
            "label": "Повторить главные выводы, подвести итог сказанному, чтобы усилить убеждение.",
            "order": 3
          }, {
            "phrase": "Заключение",
            "label": "Подтолкнуть к действиям, оставить благоприятное впечатление.",
            "order": 4
          }]
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы знаете, какие цели соответствуют каждому из этапов презентации.</p>", "Вы ошиблись. <br/><p>Какие-то цели соответствуют другим этапам презентации.</p>", "Подумайте еще. <br/><p>Вспомните, чего необходимо добиться на каждом этапе презентации.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ. Не забывайте, что у каждого этапа презентации есть своя определенная цель.</p>"]
      }
    }, {
      "page_id": 36, //73
      "title": "Задание 20",
      "location": "page36",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true, // показывать правильный ответ в конце
          "limits": {
            "inDropItems": 2
          }
        },
        "taskText": "",
        "questionList": [{
          "cost": "15 долларов",
          "conditions": "xx",
          "concessions": "ba"
        }, {
          "cost": "14 долларов",
          "conditions": "xx",
          "concessions": "ca"
        }, {
          "cost": "13 долларов",
          "conditions": "de",
          "concessions": "ax"
        }, {
          "cost": "12 долларов",
          "conditions": "de",
          "concessions": "xx"
        }],
        "messages": ["Совершенно верно! <br/><p>Вы определили оптимальный набор дополнительных условий и уступок для каждого из вариантов цены.</p>", "Ответ неверный. <br/><p>В каких-то случаях более выгодным был бы другой дополнительных условий и уступок.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 37, //74
      "title": "Задание 21",
      "location": "page37",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "taskTitle": ["", ""], // Заголовки для левой и правой колонки
          "questionList": [{
            "phrase": "Начальная позиция:",
            "label": "9-10 $ за кг, объем 300-400 кг",
            "order": 0
            // "modInfo": "Текст", // Если есть дополнительное описание в модальном окне
            // "image": "img/icon.png" // Если есть иконка или картинка
          }, {
            "phrase": "Требование 1:",
            "label": "15 $ за кг, объем 300-400 кг",
            "order": 1
          }, {
            "phrase": "Уступка и встречная просьба:",
            "label": "10 $ за кг, объем 300-400 кг, поставка оборудования бесплатно",
            "order": 2
          }, {
            "phrase": "Требование 2:",
            "label": "14 $ за кг, объем 300-400 кг, оборудование с минимальной платой",
            "order": 3
          }, {
            "phrase": "Уступка и встречная просьба:",
            "label": "13 $ за кг, объем 300-400 кг, оборудование с минимальной платой, разработка меню для бара",
            "order": 4
          }, {
            "phrase": "Требование 3:",
            "label": "13 $ за кг, объем 300-400 кг, оборудование с минимальной платой,  логотип в меню/аренда конференц-зала",
            "order": 5
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>Вы определили обмен уступками в ходе переговоров.</p>", "Ответ неверный. <br/><p>Порядок обмена уступками в ходе переговоров был другой.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 38, //75
      "title": "Комментарии",
      "location": "page38",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 39, //76
      "title": "Записная книжка. Задание 10",
      "location": "page39",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 6,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Наша начальная позиция', 'Требование партнера 1', 'Наша уступка и что мы просим взамен', 'Требование партнера 2', 'Наша уступка и что мы просим взамен', 'Требование партнера 3'],
        "messages": [""]
      }
    }, {
      "page_id": 40, //77
      "title": "Шаг 7. Подготовка сути вашего предложения. Разработка аргументов",
      "location": "page40",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 41, //78
      "title": "Вопросы при подборе аргументов",
      "location": "page41",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 42, //79
      "title": "Задание 22",
      "location": "page42",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "Как партнеры обосновывают заявленные позиции по цене?",
        "questionList": [{
          "label": "Голословные утверждения о тенденциях на всемирном рынке ",
          "right": [1, 0]
        }, {
          "label": "Голословные утверждения о тенденциях на российском рынке",
          "right": [0, 0]
        }, {
          "label": "Опубликованные статистические данные по ценам крупных поставщиков на всемирном рынке",
          "right": [0, 1]
        }, {
          "label": "Опубликованные статистические данные по ценам крупных поставщиков на российском рынке",
          "right": [0, 1]
        }, {
          "label": "Выгоды от сотрудничества с данным партнером",
          "right": [1, 1]
        }, {
          "label": "Демонстрация качества товара",
          "right": [0, 1]
        }, {
          "label": "Возможность удовлетворить заявленные потребности партнера",
          "right": [0, 1]
        }],
        "messages": ["Совершенно верно! <br/><p>Вы правильно определили список аргументов каждой из сторон при обосновании цены.</p>", "Вы ошиблись. <br/><p>Аргументы какой-то из сторон были иными.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 43, //80
      "title": "Задание 23",
      "location": "page43",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Владимир обосновал предложение (сделать обзор рынка и сослаться на средние цифры) на основе:",
              "q_id": 0
            }],
            "variants": [{
              "label": "Общепринятых стандартов обслуживания",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Текущей рыночной ситуации ",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Долгих партнерских отношений",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Угрозы перехода к конкурентам",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Дмитрий обосновал предложение (описать недостатки и просить снижения платы) на основе:",
              "q_id": 0
            }],
            "variants": [{
              "label": "Общепринятых стандартов обслуживания ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Текущей рыночной ситуации",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Долгих партнерских отношений",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Угрозы перехода к конкурентам",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Выберите ответ",
        "messages": ["Это правильный ответ! <br/><p>Вы отлично разобрались в ситуации.</p>", "Ответ неверный. <br/><p>Соотношение обоснований было несколько иным.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 44, //81
      "title": "Записная книжка. Задание 11",
      "location": "page44",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Мои аргументы', 'Контраргумент', 'Ответ'],
        "messages": [""]
      }
    }, {
      "page_id": 45, //82
      "title": "НАОС – наилучшая альтернатива обсуждаемому соглашению",
      "location": "page45",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 46, //83
      "title": "НАОС и ожидаемые результаты переговоров",
      "location": "page46",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 47, //84
      "title": "НАОС как последний аргумент",
      "location": "page47",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 48, //85
      "title": "Задание 24",
      "location": "page48",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Заключить договор с компанией «Кофе» на условиях 9 $ за кг.",
          "right": 0
        }, {
          "label": "Заключить договор с другим поставщиком кофе на условиях 13 за кг.",
          "right": 1
        }, {
          "label": "Заключить договор с компанией «Кофе» на условиях 13,5 $ за кг.",
          "right": 0
        }, {
          "label": "Отказаться от сотрудничества с компанией кофе на их условиях.",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы верно определили НАОС для менеджеров гостиницы в этой ситуации.</p>", "Ответ неверный. <br/><p>НАОС для менеджеров гостиницы был иным.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 49, //86
      "title": "Записная книжка. Задание 12",
      "location": "page49",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 50, //87
      "title": "Тактика",
      "location": "page50",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 51, //88
      "title": "Резюме",
      "location": "page51",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 52, //89
      "title": "Начало переговоров",
      "location": "page52",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 53, //90
      "title": "Представление, формирование интереса",
      "location": "page53",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 54, //91
      "title": "Задание 25",
      "location": "page54",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": false, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Необычное представление себя, компании (проведение дегустации кофе)",
          "right": 1
        }, {
          "label": "Создание доброжелательной атмосферы (комплимент)",
          "right": 1
        }, {
          "label": "Краткое изложение вопроса",
          "right": 1
        }, {
          "label": "Изложение проблемы, которую предлагается решить",
          "right": 0
        }, {
          "label": "Изложение выгод от сотрудничества",
          "right": 1
        }, {
          "label": "Обзор событий, предшествующих встречей",
          "right": 0
        }, {
          "label": "Ссылки на достигнутые договоренности",
          "right": 0
        }, {
          "label": "Рекомендации",
          "right": 0
        }, {
          "label": "Уточняющие вопросы",
          "right": 1
        }],
        "messages": ["Это правильный ответ! <br/><p>Вам удалось выявить все способы начать переговоры, использованные в киноэпизоде.</p>", "Вы ошиблись. <br/><p>Набор способов начать переговоры, который использовали поставщики кофе, был несколько другим.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 55, //92
      "title": "Обозначение общей цели переговоров",
      "location": "page55",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 56, //93
      "title": "Согласование порядка проведения переговоров",
      "location": "page56",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 57, //94
      "title": "Демонстрируйте уверенность!",
      "location": "page57",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 58, //95
      "title": "Записная книжка. Задание 13",
      "location": "page58",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 59, //96
      "title": "Резюме",
      "location": "page59",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 60, //97
      "title": "Изложение позиций и их обсуждение",
      "location": "page60",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 61, //98
      "title": "Формулирование позиций и выявление интересов сторон",
      "location": "page61",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 62, //99
      "title": "Вопросы на прояснение позиций и интересов",
      "location": "page62",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 63, //100
      "title": "Формулирование интересов партнера и проверка",
      "location": "page63",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 64, //101
      "title": "Обозначение собственных позиций",
      "location": "page64",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 65, //102
      "title": "Задание 26",
      "location": "page65",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Насколько я понял, вам необходимо 300-400 кг кофе ежемесячно?",
          "right": 0
        }, {
          "label": "Под какой вид заварки вам необходим кофе и в каких объемах?",
          "right": 0
        }, {
          "label": "У вас есть желающие на этот вид заварки?",
          "right": 0
        }, {
          "label": "Что для вас является главным, по каким критериям вы собираетесь оценивать своего поставщика?",
          "right": 1
        }],
        "messages": ["Именно так! <br/><p>Вопрос о критериях оценки поставщика – наилучший способ продолжить переговоры в этой ситуации.</p>", "Ответ неверный. <br/><p>В этой ситуации оказался бы более полезным другой вопрос.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 66, //103
      "title": "Рекомендации",
      "location": "page66",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 67, //104
      "title": "Записная книжка. Задание 14",
      "location": "page67",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 68, //105
      "title": "Презентация сути предложения и обоснование его ценности",
      "location": "page68",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 69, //106
      "title": "Приведение фактов",
      "location": "page69",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 70, //107
      "title": "Выражение несогласия (речевая технология)",
      "location": "page70",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 71, //108
      "title": "Работа с возражениями. Ответ на контрпредложения",
      "location": "page71",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 72, //109
      "title": "Виды аргументов",
      "location": "page72",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 73, //110
      "title": "Задание 27",
      "location": "page73",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "110_1",
              "q_id": 0
            }],
            "variants": [{
              "label": "Подчеркивание плюсов товара",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Подчеркивание минусов при отказе от покупки ",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Ссылка на внешние стандарты",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Аналогии, метафоры",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "110_2",
              "q_id": 0
            }],
            "variants": [{
              "label": "Подчеркивание плюсов товара",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Подчеркивание минусов при отказе от покупки ",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Ссылка на внешние стандарты",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Аналогии, метафоры",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "110_3",
              "q_id": 0
            }],
            "variants": [{
              "label": "Подчеркивание плюсов товара",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Подчеркивание минусов при отказе от покупки ",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Ссылка на внешние стандарты",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Аналогии, метафоры",
              "v_id": 3,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "110_4",
              "q_id": 0
            }],
            "variants": [{
              "label": "Подчеркивание плюсов товара",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Подчеркивание минусов при отказе от покупки ",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Ссылка на внешние стандарты",
              "v_id": 2,
              "q_id": 0
            }, {
              "label": "Аналогии, метафоры",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Совершенно верно! <br/><p>Вы правильно установили виды аргументации, которые используются в киноэпизодах.</p>", "Вы ошиблись. <br/><p>В каких-то случаях использовался другой вид аргументации.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизоды.</p>", "Закройте это окно и посмотрите правильный ответ."]
      }
    }, {
      "page_id": 74, //111
      "title": "Записная книжка. Задание 15",
      "location": "page74",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 75, //112
      "title": "Резюме",
      "location": "page75",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 76, //113
      "title": "Поиск решения и выработка соглашения",
      "location": "page76",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 77, //114
      "title": "Согласование интересов, условий, обмен уступками",
      "location": "page77",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 78, //115
      "title": "Задание 28",
      "location": "page78",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Имейте несколько вариантов соглашений, но выдвигайте предложения по одному.",
          "right": 0
        }, {
          "label": "Пробуйте вести разведку в разных направлениях, не бойтесь испытать  позиции партнера фразами, начинающимися с «А что если…».",
          "right": 1
        }, {
          "label": "Начальные условия – большие, начальная уступка – маленькая.",
          "right": 1
        }, {
          "label": "Не просите абстрактно о снижении цены – выдвигайте встречное предложение.",
          "right": 1
        }, {
          "label": "Ничего не отдавайте безвозмездно: добровольные уступки делают реакцию другой стороны более жесткой.",
          "right": 1
        }, {
          "label": "Не просто говорите о том, что вас не устраивает, а ведите переговоры о компенсации.",
          "right": 0
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы обнаружили все правила, которые нарушил Дмитрий на этапе выработки соглашения.</p>", "Ответ неверный. <br/><p>Дмитрий нарушил много правил, попытайтесь установить точно, какие именно.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 79, //116
      "title": "Техника выдвижения предложений",
      "location": "page79",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 80, //117
      "title": "Задание 29",
      "location": "page80",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Владеют ли  технологиями представители компании «Кофе»?",
          "questionList": [{
            "label": "да ",
            "right": 1
          }, {
            "label": "нет",
            "right": 0
          }]
        }, {
          "taskText": "Владеют ли технологиями выдвижения предложений представители гостиницы?",
          "questionList": [{
            "label": "да ",
            "right": 1
          }, {
            "label": "нет",
            "right": 0
          }]
        }],
        "messages": ["Именно так! <br/><p>В данном примере переговорными технологиями владеют обе стороны.</p>", "Вы ошиблись. <br/><p>Видимо, вы недооценили переговорное мастерство сторон.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "Закройте это окно и посмотрите правильный ответ. "]
      }
    }, {
      "page_id": 81, //118
      "title": "Техника ответа на предложение и ведения торга",
      "location": "page81",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 82, //119
      "title": "Задание 30",
      "location": "page82",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "taskTitle": ["Название приема", "Речь продавца"], // Заголовки для левой и правой колонки
          "questionList": [{
            "phrase": "Предоставление партнеру тех выгод, которые ему необходимы",
            "label": "Если договоримся, то завтра вы сможете забрать посуду",
            "order": 0
            // "modInfo": "Текст", // Если есть дополнительное описание в модальном окне
            // "image": "img/icon.png" // Если есть иконка или картинка
          }, {
            "phrase": "Подчеркивание цены уступки",
            "label": "Если вы сможете поставлять нам по 2 кг кофе ежемесячно, мы могли бы подумать, чтобы сделать поставку за наш счет, хотя для нас это будет довольно хлопотно, придется арендовать автотранспорт",
            "order": 1
          }, {
            "phrase": "Объяснение, какие потери понесет компания, идя на уступку",
            "label": "Чтобы пойти вам навстречу, нам придется партию посуды, которая предназначается для другого клиента, передать вам, нам придется платить неустойку",
            "order": 2
          }]
        }],
        "messages": ["Абсолютно  правильно! <br/><p>Вам удалось найти в речи продавца все приемы, использованные для повышения ценности уступок.</p>", "Вы ошиблись. <br/><p>В каких-то случаях название приема было иным.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 83, //120
      "title": "Как повышать ценность уступки?",
      "location": "page83",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 84, //121
      "title": "Как реагировать на просьбу о нежелательной уступке?",
      "location": "page84",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 85, //122
      "title": "Задание 31",
      "location": "page85",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Свести к минимуму для клиента важность данной уступки.",
          "right": 0
        }, {
          "label": "Показать, что эта уступка поставит клиента в невыгодное положение.",
          "right": 0
        }, {
          "label": "Предложить альтернативные уступки или другое пакетное соглашение. ",
          "right": 1
        }, {
          "label": "Убедить клиента, что выгоды от сделки при отсутствии уступки не изменятся.",
          "right": 0
        }],
        "messages": ["Совершенно верно! <br/><p>Поставщики одноразовой посуды решили предложить альтернативные уступки.</p>", "Вы ошиблись. <br/><p>Тактика поставщиков посуды была другой.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизод.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 86, //123
      "title": "Как снижать ценность уступки партнера?",
      "location": "page86",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 87, //124
      "title": "Пробное заключение сделки",
      "location": "page87",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 88, //125
      "title": "Советы о тактике переговоров",
      "location": "page88",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 89, //126
      "title": "Записная книжка. Задание 16",
      "location": "page89",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 10,
        "showTitle": true,
        "maxlength": 300,
        "titles": ['Повышение ценности ваших уступок', 'Снижение ценности уступок партнера'],
        "messages": [""]
      }
    }, {
      "page_id": 90, //127
      "title": "Достижение договоренностей",
      "location": "page90",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 91, //128
      "title": "Записная книжка. Задание 17",
      "location": "page91",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }, {
      "page_id": 92, //129
      "title": "Выработка окончательного варианта соглашения, подписание контракта",
      "location": "page92",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 93, //130
      "title": "Завершение переговоров: пример",
      "location": "page93",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 94, //131
      "title": "Взаимовыгодное решение найдено: что дальше?",
      "location": "page94",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 95, //132
      "title": "Утверждение проекта соглашения",
      "location": "page95",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 96, //133
      "title": "Альтернативы окончательному соглашению",
      "location": "page96",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 97, //134
      "title": "Как достичь частичного соглашения?",
      "location": "page97",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 98, //135
      "title": "Резюме",
      "location": "page98",
      "hasSound": false,
      "type": "simple_page"
    }, {
      "page_id": 99, //136
      "title": "Записная книжка. Задание 18",
      "location": "page99",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 5,
        "showTitle": false,
        "maxlength": 300,
        "titles": [''],
        "messages": [""]
      }
    }] // end of pages array in chapter 2
  }, // end 3of chapter
  {
    "chapter_id": 5,
    "chapter_location": "chapter05",
    "title": "Глава 4",
    "description": "Глава 4. Преодоление уловок и манипуляций",
    "pages": [{
      "page_id": 1, //137
      "title": "Преодоление уловок и манипуляций",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //138
      "title": "Преодоление уловок",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //139
      "title": "Задание 32",
      "location": "page03",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": [{
            "label": 2,
            "right": "r13"
          }, {
            "label": 3,
            "right": "r14"
          }, {
            "label": 1,
            "right": "r15"
          }, {
            "label": 6,
            "right": "r16"
          }, {
            "label": 4,
            "right": "r17"
          }, {
            "label": 5,
            "right": "r18"
          }]
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Это правильный ответ! <br/><p>Вы верно определили все уловки, которые были использованы в каждом киноэпизоде.</p>", "Ответ неверный. <br/><p>В каком-то случае использовался другой тип уловок.</p>", "Подумайте еще. <br/><p>Пересмотрите киноэпизоды.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 4, //140
      "title": "Комментарии",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //141
      "title": "Задание 33",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "taskTitle": ["Прием", "Ответ"],
          "questionList": [{
            "phrase": "«Сомнительные обязательства»",
            "modInfo": "Нет гарантии, что партнер выполнит обещания.",
            "label": "Перед подписанием контракта четко сформулируйте, что произойдет, если одна из сторон не выполнит его. Занесите это в договор.",
            "order": 0
            // "image": "img/icon.png" // Если есть иконка или картинка
          }, {
            "phrase": "«Стесняющие условия»",
            "modInfo": "Переговоры проходят в неприятной шумной обстановке. Они прерываются телефонными звонками, приемом посетителей… Вас могут посадить на низкое кресло или лицом к свету…",
            "label": "Спокойно выразите недовольство. Предложите изменить условия.",
            "order": 1
          }, {
            "phrase": "«Личные нападки»",
            "modInfo": "Прерывание, повышение тона голоса, сознательное понижение статуса собеседника.",
            "label": "Проведите «переговоры о переговорах». Обсудите «правила игры», уверенно отметьте, что личные нападки недопустимы.",
            "order": 2
          }, {
            "phrase": "«Позиционное давление»",
            "modInfo": "Вы послали на подпись согласованный контракт. Получаете его назад подписанным, но с вычеркнутыми и исправленными пунктами.",
            "label": "Выскажите несогласие. Напомните, о чем договорились ранее.",
            "order": 3
          }]
        }],
        "messages": ["Совершенно верно! <br/><p>Вы знаете, как реагировать на описанные приемы манипулирования.</p>", "Вы ошиблись. <br/><p>В каком-то случае реакция на приемы манипулирования должна быть иной.</p>", "Подумайте еще. <br/><p>Прочитайте внимательно, в чем заключается суть каждого из приемов.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 6, //142
      "title": "Задание 34",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "taskTitle": ["Прием", "Ответ"],
          "questionList": [{
            "phrase": "«Салями»",
            "modInfo": "Как от большого батона колбасы отрезают по маленькому кружочку, так и ваши оппоненты выдают вам необходимую информацию маленькими порциями или вытягивают из вас маленькие уступки, одна за другой.",
            "label": "Вернитесь к обсуждению целей переговоров, подчеркните общие интересы. Объясните свою установку на «выиграл – выиграл» и скажите, что ожидаете такого же открытого поведения от партнеров.",
            "order": 0
            // "image": "img/icon.png" // Если есть иконка или картинка
          }, {
            "phrase": "«Максимальное завышение начального уровня»",
            "modInfo": "Ваш партнер стремится как можно дольше сохранять свои позиции. Часто его начальные условия включают пункты, от которых можно безболезненно отказаться, выдавая это за уступку.",
            "label": "Докажите необоснованность требований, сославшись на цены и условия на рынке и т.д. Подтвердите свои доводы фактами из независимых источников.",
            "order": 1
          }, {
            "phrase": "«Давление с изображением собственного бессилия»",
            "modInfo": "Партнер упирает на безвыходность его ситуации, пытаясь вызвать у вас сочувствие своим «бедственным положением».",
            "label": "Не поддавайтесь. Выразите сочувствие, но твердо объясните, почему не можете изменить свои условия.",
            "order": 2
          }, {
            "phrase": "«Ультиматум» или «Отказ от переговоров»",
            "modInfo": "Ваш партнер угрожает вам или выдвигает неприемлемые для вас условия в резкой и бескомпромиссной манере.",
            "label": "Не отвечайте грубостью на грубость. Вернитесь к принципам проведения переговоров: предложите разделить проблему на составные части. Возьмите паузу, подключите к проблеме других специалистов вашей компании.",
            "order": 3
          }]
        }],
        "messages": ["Абсолютно правильно! <br/><p>Вы отлично подготовились к переговорам и не позволите манипулировать собой.</p>", "Это неправильный ответ. <br/><p>Некоторые приемы манипулирования требуют иной реакции.</p>", "Подумайте еще. <br/><p>Прочитайте внимательно описание каждого из приемов.</p>", "И снова ошибка. <br/><p>Закройте это окно и посмотрите правильный ответ.</p>"]
      }
    }, {
      "page_id": 7, //143
      "title": "Резюме",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //144
      "title": "Записная книжка. Задание 19",
      "location": "page08",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 10,
        "showTitle": true,
        "maxlength": 120,
        "titles": ['Уловка', 'Как противостоять'],
        "messages": [""]
      }
    }] // end of pages array in chapter 2
  }, // end 4of chapter
  {
    "chapter_id": 6,
    "chapter_location": "chapter06",
    "title": "Глава 5",
    "description": "Глава 5. Итоговый тест",
    "pages": [{
      "page_id": 1, //145
      "title": "Итоговый тест",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //146
      "title": "Итоговый тест",
      "location": "page02",
      "hasSound": false,
      "type": "test",
      "messages": [""]
    }, {
      "page_id": 3, //147
      "title": "Заключение",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of chapter
  }] // end of chapters array
};

var testStructure = {
  "tests": [{
    "testId": 0,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 5,
      "caption": "group1",
      "qUse": "all",
      "questions": [{
        "question": "Клиент заявляет, что цена на ваш товар слишком высока. В ответ на это вы соглашаетесь снизить цену на 5%.\n" + "В данном случае предложенная скидка – это… \n",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "аргумент  в процессе продажи",
          "right": true
        }, {
          "label": "элемент переговорного процесса",
          "right": false
        }]
      }, {
        "question": "Суть переговоров заключается в том, чтобы…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "давать и брать",
          "right": false
        }, {
          "label": "совместно принимать решения",
          "right": true
        }, {
          "label": "добиваться компромисса",
          "right": false
        }, {
          "label": "создавать положительный имидж честного переговорщика",
          "right": false
        }]
      }, {
        "question": "В ситуации коммерческих переговоров стратегия соперничества («наша сторона должна выиграть, а ваша – проиграть») является оптимальной?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да, всегда",
          "right": false
        }, {
          "label": "нет, не всегда",
          "right": true
        }]
      }, {
        "question": "У вас есть всего три часа на проведение переговорного процесса, включая подготовку к нему. Как вы распределите свое время?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "1 час – на подготовку, 2 часа – на ведение переговоров",
          "right": false
        }, {
          "label": "1,5 часа – на подготовку, 1,5 часа – на ведение переговоров",
          "right": false
        }, {
          "label": "2 часа на подготовку, 1 час – на переговоры",
          "right": true
        }]
      }, {
        "question": "К вам для переговоров приехала руководительница отдела продаж фирмы, производящей и поставляющей офисное оборудование. Вы заметили, что она подъехала к вашему офису на автомобиле представительского класса, на ней надет шикарный костюм от «Chanel», в руках у нее модная деловая сумка от «Vuitton». Какой вы сделаете вывод?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Будете уверены, что имеете дело с первоклассной фирмой",
          "right": false
        }, {
          "label": "Сочтете, что услуги этой компании будут стоить очень дорого",
          "right": false
        }, {
          "label": "Не будете обращать внимания на то, какая у нее машина и как она одета, поскольку это не имеет отношения к предстоящим переговорам",
          "right": true
        }]
      }, {
        "question": "Согласны ли вы с утверждением: \n" + "«Для проведения успешных переговоров необходимо жесткое следование заранее намеченной тактике»?\n",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": false
        }, {
          "label": "нет",
          "right": true
        }]
      }, {
        "question": "Определение области торга и ценности уступок относится к следующему этапу переговоров…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "изложение точек зрения и обсуждение",
          "right": false
        }, {
          "label": "подготовка",
          "right": true
        }, {
          "label": "поиск решения и выработка соглашения",
          "right": false
        }, {
          "label": "начало переговоров",
          "right": false
        }]
      }, {
        "question": "К параметрам торга относятся:",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "цена",
          "right": true
        }, {
          "label": "объем сделки в натуральном и денежном выражении",
          "right": true
        }, {
          "label": "срок поставки",
          "right": true
        }, {
          "label": "срок оплаты",
          "right": true
        }]
      }, {
        "question": "Вы для себя решили, что нижний предел цены, до которого вы можете опуститься при продаже своего автомобиля, составляет 500 000 рублей. В результате переговоров вы достигли именно этого, минимального для вас, уровня цены. Можно ли считать, что такой итог переговоров выгоден для вас?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Ваш бизнес – консультации и проведение обучения по переговорному процессу. Вы получили запрос по электронной почте о проведении однодневного семинара для членов Городской Думы. Тема семинара полностью соответствует той, что вы традиционно проводите, и специальной подготовки вам не потребуется. Что вы сделаете?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "назовете стандартную цену за семинар, которая заявлена на вашем сайте",
          "right": false
        }, {
          "label": "назовете цену на 15% ниже стандартной",
          "right": false
        }, {
          "label": "назовете цену на 50% выше стандартной и попросите отдельно оплатить  подготовку",
          "right": false
        }, {
          "label": "запросите список участников",
          "right": true
        }]
      }, {
        "question": "Назовите область обсуждения (или «арену переговоров»).\n" + "Покупатель готов приобрести товар максимум за 1000 рублей. Его желаемой ценой является 500 рублей. Для продавца желаемая цена продажи – 1300 рублей. Минимальная цена, за которую продавец готов отдать товар, составляет 900 рублей.\n",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "500 – 1000 рублей",
          "right": false
        }, {
          "label": "500 – 900 рублей",
          "right": false
        }, {
          "label": "900 – 1000 рублей",
          "right": true
        }, {
          "label": "900– 1300 рублей",
          "right": false
        }]
      }, {
        "question": "Наиболее выгодные варианты уступок, которые вы можете сделать,  возможны в случае (-ях):",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "низкой цены уступки для вас (низкие затраты, незначительные усилия)",
          "right": true
        }, {
          "label": "низкой ценности уступки для партнера",
          "right": false
        }, {
          "label": "высокой ценности вашей уступки для партнера",
          "right": true
        }]
      }, {
        "question": "Вы достали билет на концерт вашего любимого исполнителя и попросили няню задержаться сверх положенного времени с вашим трехлетним сыном. Обычно вы оплачиваете каждый сверхурочный час по ставке на 30% выше обычной. Но на этот раз няня сказала, что вряд ли сможет вас выручить. Однако отказ не был категоричным, и вам показалось, что она ждет от вас повышения оплаты. Что вы сделаете?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "предложите более высокую цену, но оговорите, что это касается лишь данного случая",
          "right": false
        }, {
          "label": "скажете, что у вас есть очень веские причины, чтобы просить ее об этой услуге",
          "right": false
        }, {
          "label": "спросите, какие у нее есть идеи о разрешении этой ситуации",
          "right": true
        }]
      }, {
        "question": "Вы ведете переговоры с поставщиком комплектующих для вашего производства. Вы уже получили альтернативное предложение от другого поставщика. \n" + "Как вы поступите, если настоящие переговоры пойдут трудно?\n",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сразу заявите об альтернативном предложении, чтобы снизить аппетиты другой стороны",
          "right": false
        }, {
          "label": "не будете вообще об этом говорить в ходе переговоров",
          "right": false
        }, {
          "label": "используете этот факт как последний аргумент в защиту своей позиции",
          "right": true
        }]
      }, {
        "question": "Согласны ли вы с утверждением?\n" + "Основные приемы ведения торга – повышение видимой стоимости и ценности уступки, которую вы делаете партнеру, и снижение видимой стоимости и ценности уступки, которую делает партнер.\n",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "да",
          "right": true
        }, {
          "label": "нет",
          "right": false
        }]
      }, {
        "question": "Как лучше всего поступить, если партнер в условиях цейтнота использует прием «выдвижение требований в последний момент»?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "согласиться с требованием, чтобы спасти сделку",
          "right": false
        }, {
          "label": "выдвинуть встречное требование",
          "right": false
        }, {
          "label": "напомнить, что об этом условии речь не шла, и что его надо обсуждать отдельно, если партнер на нем настаивает",
          "right": true
        }]
      }, {
        "question": "Как лучше всего поступить, если в процессе переговоров партнер прерывает вас, повышает тон голоса?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сделать вид, что вы ничего не замечаете и спокойно продолжать обсуждение",
          "right": false
        }, {
          "label": "поступить так же, как он",
          "right": false
        }, {
          "label": "в твердой форме высказать свое мнение о недопустимости использования личных нападок",
          "right": true
        }]
      }, {
        "question": "Как лучше всего поступить, если в процессе переговоров ваш партнер стремится максимально завышать требования и как можно дольше отстаивать свою крайнюю позицию?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сообщить, что вы понимаете, что партнер сознательно стремится вас прессинговать",
          "right": false
        }, {
          "label": "доказать необоснованность требований, подтвердить свои доводы фактами из независимых источников",
          "right": true
        }, {
          "label": "играть роль «робкого ягненка», а затем «показать клыки» ",
          "right": false
        }, {
          "label": "предупредить, что если партнер не изменит свою позицию, то вы прекратите переговоры",
          "right": false
        }]
      }, {
        "question": "Как лучше всего поступить, если в процессе переговоров ваш партнер упирает на безвыходность своей ситуации, пытаясь вызвать у вас сочувствие своим «бедственным положением»?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "сообщить, что вы понимаете, что партнер сознательно стремится ввести вас в заблуждение",
          "right": false
        }, {
          "label": "выразите сочувствие его ситуации",
          "right": true
        }, {
          "label": "твердо объяснить, почему не можете изменить свои условия",
          "right": true
        }]
      }]
    }]
  }, {
    "testId": 1,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "id": 2,
      "caption": "group2",
      "qUse": "all",
      "questions": [{
        "question": "Какие высказывания относятся к переговорному процессу?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Я убеждаю клиента, что предлагаемый мной товар полностью соответствует его потребностям.",
          "right": false
        }, {
          "label": "Я строю презентацию продукта на основе выявленной потребности.",
          "right": false
        }, {
          "label": "Я договариваюсь с клиентом о сокращении сроков поставки на условиях 100% предоплаты. ",
          "right": true
        }, {
          "label": "Я убеждаю клиента, что цена продукта соответствует его качеству.",
          "right": false
        }, {
          "label": "Я обсуждаю с клиентом сроки сервисного обслуживания и соглашаюсь снизить цену в обмен на отказ от гарантийного обслуживания.",
          "right": true
        }]
      }, {
        "question": "Отметьте обязательные условия для ведения переговорного процесса (без этих условий процесс переговоров невозможен).",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Обе стороны заинтересованы в сделке",
          "right": true
        }, {
          "label": "Обе стороны имеют альтернативные предложения",
          "right": false
        }, {
          "label": "Обе стороны настроены на поиск взаимовыгодного решения",
          "right": false
        }, {
          "label": "Обе стороны уполномочены менять условия соглашения",
          "right": true
        }, {
          "label": "Цель одной из сторон – заставить другую сторону принять ее условия в неизменном виде",
          "right": false
        }]
      }, {
        "question": "Что является «золотым правилом» переговорного процесса? ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "У вас не будет второго шанса произвести первое благоприятное впечатление.",
          "right": false
        }, {
          "label": "Не вступайте в переговоры, пока вас к этому не вынудили.",
          "right": true
        }, {
          "label": "Не «дарите» уступки: отдавайте уступку в обмен на уступку другой стороны.",
          "right": false
        }, {
          "label": "Ориентируясь на долгосрочное сотрудничество, стремитесь к взаимовыгодному решению.",
          "right": false
        }]
      }, {
        // "question": "Компромисс целесообразен,  если вы ведете переговоры по:",
        "question": "В каких случаях целесообразен компромисс?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          // "label": "Одному параметру сделки ",
          "label": "Если ведутся переговоры по одному параметру сделки",
          "right": true
        }, {
          // "label": "По нескольким параметрам одновременно",
          "label": "Если ведутся переговоры по нескольким параметрам одновременно",
          "right": false
        }, {
          // "label": "Компромисс целесообразен в любой ситуации",
          "label": "В любой ситуации",
          "right": false
        }, {
          "label": "Ни при каких условиях",
          "right": false
        }]
      }, {
        "question": "Как лучше всего поступить, если переговоры проходят в неприятной шумной обстановке? Они прерываются телефонными звонками, приемом посетителей… Вас могут посадить на низкое кресло или лицом к свету…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "сделать вид, что ничего страшного не происходит",
          "right": false
        }, {
          "label": "предложить изменить условия проведения переговоров",
          "right": true
        }, {
          "label": "высказать свою неудовлетворенность",
          "right": false
        }, {
          "label": "прекратить переговоры",
          "right": false
        }]
      }, {
        "question": "Какой из этапов переговорного процесса в наибольшей степени определяет его успех?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "подготовка",
          "right": true
        }, {
          "label": "начало переговоров",
          "right": false
        }, {
          "label": "изложение точек зрения и обсуждение",
          "right": false
        }, {
          "label": "поиск решения и выработка соглашения",
          "right": false
        }]
      }, {
        "question": "Какие  элементы подготовки к переговорам в условиях острой нехватки времени можно проигнорировать?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Формулирование моих целей и интересов («я их и так знаю»)",
          "right": false
        }, {
          "label": "Анализ предполагаемых целей другой стороны («их можно выявить в начале переговоров»)",
          "right": false
        }, {
          "label": "Составление различных вариантов соглашения («в ходе переговоров их предложит другая сторона, и я их проанализирую»)",
          "right": false
        }, {
          "label": "Закупка шампанского и сувениров в честь удачно подписанного соглашения («это успеется»)",
          "right": true
        }, {
          "label": "Подбор фактов, подтверждающих легитимность моих заявлений («они и так всем известны»)",
          "right": false
        }, {
          "label": "Подготовка НАОС («если переговоры закончатся провалом, тогда и буду думать, что делать дальше»)",
          "right": false
        }, {
          "label": "Проект будущего договора с банковскими реквизитами сторон",
          "right": true
        }]
      }, {
        "question": "Положительная область обсуждения на переговорах возникает в том случае, когда:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "точка сопротивления продавца находится выше точки сопротивления покупателя.",
          "right": false
        }, {
          "label": "точка сопротивления продавца находится ниже точки сопротивления покупателя.",
          "right": true
        }]
      }, {
        "question": "Назовите область обсуждения (или «арену переговоров»). Минимальная цена, за которую продавец готов отдать товар, составляет 170 руб. Его желаемой ценой является 210 руб. Точка сопротивления покупателя – 160 руб. Его целевая точка – 120 руб. ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "120–210 руб.",
          "right": false
        }, {
          "label": "120–160 руб.",
          "right": false
        }, {
          "label": "120–170 руб.",
          "right": false
        }, {
          "label": "160–170 руб.",
          "right": false
        }, {
          "label": "Область обсуждения отсутствует",
          "right": true
        }]
      }, {
        "question": "Ваша компания производит механические узлы для металлообрабатывающих станков. В лучшие годы вам удавалось продать не более 3 тыс. комплектов различным производителям.  Благодаря значительным усилиям вам удалось получить согласие на 10-минутную встречу с руководителем крупнейшего в стране станкостроительного холдинга. Вам пришлось ждать более 20 минут в приемной, затем вас пригласили к нему в кабинет. Без должных элементов делового этикета руководитель холдинга заявляет: «Я очень занят, поэтому давайте сразу к делу. Какова ваша лучшая цена за поставку  5 тысяч комплектов узлов нашему холдингу в следующем году?» Что вы сделаете?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Назовете низшую цену, поскольку у вас вряд ли будет второй шанс получить такое предложение.",
          "right": false
        }, {
          "label": "Назовете высокую цену.",
          "right": false
        }, {
          "label": "Оставите свою визитку, сказав: «Пожалуйста, позвоните мне, когда у Вас будет возможность для более продолжительного обсуждения этого вопроса».",
          "right": false
        }, {
          "label": "Назовете низшую цену плюс 5%.",
          "right": true
        }]
      }, {
        "question": "В ходе предстоящих переговоров планируется обсудить девять вопросов, в том числе условия оплаты. Вы ожидаете, что именно по этому вопросу вам будет труднее всего найти взаимоприемлемое решение. <br/>Как вы построите переговорный процесс?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Начнете переговоры с обсуждения условий оплаты.",
          "right": false
        }, {
          "label": "Перенесете этот вопрос на  середину переговорного процесса.",
          "right": false
        }, {
          "label": "Будете обсуждать его последним.",
          "right": true
        }]
      }, {
        "question": "Закончите предложение: <br/>В процессе переговоров в ответ на требование уступки надо… ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Безмятежно улыбаться",
          "right": false
        }, {
          "label": "Обосновывать  вашу позицию",
          "right": false
        }, {
          "label": "Напоминать правила ведения переговорного процесса",
          "right": false
        }, {
          "label": "Выдвигать встречное требование ",
          "right": true
        }]
      }, {
        "question": "Обмен уступками наиболее эффективен, когда интересы сторон…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "противоположны – максимальный выигрыш для одного партера означает максимальный проигрыш для другого.",
          "right": false
        }, {
          "label": "совпадают – максимальный выигрыш для одного партнера означает максимальный выигрыш для другого.",
          "right": false
        }, {
          "label": "разнонаправлены – выигрыши, которые могут получить партнеры по разным параметрам, значительно  отличаются.",
          "right": true
        }]
      }, {
        "question": "Вас поставили в известность, что стоимость предлагаемых вами услуг по разработке нового дизайна и оборудованию офиса клиента превышает выделенный на это  бюджет. Что вы сделаете?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Будете настаивать на этой стоимости, утверждая, что это не затраты, а инвестиции, и они себя обязательно окупятся.",
          "right": false
        }, {
          "label": "Проанализируете смету на переоборудование офиса и определите, где можно использовать более дешевые материалы.",
          "right": true
        }, {
          "label": "Выясните, каков точный размер бюджета, и согласитесь с ним, если он отличается от вашего предложения не более чем на 5-7%.",
          "right": false
        }]
      }, {
        "question": "Как лучше всего поступить, если партнер использует позиционное давление?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "разобраться в причинах возникновения спорных моментов",
          "right": true
        }, {
          "label": "сообщить, что вы считаете такое поведение партнера недопустимым",
          "right": false
        }, {
          "label": "разорвать отношения",
          "right": false
        }, {
          "label": "объяснить, почему вы не можете принять условия партнера в таком виде",
          "right": true
        }]
      }, {
        "question": "На этапе подготовки вы сформировали 3 варианта соглашения. Как вы поступите в ходе переговорного процесса?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Изложите сразу все три варианта, чтобы сэкономить время и партнер смог быстро оценить, что для него предпочтительне.",
          "right": false
        }, {
          "label": "Предложите для рассмотрения 2 варианта, а 3-й оставите «про запас».",
          "right": false
        }, {
          "label": "Будете выдвигать предложения по одном.",
          "right": true
        }]
      }, {
        "question": "Какую речевую технологию вы выберете на стадии выдвижения предложений (этап «Поиск решения»)?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "«Мы сможем вам поставить оборудование в течение 5 рабочих дней»",
          "right": false
        }, {
          "label": "«Если вы оплатите завтра, то мы, вероятно, сможем поставить оборудование в течение 5 рабочих дней»",
          "right": true
        }, {
          "label": "«Мы сможем вам поставить оборудование в течение 5 рабочих дней, если вы оплатите завтра»",
          "right": false
        }]
      }, {
        "question": "Вы ожидали, что партнер назовет цену 20 долларов за единицу продукции. Однако он сразу же сделал вам очень выгодное предложение – 15 долларов. Как будет правильно?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Согласиться с этой ценой ",
          "right": false
        }, {
          "label": "Не принимать это предложение",
          "right": true
        }]
      }, {
        "question": "Как лучше всего поступить, если есть вероятность, что партнер не собирается выполнять взятые на себя обязательства?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "отказаться от сотрудничества с данным партнером",
          "right": false
        }, {
          "label": "перенести подписание контракта «до лучших времен» ",
          "right": false
        }, {
          "label": "перед тем как подписать договор, четко сформулировать, что произойдет, если одна из сторон его не выполнит",
          "right": true
        }, {
          "label": "занести в договор штрафные санкции за невыполнение взятых на себя обязательства",
          "right": true
        }]
      }]
    }]
  }]
};

var manifest = ["img/01-01.png"];

;(function () {
  'use strict';

  config.$inject = ["$stateProvider", "$urlRouterProvider", "courseDataObj"];
  run.$inject = ["$state", "$rootScope", "$timeout", "staticService", "userService", "scormWrapper", "courseInfo", "courseDataObj"];
  angular.module('courseApp', ['ui.router', 'ngAnimate', 'ngSanitize', 'vjs.video']).constant('courseDataObj', courseStructure).constant('testDataObj', testStructure).constant('courseInfo', {
    bookmark: {
      page: 1,
      chapterPage: 1,
      chapter: 1
    },
    exercises: [],
    notes: [],
    testScore: 0
  }).directive('compile', ['$compile', function ($compile) {
    return function (scope, element, attrs) {
      scope.$watch(function (scope) {
        // watch the 'compile' expression for changes
        return scope.$eval(attrs.compile);
      }, function (value) {
        // when the 'compile' expression changes assign it into the current DOM
        element.html(value);
        // compile the new DOM and link it to the current scope.
        // NOTE: we only compile .childNodes so that we don't get into infinite loop compiling ourselves
        $compile(element.contents())(scope);
      });
    };
  }]).config(config).run(run

  /* @ngInject */
  );function config($stateProvider, $urlRouterProvider, courseDataObj) {

    $stateProvider.state('page', {
      url: '/chapter/:chapter/page/:page',
      views: {
        'header': {
          templateUrl: 'js/components/header/headerTmpl.html',
          controller: 'HeaderCtrl',
          controllerAs: '$ctrl'
        },
        'content': {
          templateUrl: function templateUrl($stateParams) {

            // переход по кастомным папкам типа «page04a»
            var chapterLocation = courseDataObj.chapters[$stateParams.chapter - 1].chapter_location,
                pageLocation = courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].location;
            // console.log('::main:: confog:', chapterLocation, pageLocation)
            return "pages/" + chapterLocation + "/" + pageLocation + "/index.html";
          },
          controller: 'PageCtrl',
          controllerAs: '$ctrl'
        },
        'footer': {
          templateUrl: 'js/components/footer/footerTmpl.html',
          controller: 'FooterCtrl',
          controllerAs: '$ctrl'
        }
      }
    }
    // .state('test', {})

    // $urlRouterProvider.otherwise('/chapter/1/page/1')
    );
  }

  /* @ngInject */
  function run($state, $rootScope, $timeout, staticService, userService, scormWrapper, courseInfo, courseDataObj) {

    var _preload = function preload() {
      if (_preload != null) {
        // preload.close();
      }
      _preload = new createjs.LoadQueue(false);
      _preload.on('fileload', onFileload, this);
      _preload.on('progress', onProgress, this);
      _preload.on('complete', onComplete, this);
      _preload.on('error', onError, this);
      _preload.loadManifest(manifest);
    };

    var onFileload = function onFileload() {
      // 
    };
    var onProgress = function onProgress() {
      // 
    };
    var onComplete = function onComplete() {
      // alert('img laded!')
      // console.log('all img loaded!')
      $state.go('page', { chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage });
    };
    var onError = function onError(e) {
      //console.error('can`t load image!', e.data.src)
    };

    _preload();

    scormWrapper.setAPIVersion("1.2");
    scormWrapper.doLMSInitialize();

    if (scormWrapper.LMSIsInitialized()) {
      console.info('<:: Load from LMS ::>');

      var completionStatus = scormWrapper.doLMSGetValue('cmi.completion_status');
      console.info('Course completion status » ' + completionStatus);

      if (completionStatus === 'not attempted') {
        scormWrapper.doLMSSetValue('cmi.suspend_data', '');
      }

      // alert('suspend_data >> '+suspend_data)
      var suspend_data = scormWrapper.doLMSGetValue('cmi.suspend_data').replace(/\*\#/g, '[').replace(/\#\*/g, ']');

      var score = scormWrapper.doLMSGetValue('cmi.core.score.raw');
      console.log('%c LMS score -> ', 'color:#C0FFEE;', score);

      courseInfo.testScore = score;
      console.log('%c courseInfo testScore -> ', 'color:#BADA55;', courseInfo.testScore);

      if (suspend_data.length > 0) {
        try {
          courseInfo = JSON.parse(suspend_data);
          window.bookmark = courseInfo.bookmark;
          window.bookmark.loaded = false;
          window.exercises = courseInfo.exercises;
          window.exercises.loaded = false;
          userService.loadExs(courseInfo.exercises);
          userService.loadNotes(courseInfo.notes);
        } catch (e) {
          console.error('Что-то пошло не так... \n', e);
        }
      }

      console.info('main:: courseInfo', courseInfo);
    }

    // alert('start change bookmark')
    // $state.go('page', ({chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage}));

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState) {

      // stop audio
      staticService.stopAudio(true);
      // replace current position of audio slider to zero
      staticService.setAudioTime(0);

      staticService.setBookmark(Number(toParams.page), Number(toParams.chapter));

      userService.sendToLMS();
    });

    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
      $timeout(function () {
        // stop audio
        staticService.stopAudio(false);
      }, 100);
    });
  }
})();
/********************************************************************************
**
** Prometheus Research SCORM API Wrapper
** 
** Supports:
**
** SCORM 1.2, SCORM 2004.[1]
**
** The following is a porting of the code from the
** original APIWrapper.js file to Angular JS with a 
** number of improvements from
** Concurrent Technologies Corporation (CTC) released
** under the MIT style license available
** on the ADL scorm website [2]
** 
** The code has been updated to wrap the original functions in
** in angularjs and extend support for SCORM 2004 [4].
** It draws upon some of concepts offered in the Pipewerks[3]
** 
** The code is served as an AngularJS service [5].
** 
** References/Inspiration:
** 
** [1] ADL
** http://www.adlnet.gov/scorm
** 
** [2] CTC SCORM SCORM 1.2 API wrapper
** http://www.adlnet.gov/resources/scorm-1-2-content-packages?type=software_downloads
** 
** [3] Pipewerks SCORM wrapper
** https://github.com/pipwerks/scorm-api-wrapper
** 
** [4] SCORM.com
** http://scorm.com/scorm-explained/technical-scorm/run-time/
** 
** [5] Angularjs services
** http://docs.angularjs.org/guide/dev_guide.services
**
** Copyright (c) Prometheus Research 2014
** Copyright (c) Philip Hutchison
** Copyright (c) Concurrent Technologies Corporation (CTC)
** ---------------------------------------------------------------------------------
** License:
** 
** 
** Permission is hereby granted, free of charge, to any person obtaining a 
** copy of this software and associated documentation files (the “Software”), 
** to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the Software is furnished to
** do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in 
** all copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
** 
*********************************************************************************/
;(function () {
  "use strict";

  angular.module('courseApp').service('scormWrapper', scormWrapper);

  /* @ngInject */
  function scormWrapper() {

    var version = "Auto";
    var API = false;
    var scormVersions = ["Auto", "1.2", "2004"];

    this.setAPIVersion = function (scormVersion) {

      scormVersion = scormVersion || "Auto";
      console.log('set SCORM ver:', scormVersion);

      var v = scormVersions.indexOf(scormVersion.toString());
      v > -1 ? version = scormVersions[v] : console.log("Not found, default to Auto");
      return version;
    };

    this.getAPIVersion = function () {
      return version;
    };

    this.isAvailable = function () {
      return true;
    };

    this.doLMSInitialize = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSInitialize", "Initialize")(""));
    };

    this.doLMSFinish = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSFinish", "Terminate")(""));
    };

    this.doLMSGetValue = function (parameter) {
      return this.getAPICall("LMSGetValue", "GetValue")(parameter);
    };

    this.doLMSSetValue = function (parameter, value) {
      return this.cmiBooleanToJs(this.getAPICall("LMSSetValue", "SetValue")(parameter, value));
    };

    this.doLMSCommit = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSCommit", "Commit")(""));
    };

    this.doLMSGetLastError = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.doLMSGetErrorString = function (errorCode) {
      return this.getAPICall("LMSGetErrorString", "GetErrorString")(errorCode.toString());
    };

    this.doLMSGetDiagnostic = function (errorCode) {
      return this.getAPICall("LMSGetDiagnostic", "GetDiagnostic")(errorCode.toString());
    };

    this.LMSIsInitialized = function () {
      return API;
    };

    this.ErrorHandler = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.cmiBooleanToJs = function (value) {
      return value === "1" || value === 1 || value === "true" || value === true;
    };

    this.getAPIHandle = function () {

      var win = window;

      if (win.parent && win.parent != win) {
        this.findAPI(win.parent);
      }

      if (!API && win.top.opener) {
        this.findAPI(win.top.opener);
      } else if (!API) {
        console.log("Unable to find API adapter");
      }
    };

    this.findAPI = function (win) {

      var findAttempts = 0,
          findAttemptLimit = 500;

      for (findAttempts; findAttempts < findAttemptLimit; findAttempts++) {

        if (win.API && (version === "1.2" || version === "Auto")) {
          API = win.API;
          version = "1.2";
          break;
        } else if (win.API_1484_11 && (version === "2004" || version === "Auto")) {
          API = win.API_1484_11;
          version = "2004";
          break;
        } else if (win.parent && win.parent != win) {
          findAttempts++;
          win = win.parent;
        }
      }
    };

    this.getAPICall = function (funcname12, funcname2004) {

      if (!API) {
        this.getAPIHandle();
        if (!API) {
          return function () {
            console.log("No API found, can't execute: " + funcname12 + " or " + funcname2004);
          };
        }
      }

      switch (version) {
        case "2004":
          return function () {
            return API[funcname2004].apply(API, arguments);
          };

        case "1.2":
          return function () {
            return API[funcname12].apply(API, arguments);
          };
      }
    };
  };
})();
;(function () {
  'use strict';

  staticService.$inject = ["courseDataObj", "courseInfo", "$document"];
  angular.module('courseApp').service('staticService', staticService

  /* @ngInject */
  );function staticService(courseDataObj, courseInfo, $document) {
    var _this = this,
        _arguments = arguments;

    var modals = {
      'menu': { state: false },
      'stats': { state: false },
      'about': { state: false },
      'notes': { state: false },
      'help': { state: false },
      'exercise': { state: false },
      'video': { state: false },
      'cloak': { state: false },
      'addInfo': { state: false }
    };

    //
    this.getModalState = function (index) {
      // console.log('staticService:: getModalState: index', index)
      return modals[index].state;
    };

    this.showModal = function (index, headText, bodyText, answer, specific) {
      // console.log('staticService:: showModal:', index, modals[index])
      if (modals[index].state) {
        modals[index].state = false;
      } else {
        _this.closeModals();

        if (index == 'exercise') {
          document.getElementsByClassName('modal_head')[0].innerHTML = headText;
          document.getElementsByClassName('modal_body')[0].innerHTML = bodyText;
          if (specific != "final") document.getElementById('pie-chart').style.display = 'none';
          modals['exercise'].content = bodyText;
          modals['exercise'].answer = answer;
          modals['exercise'].heading = headText;
        }
        modals[index].state = true;
        modals['cloak'].state = true;
      }
    };

    this.closeModals = function (index) {
      for (var key in modals) {
        if (key == 'video' && modals[key].state == true) {
          var oldPlayer = document.querySelector('.my-home-video');
          // console.warn('closeModals:: oldPlayer:', oldPlayer)
          videojs(oldPlayer).dispose();
        }
        modals[key].state = false;
      }
    };

    //
    this.getCourseName = function () {
      return {
        course: courseDataObj.course,
        description: courseDataObj.description
      };
    };

    // call getChapterObj() from 'HeaderCtrl' controller
    this.getChapterObj = function (index) {
      return courseDataObj.chapters[index];
    };

    this.getChaptersTotal = function () {
      return courseDataObj.chapters;
    };

    this.getPageTotal = function () {
      var totalPages = 0;
      for (var i = 0; i < courseDataObj.chapters.length; i++) {
        totalPages += courseDataObj.chapters[i].pages.length;
      }
      return totalPages;
    };
    this.getBookmark = function () {
      return courseInfo.bookmark;
    };

    this.setBookmark = function (chapterPage, chapter) {
      console.warn('staticService:: try to setBookmark:', chapterPage, chapter);
      courseInfo.bookmark.chapterPage = chapterPage;
      courseInfo.bookmark.chapter = chapter;

      if (chapter == 1) {
        courseInfo.bookmark.page = chapterPage;
      } else {
        var tmpPages = 0;
        for (var i = 0; i < chapter - 1; i++) {
          tmpPages += courseDataObj.chapters[i].pages.length;
        }
        courseInfo.bookmark.page = tmpPages + chapterPage;
      }
      console.log('staticService:: setBookmark ChP: %d, Ch: %d, Page: %d', chapterPage, chapter, courseInfo.bookmark.page);
    };

    // get exercise data array
    this.getData = function ($stateParams, prop) {
      // console.log('staticService:: courseDataObj:', courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1])
      if (prop == 'data') {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data;
      } else {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data[prop];
      }
    };

    // get chapter's title
    this.getTitle = function ($stateParams) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].title;
    };

    // get message array
    this.getMessage = function ($stateParams, num) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].messages[num];
    };

    //for task-marker-note
    this.setMarkerNote = function ($stateParams, index, marker) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data.questionList[index].marker = marker;
    };

    /**
    *  audio section
    */
    var audioTime = 0,
        stopAudio = false;

    this.setAudioTime = function (time) {
      audioTime = time;
    };

    this.getAudioTime = function () {
      return audioTime;
    };

    this.stopAudio = function (bool) {
      stopAudio = bool;
    };

    this.getStopAudio = function () {
      return stopAudio;
    };

    var waitAudio = false;
    this.startAudio = function (toggler) {
      if (_arguments.length === 0) {
        return waitAudio;
      };
      waitAudio = toggler;
    };

    /***************************************************************
    /  For addInfo modal
    /**************************************************************/

    this.addInfo = function (content, state, heading) {
      document.getElementsByClassName('modal__content_add-info')[0].innerHTML = content;
      modals['addInfo'].content = content;
      modals['addInfo'].state = state;
      modals['addInfo'].heading = heading;
      modals['cloak'].state = true;
    };

    this.getAddInfo = function () {
      return modals['addInfo'];
    };

    this.getExercise = function () {
      return modals['exercise'];
    };

    // Close modals by several types
    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(modals['exercise']);
      }
    });
  }
})();

;(function () {
  'use strict';

  userService.$inject = ["courseDataObj", "testDataObj", "$document", "scormWrapper", "courseInfo"];
  angular.module('courseApp').service('userService', userService);

  function userService(courseDataObj, testDataObj, $document, scormWrapper, courseInfo) {
    var _this2 = this;

    var userDataObj = courseDataObj.chapters.map(function (elem) {
      return {
        id: elem.id,
        visited: 1,
        completed: false,
        pages: elem.pages.map(function (item, index) {
          return {
            id: item.id,
            type: item.type,
            title: item.title,
            visited: index === 0 ? true : false,
            completed: ''
          };
        })
      };
    });

    this.exs = [];
    this.notes = [];
    this.notes1 = [];
    this.complex_ex1 = [];
    if (!this.start_date) {
      this.start_date = new Date();
    }
    // console.info('complex_ex1[0] =', this.complex_ex1[0]);
    // console.info('complex_ex1[1] =', this.complex_ex1[1]);
    courseDataObj.chapters.forEach(function (elem, index) {
      elem.pages.map(function (page, i) {

        if (page.type == 'exercise') {
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
        }

        if (page.type == 'note_page') {
          // console.info('note_page', page)

          var fields = [];
          for (var _i = 0; _i < page.data.task_fields; _i++) {
            fields.push({
              id: _i,
              text: ""
            });
          }

          _this2.notes.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: fields
          });
        }

        if (page.type == 'note_exercise') {
          // console.info('note_page', page)
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
          var _fields = [];
          for (var ik = 0; ik < page.data.task_fields; ik++) {
            _fields.push({
              id: ik,
              text: ""
            });
          }

          _this2.notes1.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            note_type: page.typeNote,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: _fields
          });
        }
      });
    }
    // console.warn('userService:: setUp exs Arr', JSON.stringify(this.exs));
    // console.warn('userService:: setUp notes Arr', JSON.stringify(this.notes));

    // this.testData = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));

    );this.ConvertMilliSecondsIntoSCORM2004Time = function (intTotalMilliseconds) {

      var ScormTime = "";

      var HundredthsOfASecond; //decrementing counter - work at the hundreths of a second level because that is all the precision that is required

      var Seconds; // 100 hundreths of a seconds
      var Minutes; // 60 seconds
      var Hours; // 60 minutes
      var Days; // 24 hours
      var Months; // assumed to be an "average" month (figures a leap year every 4 years) = ((365*4) + 1) / 48 days - 30.4375 days per month
      var Years; // assumed to be 12 "average" months

      var HUNDREDTHS_PER_SECOND = 100;
      var HUNDREDTHS_PER_MINUTE = HUNDREDTHS_PER_SECOND * 60;
      var HUNDREDTHS_PER_HOUR = HUNDREDTHS_PER_MINUTE * 60;
      var HUNDREDTHS_PER_DAY = HUNDREDTHS_PER_HOUR * 24;
      var HUNDREDTHS_PER_MONTH = HUNDREDTHS_PER_DAY * ((365 * 4 + 1) / 48);
      var HUNDREDTHS_PER_YEAR = HUNDREDTHS_PER_MONTH * 12;

      HundredthsOfASecond = Math.floor(intTotalMilliseconds / 10);

      Years = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_YEAR);
      HundredthsOfASecond -= Years * HUNDREDTHS_PER_YEAR;

      Months = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MONTH);
      HundredthsOfASecond -= Months * HUNDREDTHS_PER_MONTH;

      Days = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_DAY);
      HundredthsOfASecond -= Days * HUNDREDTHS_PER_DAY;

      Hours = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_HOUR);
      HundredthsOfASecond -= Hours * HUNDREDTHS_PER_HOUR;

      Minutes = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MINUTE);
      HundredthsOfASecond -= Minutes * HUNDREDTHS_PER_MINUTE;

      Seconds = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_SECOND);
      HundredthsOfASecond -= Seconds * HUNDREDTHS_PER_SECOND;

      if (Years > 0) {
        ScormTime += Years + "Y";
      }
      if (Months > 0) {
        ScormTime += Months + "M";
      }
      if (Days > 0) {
        ScormTime += Days + "D";
      }

      //check to see if we have any time before adding the "T"
      if (HundredthsOfASecond + Seconds + Minutes + Hours > 0) {

        ScormTime += "T";

        if (Hours > 0) {
          ScormTime += Hours + "H";
        }

        if (Minutes > 0) {
          ScormTime += Minutes + "M";
        }

        if (HundredthsOfASecond + Seconds > 0) {
          ScormTime += Seconds;

          if (HundredthsOfASecond > 0) {
            ScormTime += "." + HundredthsOfASecond;
          }

          ScormTime += "S";
        }
      }

      if (ScormTime == "") {
        ScormTime = "0S";
      }

      ScormTime = "P" + ScormTime;
      return ScormTime;
    };

    this.loadExs = function (data) {
      // alert('load exs!')
      //console.log('load exs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:',data);
      if (data.length != 0) {
        // alert('exs not empty')
        _this2.exs = data;
      }
      courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
    };
    this.loadNotes = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
    };

    this.loadNotes1 = function (data) {
      // alert('load saved notes!')
      console.log('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        // alert('notes not empty')
        _this2.notes = data;
      }
      courseInfo.notes1 = JSON.parse(JSON.stringify(_this2.notes));
    };

    this.currentTestQuestion = {};
    this.setCurrentTestQuestion = function (question, answers) {
      _this2.currentTestQuestion.question = question;
      _this2.currentTestQuestion.answers = answers;
    };

    // console.log('userService:: exs',this.exs)
    this.getExs = function () {
      // console.log('userService:: getExs, exs', this.exs)
      return _this2.exs;
    };

    this.getPageType = function (chapter, page) {
      if (courseDataObj.chapters[chapter].pages[page].type == 'test') {
        return true;
      }
      return false;
    };

    this.getPageVisit = function () {
      //
    };
    this.setPageVisit = function (module, page) {
      //
    };
    this.setUserProgress = function (score, status, chapter, page) {
      // console.log('userService:: setUserProgress this.exs', this.exs)
      // console.log('userService:: setUserProgress income params', score, status, chapter, page)
      _this2.exs.forEach(function (item) {
        //console.log('=>',item, chapter, page)
        if (item.chapter_id == chapter && item.page_id == page) {
          item.score = score;
          item.status = status;
          console.log('userService:: setUserProgress----------------------------------------------:', item.score, item.status, chapter, page);
        }
      }
      // console.log('userService:: setUserProgress > this.exs',this.exs)

      );courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
      // courseInfo.excercises = this.exs;

      _this2.sendToLMS();
    };

    this.getUserNotes = function () {
      return _this2.notes;
    };

    this.getUserNotes1 = function () {
      return _this2.notes1;
    };

    this.setUserNotes = function (notes, chapter, page) {

      console.log('userService:: setNotes-------------------------------------------------------:', notes, chapter, page);

      _this2.notes.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          item = notes;
        }
      });
      console.log('this.notes-------------------------------------------------------:', _this2.notes);
      courseInfo.notes = JSON.parse(JSON.stringify(_this2.notes));
      console.warn('courseInfo.notes', courseInfo.notes);
      _this2.sendToLMS();
    };

    this.sendToLMS = function () {
      var session_time;
      var end_date = new Date();

      session_time = end_date - _this2.start_date; // in milliseconds
      session_time = _this2.ConvertMilliSecondsIntoSCORM2004Time(session_time);

      _this2.dataCourse = courseInfo;
      _this2.dataCourse.exercises.forEach(function (elem) {
        delete elem.title;
      });
      _this2.dataCourse.notes.forEach(function (elem) {
        delete elem.title;
      });

      var suspendData = JSON.stringify(_this2.dataCourse, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }

        return value;
      }).replace(/\[/g, '*#').replace(/\]/g, '#*');
      console.info('sendToLMS suspendData: ', suspendData);
      console.info('sendToLMS suspendData.length: ', suspendData.length);
      console.warn('Put => session_time: ' + session_time);
      scormWrapper.doLMSSetValue('cmi.suspend_data', suspendData);
      scormWrapper.doLMSSetValue('cmi.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.score.raw', courseInfo.testScore);

      if (courseInfo.testScore >= 60) {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'completed');
      } else {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'incomplete');
      }

      scormWrapper.doLMSCommit();
    };

    // Close modals by several types
    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(courseDataObj);
        console.warn(courseInfo);
        console.warn(_this2.exs);
        console.warn(window.window);
      }
    });

    //     function close_window() {
    //     window.open('','_parent','').close();
    // }

    window.onbeforeunload = function (e) {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');

      var e = e || window.event;

      //IE & Firefox
      if (e) {}

      // For Safari
      scormWrapper.doLMSFinish();
    };

    this.closeCourse = function () {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');
      _this2.sendToLMS();
      scormWrapper.doLMSFinish();
      var a = confirm('Вы уверены, что хотите закончить прохождение курса?');
      if (a) {
        //close_window();
        document.getElementsByClassName('course-wrapper')[0].innerHTML = '<p class="close-msg">Работа с модулем курса завершена.</p>';
      }
    };
  }
})();

;(function () {
  'use strict';

  CourseCtrl.$inject = ["$http", "$sce", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('CourseCtrl', CourseCtrl);

  /* @ngInject */
  function CourseCtrl($http, $sce, $stateParams, staticService, userService) {
    var self = this;

    //if (device.mobile() && device.portrait()) {
    //  self.turnMobile = true;
    //} else {
    //  self.turnMobile = false;
    //}
  }
})();
;(function () {
  'use strict';

  PageCtrl.$inject = ["$document", "staticService", "$scope", "courseInfo"];
  angular.module('courseApp').controller('PageCtrl', PageCtrl);

  /* @ngInject */
  function PageCtrl($document, staticService, $scope, courseInfo) {

    this.tabNum = 1;

    $scope.getModalState = function (index) {
      return staticService.getModalState(index);
    };
    $scope.closeModals = function () {
      return staticService.closeModals();
    };

    // uses for sync of audio and content changes (some kind of animation)
    this.time = function () {
      return staticService.getAudioTime();
    };
  }
})();
;(function () {
  'use strict';

  AccordionCtrl.$inject = ["$scope", "$element", "$attrs"];
  AccordionPanelCtrl.$inject = ["$scope", "$timeout", "$element", "$attrs"];
  AccordionContentCtrl.$inject = ["$document", "$scope", "$element", "$attrs"];
  angular.module('courseApp').component('accordion', {
    transclude: true,
    template: '<div class="accordion" ng-transclude></div>',
    controller: 'AccordionCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionCtrl', AccordionCtrl).component('accordionPanel', {
    require: {
      'parent': '^accordion'
    },
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: 'js/components/accordion/accordionPanelTmpl.html',
    controller: 'AccordionPanelCtrl',
    controllerAs: '$ctrl'
  }).controller('AccordionPanelCtrl', AccordionPanelCtrl).controller('AccordionContentCtrl', AccordionContentCtrl);

  /* @ngInject */
  function AccordionCtrl($scope, $element, $attrs) {
    var self = this;

    var panels = [];
    // here we take the panel and add to our list of panels
    // to preselect the first panel we call turnOn function on the first panel
    self.addPanel = function (panel) {
      console.warn("arguments.length: ", arguments.length);
      if (arguments.length === 0) {
        console.warn("panels(if (arguments.length === 0)): ", panels);
        return {
          index: panels.length - 1,
          firstOpen: $attrs.firstOpen
        };
      };
      panels.push(panel);
      console.warn("panels(panels.push(panel);): ", arguments.length);
      if ($attrs.firstOpen === 'true' && panel === panels[0]) {
        return false;
      }
      return true;
    };
    // when a panel is selected we would want to open the content
    // here we take the panel find it in our array and turn if on if not selected
    // and off it.
    self.selectPanel = function (panel, isCollapsed) {
      for (var i in panels) {
        if (panel === panels[i]) {
          if (isCollapsed) {
            panels[i].turnOn();
          } else {
            panels[i].turnOff();
          }
        } else {
          panels[i].turnOff();
        }
      }
    };
  }

  /* @ngInject */
  function AccordionPanelCtrl($scope, $timeout, $element, $attrs) {

    var self = this;
    $scope.isCollapsed = true; // panel is closed on default

    // self.hintShow needs to show/hide hint on panels of accordion
    self.hintShow = $($element).index() === 0 || $($element).index() === 1 ? false : 'visited';
    $timeout(function () {
      self.hintShow = self.hintShow === false ? true : self.hintShow;
    }, 10000);

    // register the panel in init
    self.$onInit = function () {
      var accordionState = {};

      $scope.isCollapsed = self.parent.addPanel(self);
      accordionState = self.parent.addPanel();
      if (accordionState.firstOpen === 'true' && accordionState.index === 1) {
        self.hintShow = false;
      } else if (accordionState.firstOpen === 'false' && accordionState.index === 0) {
        self.hintShow = false;
      } else {
        self.hintShow = 'visited';
      }
    };

    // Turns on the panel
    self.turnOn = function () {
      $scope.isCollapsed = false;
    };

    // Turns off the panel
    self.turnOff = function () {
      $scope.isCollapsed = true;
    };

    $scope.toggle = function () {
      self.hintShow = 'visited';
      self.parent.selectPanel(self, $scope.isCollapsed);
    };
  }

  // /* @ngInject */
  function AccordionContentCtrl($document, $scope, $element, $attrs) {
    var element = $element[0];
    var start = 0;

    $scope.$watch($attrs.collapse, function (collapse) {

      var newHeight = collapse ? 0 : 1;
      if (newHeight === 1) {
        if (start === 0) {

          start = 1;
          (function (elem) {
            setTimeout(function () {
              return element.style.height = getElementAutoHeight() + 'px';
            }, 460);
          })(element);
        } else {
          return element.style.height = getElementAutoHeight() + 'px';
        }
      }
      return element.style.height = newHeight + 'px';
    });

    function getElementAutoHeight() {
      var currentHeight = getElementCurrentHeight();

      element.style.height = 'auto';
      var autoHeight = getElementCurrentHeight();

      element.style.height = currentHeight;
      // Force the browser to recalc height after moving it back to normal
      getElementCurrentHeight();

      return autoHeight;
    }

    function getElementCurrentHeight() {
      return element.offsetHeight;
    }
  }
})();

(function () {
  'use strict';

  AddInfoCtrl.$inject = ["$element", "$attrs", "staticService"];
  angular.module('courseApp').component('addInfo', {
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: './js/components/add-info/addInfoTmpl.html',
    controller: 'AddInfoCtrl',
    controllerAs: '$ctrl'
  }).controller('AddInfoCtrl', AddInfoCtrl);

  /* @ngInject */
  function AddInfoCtrl($element, $attrs, staticService) {
    var self = this;

    self.getAddInfo = function () {
      console.warn(document.querySelectorAll('ng-transclude'));
      staticService.addInfo($element.find('ng-transclude').prop('innerHTML'), true, $attrs.heading);
    };
  }
})();
;(function () {
  'use strict';

  CustomAudioCtrl.$inject = ["$document", "$interval", "staticService"];
  angular.module('courseApp').component('customAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hassound: '@'
    },
    templateUrl: 'js/components/custom-audio/customAudioTmpl.html',
    controller: 'CustomAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomAudioCtrl', CustomAudioCtrl);

  /* @ngInject */
  function CustomAudioCtrl($document, $interval, staticService) {
    var _this3 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hassound)
      if (_this3.hassound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init'
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      );_this3.audio = $document[0].createElement('audio');
      _this3.audio.src = "pages/" + _this3.chapter + "/" + _this3.page + "/audio/page-" + _this3.chapter + "-" + _this3.page + ".mp3";

      _this3.audio.oncanplaythrough = function () {

        _this3.changePlayPause = function () {

          if (_this3.audio.paused) {
            _this3.audio.play();
            _this3.play = '#pause';
          } else {
            _this3.audio.pause();
            _this3.play = '#play';
          }
        };

        _this3.updateSeekSlider = function () {
          var seekNewPos = _this3.audio.currentTime * (100 / _this3.audio.duration),
              // position in seek slider
          curmins = Math.floor(_this3.audio.currentTime / 60),
              // current minutes value
          cursecs = Math.floor(_this3.audio.currentTime - curmins * 60),
              // current seconds value
          durmins = Math.floor(_this3.audio.duration / 60),
              // audio duration in minutes
          dursecs = Math.floor(_this3.audio.duration - durmins * 60); // audio duration in rest seconds

          _this3.seekPos = Math.floor(seekNewPos);

          if (curmins < 10) {
            curmins = '0' + curmins;
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs;
          };
          if (durmins < 10) {
            durmins = '0' + durmins;
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs;
          };

          _this3.curTime = curmins + ':' + cursecs; // display current time in the audio player
          _this3.durTime = durmins + ':' + dursecs; //  display audio duration time in the audio player
          if (_this3.audio.currentTime === _this3.audio.duration) {
            _this3.play = '#play';
          }
        };

        _this3.changeSeekPos = function () {
          _this3.audio.currentTime = _this3.audio.duration * (_this3.seekPos / 100);
        };

        $interval(function () {

          if (!_this3.audio) return;
          _this3.updateSeekSlider();

          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this3.audio.currentTime);

          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this3.audio.pause();
            _this3.audio = null;
            return;
          }
        }, 100);

        _this3.changeMuteState = function () {
          _this3.mute = '#unmute';

          if (_this3.audio.muted) {
            _this3.audio.muted = false;
            _this3.mute = '#unmute';
          } else {
            _this3.audio.muted = true;
            _this3.mute = '#mute';
          }
        };

        _this3.changeVolume = function () {
          _this3.audio.volume = _this3.volume;
        };

        _this3.restart = function () {
          _this3.audio.currentTime = 0;
          _this3.audio.play();
          _this3.play = '#pause';
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  CustomMiniAudioCtrl.$inject = ["$attrs", "$document", "$interval", "staticService"];
  angular.module('courseApp').component('customMiniAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hasSound: '@',
      src: '@'
    },
    templateUrl: 'js/components/custom-mini-audio/customMiniAudioTmpl.html',
    controller: 'CustomMiniAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomMiniAudioCtrl', CustomMiniAudioCtrl);

  /* @ngInject */
  function CustomMiniAudioCtrl($attrs, $document, $interval, staticService) {
    var _this4 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hasSound)
      if (_this4.hasSound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init'
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      );_this4.audio = $document[0].createElement('audio');
      _this4.audio.src = _this4.src;
      console.log("SRC ", _this4.audio.src);
      _this4.audio.autoplay = false;

      _this4.audio.oncanplaythrough = function () {

        _this4.changePlayPause = function () {

          if (_this4.audio.paused) {
            _this4.audio.play();
            _this4.play = '#pause';
          } else {
            _this4.audio.pause();
            _this4.play = '#play';
          }
        };

        $interval(function () {
          if (!_this4.audio) return;
          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this4.audio.currentTime);
          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this4.audio.pause();
            _this4.audio = null;
            return;
          }
        }, 100);
      };
    };
  }
})();
(function () {
  'use strict';

  CustomVideoCtrl.$inject = ["$document", "$timeout", "staticService"];
  angular.module('courseApp').component('customVideo', {
    bindings: {
      src: '@'
    },
    templateUrl: 'js/components/custom-video/customVideoTmpl.html',
    controller: 'CustomVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomVideoCtrl', CustomVideoCtrl);

  /* @ngInject */
  function CustomVideoCtrl($document, $timeout, staticService) {
    var self = this;

    self.play = 'play'; // variable for play/pause btn that toggle icons
    self.mute = 'unmute'; // variable for mute/unmute btn that toggle icons
    self.volume = 1; // define volume in volume slider
    self.seekPos = 0;

    self.$onInit = function () {
      var video = $($document).find('.custom-video__video')[0];

      video.oncanplaythrough = function () {
        console.log('here');
        $(video).on('timeupdate', updateSeekSlider);

        updateSeekSlider();

        self.changePlayPause = function () {
          if (video.paused) {
            video.play();
            self.play = 'pause';
          } else {
            video.pause();
            self.play = 'play';
          }
        };

        self.changeSeekPos = function () {
          video.currentTime = video.duration * (self.seekPos / 100);
        };

        function updateSeekSlider() {
          var seekNewPos = video.currentTime * (100 / video.duration),
              curhours = Math.floor(video.currentTime / 3600),
              curmins = Math.floor(video.currentTime / 60),
              cursecs = Math.floor(video.currentTime - curmins * 60),
              durhours = Math.floor(video.duration / 3600),
              durmins = Math.floor(video.duration / 60),
              dursecs = Math.floor(video.duration - durmins * 60);

          self.seekPos = Math.floor(seekNewPos);
          if (video.currentTime === video.duration) {
            self.play = 'play';
          }

          if (curmins < 10) {
            curmins = '0' + curmins || '00';
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs || '00';
          };
          if (durmins < 10) {
            durmins = '0' + durmins || '00';
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs || '00';
          };
          $timeout(function () {

            self.curtimetext = curmins + ':' + cursecs;
            self.durtimetext = durmins + ':' + dursecs;
          });
        }

        self.changeMuteState = function () {

          if (video.muted) {
            video.muted = false;
            self.mute = 'unmute';
          } else {
            video.muted = true;
            self.mute = 'mute';
          }
        };

        self.changeVolume = function () {
          video.volume = self.volume;
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  TestCtrl.$inject = ["$scope", "$state", "$compile", "$stateParams", "testDataObj", "staticService", "userService", "courseInfo"];
  angular.module('courseApp').component('finalTest', {
    templateUrl: 'js/components/final-test/finalTestTmpl.html',
    controller: 'TestCtrl',
    controllerAs: '$ctrl'
  }).controller('TestCtrl', TestCtrl);

  /* @ngInject */
  function TestCtrl($scope, $state, $compile, $stateParams, testDataObj, staticService, userService, courseInfo) {
    var _this5 = this;

    /**
    *   tasks:
    *     single, multi, sortab
    */

    // составляем список вопросов и мешаем его
    // this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));
    //console.log("heeeeeeeeeeeeeeeeeeeeeeeeeere: ",$stateParams.chapter - 1,$stateParams.page);

    //костыль для testStructure
    var chapter = -1;
    if ($stateParams.chapter == 1) chapter = 0;else if ($stateParams.chapter == 6) chapter = 1;

    this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
    // console.log('questions!!!!!!!!!!!!!! ', this.questionList);

    //номер вопроса
    this.currentQuest = 0;
    this.startTest = 0;
    // состояния теста:
    this.state = 0;
    $scope.$on('myTestState', function (e, data) {
      _this5.state = data;
    });

    this.testScore = 0;

    this.testRight = 0;

    this.testTask = document.getElementsByClassName('test-task')[0];

    this.buildQuestion = function () {

      _this5.questionList[_this5.currentQuest].answers = _.shuffle(_this5.questionList[_this5.currentQuest].answers);
      userService.setCurrentTestQuestion(_this5.questionList[_this5.currentQuest].question, _this5.questionList[_this5.currentQuest].answers);

      // console.warn('TestCtrl:: buildQuestion:',this.questionList[this.currentQuest])
      var tmpstr = '';
      switch (_this5.questionList[_this5.currentQuest].type) {
        case 'single':
          tmpstr = '<task-single-choice test="true"></task-single-choice>';
          break;
        case 'multi':
          tmpstr = '<task-multi-choice test="true"></task-multi-choice>';
          break;
      }

      _this5.testTask.appendChild($compile(tmpstr)($scope)[0]);
      //console.warn($compile(tmpstr)($scope))
    };

    this.nextQuestion = function (e) {
      if (e.target.classList.contains('btn_disabled')) {
        return;
      }

      _this5.checkAnswer();

      _this5.currentQuest++;
      if (_this5.currentQuest < _this5.questionList.length) {
        _this5.state = 0;
        _this5.testTask.innerHTML = '';
        _this5.buildQuestion();
      } else {
        _this5.state = 2;
        _this5.startTest = 1;
        _this5.currentQuest--;
        // console.log('TEST::>', this.testScore/(this.questionList.length))
        courseInfo.testScore = Math.round(_this5.testScore / _this5.questionList.length);
        courseInfo.testRight = _this5.testRight;
        // alert('konec')
        // show result window
        // to showModal: modal id, head comment, text comment
        userService.sendToLMS();
        if (courseInfo.testScore < 75) {
          _this5.chartTitle = 'Тест не пройден.';
        } else {
          _this5.chartTitle = 'Тест пройден!';
        }
        console.log("this.chartTitle", _this5.chartTitle);
        Chart.defaults.global.defaultFontFamily = 'Arial';
        Chart.defaults.global.defaultFontSize = 22;
        Chart.defaults.global.defaultFontColor = '#000';
        staticService.showModal('exercise', staticService.getTitle($stateParams), _this5.chartTitle /*'Набрано баллов: '+courseInfo.testScore+' из 100.'*/, '', "final");
        new Chart(document.getElementById("pie-chart"), {
          type: 'pie',
          data: {
            labels: ["Правильных ответов", "Неправильных ответов"],
            datasets: [{
              label: "",
              backgroundColor: ["#c5edff", "#fe9f39"],
              data: [courseInfo.testRight, _this5.questionList.length - courseInfo.testRight]
            }]
          },
          options: {
            legend: {
              labels: {
                // This more specific font property overrides the global property
                // defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                // fontColor: 'black',
              }
            },
            plugins: {
              fillter: {
                propagate: false
              }
            },
            title: {
              display: true,
              text: 'Ваш результат – ' + courseInfo.testScore + ' %'

            }
          }
        });
      }
    };

    this.checkAnswer = function () {
      var answersElements = document.getElementsByClassName('task-question'
      // console.warn('answersElements', answersElements)
      // console.warn('questionList', this.questionList[this.currentQuest].answers)

      );for (var i = 0; i < answersElements.length; i++) {
        var answer = _this5.questionList[_this5.currentQuest].answers[i].right,
            question = answersElements[i].classList.contains('radio-selected');

        // console.warn('check answers', answer, question)
        if (answer !== question) {
          // неверный ответ
          //console.warn('ответ на вопрос теста неверен')
          //console.info('score', this.testScore, this.testRight)
          return;
        }
      }
      //console.warn('ответ на вопрос верен')
      _this5.testScore += 100;
      _this5.testRight += 1;
      //console.info('score', this.testScore, this.testRight)
      //
    };

    this.removeRestart = function () {
      _this5.startTest = 0;
      _this5.state = 0;
      _this5.testScore = 0;
      _this5.testRight = 0;
      _this5.currentQuest = 0;
      _this5.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[chapter].groups[0].questions)));
      _this5.testTask.innerHTML = '';
      _this5.buildQuestion();
    };

    angular.element(document).ready(function () {
      // console.log(this.questionList)
      _this5.buildQuestion();
    });
  }
})();

;(function () {
  'use strict';

  FooterCtrl.$inject = ["$state", "$stateParams", "staticService", "userService", "courseInfo", "courseDataObj"];
  angular.module('courseApp').controller('FooterCtrl', FooterCtrl);

  /* @ngInject */
  function FooterCtrl($state, $stateParams, staticService, userService, courseInfo, courseDataObj) {
    var _this6 = this;

    if (window.bookmark && !window.bookmark.loaded) {
      window.bookmark.loaded = true;
      document.getElementsByClassName('paginator')[0].innerHTML = window.bookmark.page + ' / ' + staticService.getPageTotal();
      staticService.setBookmark(window.bookmark.chapterPage, window.bookmark.chapter);
    } else {
      document.getElementsByClassName('paginator')[0].innerHTML = courseInfo.bookmark.page + ' / ' + staticService.getPageTotal();
    }

    this.bookmark = staticService.getBookmark();
    // console.log('FooterCtrl::', this.bookmark)

    // alert(JSON.stringify(courseInfo))

    this.coursePage = document.querySelector('.page-wrapper');

    this.curChapterNum = Number($stateParams.chapter);
    // страница в главе
    this.curPageNum = Number($stateParams.page);
    // всего страниц в курсе
    this.pageAmountTotal = '' + staticService.getPageTotal();
    // всего страниц в главе
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    var currChapterObj = courseDataObj.chapters[this.curChapterNum - 1];
    this.chapterLocation = currChapterObj.chapter_location;
    this.pageLocation = currChapterObj.pages[this.curPageNum - 1].location;
    this.pageHasSound = currChapterObj.pages[this.curPageNum - 1].hasSound;
    console.warn('FooterCtrl:: locs: %s, %s, sound: %s', this.chapterLocation, this.pageLocation, this.pageHasSound);

    this.toBack = function () {
      if (_this6.curChapterNum == 1 && _this6.curPageNum == 1) {
        return;
      }

      if (_this6.curPageNum == 1) {
        _this6.curPageNum = staticService.getChapterObj(_this6.curChapterNum - 2).pages.length;
        _this6.curChapterNum--;
      } else {
        _this6.curPageNum--;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      _this6.coursePage.classList.add('backward');
      // console.warn('FooterCtrl:: локейшены', courseDataObj.chapters[this.curChapterNum-1].chapter_location, courseDataObj.chapters[this.curChapterNum-1].pages[this.curPageNum-1].location)

      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toForward = function () {
      if (_this6.curChapterNum == staticService.getChaptersTotal().length && _this6.curPageNum == _this6.pageAmountChapter) {
        return;
      }

      if (_this6.curPageNum == _this6.pageAmountChapter) {
        _this6.curChapterNum++;
        _this6.curPageNum = 1;
      } else {
        _this6.curPageNum++;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      userService.setPageVisit(_this6.curChapterNum - 1, _this6.curPageNum);
      _this6.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.toggleAbout = function () {
      //
    };
    this.toggleHelp = function () {
      //
    };
  }
})();
;(function () {
  'use strict';

  HeaderCtrl.$inject = ["$state", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('HeaderCtrl', HeaderCtrl);

  /* @ngInject */
  function HeaderCtrl($state, $stateParams, staticService, userService) {
    var _this7 = this;

    this.chapters = staticService.getChaptersTotal();

    this.exercises = userService.exs;

    this.getExs = function () {
      return userService.getExs();
    };

    this.getPageType = function () {
      return userService.getPageType(Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
    };

    this.getNotes = function () {
      return userService.getUserNotes();
    };

    this.countExs = function () {
      return userService.getExs().length;
    };

    this.countDoneExs = function () {
      var exs = userService.getExs(),
          counter = 0;
      exs.forEach(function (item, i, arr) {
        if (item.status == 1) {
          counter++;
        }
      });
      return counter;
    };

    this.addInfo = function () {
      return staticService.getAddInfo();
    };

    this.exerciseData = function () {
      return staticService.getExercise();
    };

    this.title = {
      course: staticService.getCourseName().course,
      chapter: staticService.getChapterObj(Number($stateParams.chapter) - 1).title,
      exercise: this.chapters[Number($stateParams.chapter) - 1].pages[Number($stateParams.page) - 1].title
    };

    this.getModalState = function (index) {
      return staticService.getModalState(index);
    };

    this.menuPagesCounter = 1;
    this.countPages = function () {
      return _this7.menuPagesCounter++;
    };

    this.coursePage = document.querySelector('.page-wrapper');

    this.goFromMenu = function (page, chapter) {
      console.log('HeaderCtrl:: goFromMenu, page: %d, chapter: %d, SP: %s, SC: %s', page.page_id, chapter.chapter_id, $stateParams.page, $stateParams.chapter);

      if (chapter.chapter_id > Number($stateParams.chapter)) {
        _this7.coursePage.classList.remove('backward');
      } else if (chapter.chapter_id == Number($stateParams.chapter)) {
        if (page.page_id > Number($stateParams.page)) {
          _this7.coursePage.classList.remove('backward');
        } else {
          _this7.coursePage.classList.add('backward');
        }
      } else {
        _this7.coursePage.classList.add('backward');
      }

      $state.go('page', { chapter: chapter.chapter_id, page: page.page_id });

      staticService.closeModals();
    };
    this.getCurrent = function () {
      return staticService.getBookmark().page;
    };
    this.toggleMenu = function () {
      staticService.showModal('menu');
      scrollMenu();
    };

    this.scrollMenu = function () {
      _this7.curChapterNum = Number($stateParams.chapter);
      _this7.curPageNum = Number($stateParams.page);
      var currentItem = document.querySelector('#page_' + _this7.curChapterNum + '_' + _this7.curPageNum);
      var menu = document.querySelector('.modal_nav-menu');

      // console.warn('curr offsetTop',currentItem.offsetTop)
      setTimeout(function () {
        menu.scrollTop = currentItem.offsetTop - 300;
      }, 30);
    };

    this.toggleStat = function () {
      // this.exercises = userService.exs;
      staticService.showModal('stats');
    };
    this.toggleModal = function (modalName) {
      staticService.showModal(modalName);
    };

    this.closeModals = function () {
      staticService.closeModals();
    };

    this.closeCourse = function () {
      userService.closeCourse();
    };

    this.curChapterNum = Number($stateParams.chapter);
    this.curPageNum = Number($stateParams.page);
    this.coursePage = document.querySelector('.page-wrapper');
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    this.toForward = function (exStatus) {
      if (!exStatus) {
        return;
      }

      if (_this7.curChapterNum == staticService.getChaptersTotal().length && _this7.curPageNum == _this7.pageAmountChapter) {
        return;
      }

      if (_this7.curPageNum == _this7.pageAmountChapter) {
        _this7.curChapterNum++;
        _this7.curPageNum = 1;
      } else {
        _this7.curPageNum++;
      }

      staticService.setBookmark(_this7.curPageNum, _this7.curChapterNum);
      userService.setPageVisit(_this7.curChapterNum - 1, _this7.curPageNum);
      _this7.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this7.curChapterNum, page: _this7.curPageNum });
    };
  }
})();
;(function () {
  'use strict';

  LeaderLineCtrl.$inject = ["$element", "$attrs", "userService"];
  angular.module('courseApp').component('makeLine', {
    bindigs: {
      lineTo: '@'
    },
    controller: 'LeaderLineCtrl'
  }).controller('LeaderLineCtrl', LeaderLineCtrl

  /* @ngInject */
  );function LeaderLineCtrl($element, $attrs, userService) {

    /*angular.element(document).ready(()=> {
      this.elementsFrom = JSON.parse($attrs.linefrom);
      this.elementsTo = JSON.parse($attrs.lineto);
      // console.log(this.elementsFrom, this.elementsTo)
      
      for (var i = 0; i < this.elementsFrom.length; i++) {
        console.log('draw line')
        let start = document.getElementById(this.elementsFrom[i]),
            end = document.getElementById(this.elementsTo[i]),
            params = JSON.parse(start.getAttribute('data'));
            // console.log(params)
        new LeaderLine(
            start,
            end,
            params
          )
      }
    })*/

    //TODO: 
    // var e = document.getElementsByClassName('leader-line')
    // e[0].remove()
    // 
  }
})();
//;(function () {
//  'use strict';
//
//  angular
//    .module('courseApp')
//    .component('pageVideo', {
//      bindings: {
//        videourl: '@',  // ссылка на видео
//        videoposter: '@',// превью картинка
//        suburl: '@',// ссылка на субтитры
//        videowidth: '@',
//        videoheight: '@'
//      },
//      templateUrl: 'js/components/page-video/pageVideoTmpl.html',
//      controller: 'pageVideoCtrl',
//      controllerAs: '$ctrl'
//    })
//    .controller('pageVideoCtrl', pageVideoCtrl);
//
//  /* @ngInject */
//  function pageVideoCtrl(staticService) {
//
//    this.openVideo = () => {
//      let videoElement = document.querySelector('.modal_video__body'),
//        videoStr = `<video class="video-js vjs-default-skin video-element my-home-video" controls preload="auto"
//                               width="${this.videowidth}" height="${this.videoheight}" poster="${this.videoposter}" vjs-video>
//                            <source src="${this.videourl}" type="video/mp4">
//                            <track enabled kind="captions" src="${this.suburl}" srclang="ru" label="Russian Subtitles" />
//                        </video>`;
//      staticService.showModal('video');
//      videoElement.innerHTML = videoStr;
//      // делаем субтитры изначально невидимыми
//      //const videoElem = videoElement.querySelectorAll('video');
//      //console.log("videoElem",videoElem) ;
//      //videoElem.textTracks.forEach(textTrack => textTrack.mode = 'hidden');
//    }
//  }
//})();

;(function () {
  'use strict';

  pageVideoCtrl.$inject = ["staticService"];
  angular.module('courseApp').component('pageVideo', {
    bindings: {
      videourl: '@', // ссылка на видео
      videoposter: '@', // превью картинка
      suburl: '@', // ссылка на субтитры
      videowidth: '@',
      videoheight: '@'
    },
    templateUrl: 'js/components/page-video/pageVideoTmpl.html',
    controller: 'pageVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('pageVideoCtrl', pageVideoCtrl);

  /* @ngInject */
  function pageVideoCtrl(staticService) {
    var _this8 = this;

    this.openVideo = function () {
      var videoElement = document.querySelector('.modal_video__body'),
          videoStr = "<video class=\"video-js vjs-default-skin video-element my-home-video\" controls preload=\"auto\"\n                               width=\"" + _this8.videowidth + "\" height=\"" + _this8.videoheight + "\" poster=\"" + _this8.videoposter + "\" vjs-video>\n                            <source src=\"" + _this8.videourl + "\" type=\"video/mp4\">\n                            <track enabled kind=\"captions\" src=\"" + _this8.suburl + "\" srclang=\"ru\" label=\"Russian Subtitles\" default />\n                        </video>";
      staticService.showModal('video');
      videoElement.innerHTML = videoStr;
      // делаем субтитры изначально невидимыми
      //const videoElem = videoElement.querySelectorAll('video');
      //console.log("videoElem",videoElem[0].textTracks);
      //videoElem[0].textTracks[0].mode = 'hidden';
    };
  }
})();
;(function () {
  'use strict';

  ScreensCtrl.$inject = ["$scope"];
  angular.module('courseApp').component('screens', {
    templateUrl: 'js/components/screens/screensTmpl.html',
    controller: 'ScreensCtrl',
    controllerAs: '$ctrl'
  }).controller('ScreensCtrl', ScreensCtrl);

  /* @ngInject */
  function ScreensCtrl($scope) {
    var _this9 = this;

    this.currentScreen = 0;

    this.nextScreen = function () {
      _this9.currentScreen = _this9.currentScreen + 1;
      console.log(_this9.currentScreen);
    };

    this.previousScreen = function () {
      _this9.currentScreen = _this9.currentScreen - 1;
    };
  }
})();
;(function () {
  'use strict';

  TabsItemCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('tabs', {
    transclude: true,
    templateUrl: 'js/components/tabs/tabsTmpl.html',
    controller: 'TabsCtrl',
    controllerAs: '$ctrl'
  }).controller('TabsCtrl', TabsCtrl).component('tabsItem', {
    require: {
      'parent': '^tabs'
    },
    bindings: {
      item: '='
    },
    transclude: true,
    templateUrl: 'js/components/tabs/tabsTmpl.html',
    controller: 'TabsItemCtrl',
    controllerAs: '$ctrl'
  }).controller('TabsItemCtrl', TabsItemCtrl);

  /* @ngInject */
  function TabsCtrl() {
    var self = this;
  }

  /* @ngInject */
  function TabsItemCtrl($scope, $stateParams, $attrs, staticService, userService) {

    this.items = [];
  }

  //function TabsItemCtrl($element, $timeout, $interval, $attrs) {
  //  const self = this;
  //
  //  self.hintShow = false;
  //  const index = $($element).index();
  //  if (index === 1) {
  //    $timeout(() => {
  //      self.hintShow = '' ? self.hintShow : true;
  //  }, 10000);
  //    $interval(() => {
  //      if ($($($element).parent().children()[index]).hasClass('tab__item_active')) {
  //      self.hintShow = '';
  //    }
  //  }, 200);
  //  }
  //}
})();
;(function () {
  'use strict';

  ComboChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskComboChoice', {
    templateUrl: 'js/components/task-combo-choice/taskComboChoiceTmpl.html',
    controller: 'ComboChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ComboChoiceCtrl', ComboChoiceCtrl);

  /* @ngInject */
  function ComboChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this10 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ComboCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ComboCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ComboCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ComboCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this10.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this10.selectAnswer = function (parentIndex, index) {
        if (_this10.state == 2) {
          return;
        }

        switch (_this10.taskExs[parentIndex].taskType) {
          case "multi":
            selectMulti(_this10.active[parentIndex][index]);
            break;
          case "single":
            selectSingle(_this10.active[parentIndex], index);
            break;
        }

        // console.log('select', this.active[parentIndex][index])

        function selectMulti(item) {
          // console.log('trace ===>>', )
          item.selected = !item.selected;
        }
        function selectSingle(item) {
          item.forEach(function (elem) {
            elem.selected = false;
          });
          item[index].selected = true;
        }

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this10.active.length; i++) {
          for (var j = 0; j < _this10.active[i].length; j++) {
            if (_this10.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this10.active.length) {
          if (_this10.test) {
            $scope.$emit('myTestState', 1);
          }
          _this10.state = 1;
        } else {
          if (_this10.test) {
            $scope.$emit('myTestState', 0);
          }
          _this10.state = 0;
        }
      }; // end of selectAnswer()

      _this10.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this10.userAttempt === _this10.attemptNum) {
          _this10.userAttempt = 0;
        }
        _this10.userAttempt++;
        _this10.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this10.taskExs.length; i++) {
          var item_i = _this10.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this10.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskComboChoice:: упражнение провалено')

              if (_this10.userAttempt == _this10.attemptNum && _this10.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[_this10.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskComboChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[0], true);
      };

      _this10.removeRestart = function () {

        _this10.state = 0;

        if (_this10.taskOptions.shuffle) {
          _this10.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this10.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskComboChoice:: showAnswer')
        for (var i = 0; i < _this10.taskExs.length; i++) {
          for (var j = 0; j < _this10.taskExs[i].questionList.length; j++) {
            _this10.active[i][j].selected = _this10.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  taskDragCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDrag', {
    templateUrl: 'js/components/task-drag/taskDragTmpl.html',
    controller: 'taskDragCtrl',
    controllerAs: '$ctrl'
  }).directive('draggable', draggable).directive('droppable', droppable).controller('taskDragCtrl', taskDragCtrl);

  function draggable() {
    return function ($scope, $element) {
      var elem = $element[0];
      elem.draggable = true;

      elem.addEventListener('dragstart', function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', this.id);
        this.classList.add('drag');
        return false;
      }, false);

      elem.addEventListener('dragend', function (e) {
        this.classList.remove('drag');
        return false;
      }, false);
    };
  }

  function droppable() {
    return function ($scope, $element) {
      var elem = $element[0];

      elem.addEventListener('dragover', function (e) {
        e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragenter', function (e) {
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragleave', function (e) {
        this.classList.remove('over');
        return false;
      }, false);

      elem.addEventListener('drop', function (e) {
        var dragContainer = document.getElementsByClassName('task__drag-container')[0];
        this.classList.remove('over');

        if (this.firstChild) {
          dragContainer.appendChild(this.firstChild);
        }

        var item = document.getElementById(e.dataTransfer.getData('Text'));
        this.appendChild(item);
        e.preventDefault();

        return false;
      }, false);
    };
  }

  /* @ngInject */
  function taskDragCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this11 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    this.showRight = 0;

    angular.element(document).ready(function () {

      _this11.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        if (_this11.userAttempt === _this11.attemptNum) {
          _this11.userAttempt = 0;
        }
        _this11.userAttempt++;
        _this11.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          if (!dropItemList[i].firstChild || dropItemList[i].firstChild && dropItemList[i].getAttribute("order") !== dropItemList[i].firstChild.getAttribute("order")) {
            //упражнение провалено

            if (_this11.userAttempt == _this11.attemptNum && _this11.taskOptions.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[_this11.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      for (var i = 0; i < dropItemList.length; i++) {
        if (dropItemList[i].firstChild) dropItemList[i].removeChild(dropItemList[i].firstChild);
      }
      _this11.state = 1;

      if (_this11.taskOptions.shuffle) _this11.questionList = _.shuffle(_this11.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {
      console.log("why not?");
      _this11.showRight = 1;
    };
  }
})();
;(function () {
  'use strict';

  taskDragAlongYaxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDragAlongYax', {
    templateUrl: 'js/components/task-drag-along-yax/taskDragAlongYaxTmpl.html',
    controller: 'taskDragAlongYaxCtrl',
    controllerAs: '$ctrl'
  }).directive('draggable', draggable).directive('droppable', droppable).controller('taskDragAlongYaxCtrl', taskDragAlongYaxCtrl);

  function draggable() {
    return function ($scope, $element) {
      var elem = $element[0];
      elem.draggable = true;

      elem.addEventListener('dragstart', function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', this.id);
        this.classList.add('drag');
        // console.log("dragstart");
        return false;
      }, false);

      elem.addEventListener('drag', function (e) {
        this.style.pointerEvents = "none";
        this.querySelector('.task__drag-item-pic').style.pointerEvents = "none";
        this.querySelector('.image').style.pointerEvents = "none";
        // console.log("drag");
        return false;
      }, false);

      elem.addEventListener('dragend', function (e) {
        this.classList.remove('drag');
        this.style.pointerEvents = "auto";
        this.querySelector('.task__drag-item-pic').style.pointerEvents = "auto";
        this.querySelector('.image').style.pointerEvents = "auto";
        // console.log("dragend");
        return false;
      }, false);
    };
  }

  function droppable() {
    return function ($scope, $element) {
      var elem = $element[0];

      elem.addEventListener('dragover', function (e) {
        e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
        this.classList.add('over');
        // console.log("dragover");
        return false;
      }, false);

      elem.addEventListener('dragenter', function (e) {
        this.classList.add('over');
        // console.log("dragenter");
        return false;
      }, false);

      elem.addEventListener('dragleave', function (e) {
        this.classList.remove('over');
        // console.log("dragleave");
        return false;
      }, false);

      elem.addEventListener('drop', function (e) {
        var dragContainer = document.getElementsByClassName('task__drag-container')[0];
        this.classList.remove('over');

        if (this.firstChild) {
          dragContainer.appendChild(this.firstChild);
        }

        var item = document.getElementById(e.dataTransfer.getData('Text'));
        this.appendChild(item);
        e.preventDefault();
        // console.log("dragdrop");
        return false;
      }, false);
    };
  }

  /* @ngInject */
  function taskDragAlongYaxCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this12 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    this.showRight = 0;

    // Изображение по умолчанию
    this.projectorImage = this.taskData.questionList[0].projectorImage[1];
    this.projectorImageMobile = this.taskData.questionList[0].projectorImage[3];
    this.projectorOrder = this.taskData.questionList[0].order[1];
    // Изменение изображения
    this.rotateProjector = function (position) {
      if (position === 2) {
        _this12.projectorImage = _this12.taskData.questionList[0].projectorImage[1];
        _this12.projectorImageMobile = _this12.taskData.questionList[0].projectorImage[3];
        _this12.projectorOrder = _this12.taskData.questionList[0].order[1];
      } else {
        _this12.projectorImage = _this12.taskData.questionList[0].projectorImage[0];
        _this12.projectorImageMobile = _this12.taskData.questionList[0].projectorImage[2];
        _this12.projectorOrder = _this12.taskData.questionList[0].order[0];
      }
    };
    this.setProjectorOrder = function (num) {
      if (_this12.projectorOrder == num) {
        return num;
      } else {
        return -1;
      }
    };

    angular.element(document).ready(function () {

      _this12.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        if (_this12.userAttempt === _this12.attemptNum) {
          _this12.userAttempt = 0;
        }
        _this12.userAttempt++;
        _this12.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          if (!dropItemList[i].firstChild && !(dropItemList[i].getAttribute("order") === '-1') || dropItemList[i].firstChild && dropItemList[i].getAttribute("order") !== dropItemList[i].firstChild.getAttribute("order")) {
            //упражнение провалено
            if (_this12.userAttempt == _this12.attemptNum && _this12.taskOptions.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[_this12.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      var drugContainer = document.getElementsByClassName('task__drag-container')[0];
      for (var i = 0; i < dropItemList.length; i++) {
        if (dropItemList[i].firstChild) {
          drugContainer.appendChild(dropItemList[i].firstChild);
        }
      }
      _this12.state = 1;

      if (_this12.taskOptions.shuffle) _this12.questionList = _.shuffle(_this12.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {
      // console.log("why not?")
      _this12.showRight = 1;
    };
  }
})();

;(function () {
  'use strict';

  taskDragAlongYaxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "$document", "staticService", "userService"];
  angular.module('courseApp').component('taskDragAlongYax', {
    templateUrl: 'js/components/task-drag-along-yax/taskDragAlongYaxTmpl.html',
    controller: 'taskDragAlongYaxCtrl',
    controllerAs: '$ctrl'
  }).controller('taskDragAlongYaxCtrl', taskDragAlongYaxCtrl);

  var drag1_left = 0;
  var drag2_left = 0;
  var drag1_rez = false;
  var drag2_rez = false;
  var drag_pozition1 = 1;
  var drag_pozition2 = 4;
  var _revert = false;
  var _drag = false;

  function taskDragAlongYaxCtrl($scope, $stateParams, $attrs, $document, staticService, userService) {
    var _this13 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    //this.taskOptions = this.taskData.options;
    //this.questionList;
    this.attemptNum = this.taskData.attempts;
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    //this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    //if (this.taskOptions.shuffle)
    //  this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));
    //else
    //  this.questionList = this.taskData.questionList;

    this.showRight = 0;
    // main task info

    function drag_revert1() {

      if (drag_pozition1 == 1) {
        drag1_left = -1;
      };
      if (drag_pozition1 == 2) {
        drag1_left = 80;
      };
      if (drag_pozition1 == 3) {
        drag1_left = 239;
      };
      $('#drag1').animate({
        left: drag1_left
      });
    }

    function drag_revert2() {
      if (drag_pozition2 == 4) {
        drag2_left = 0;
      };
      if (drag_pozition2 == 3) {
        drag2_left = -141;
      };
      if (drag_pozition2 == 2) {
        drag2_left = -300;
      };
      $('#drag2').animate({
        left: drag2_left
      });
    }

    function dropp_drag1() {
      if (drag_pozition1 == 1) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        if (drag_pozition2 == 4) {
          $('.task__drop-container1').addClass("vol_bg");
          $('.task__drop-container2').addClass("vol_bg");
        };
        if (drag_pozition2 == 3) {
          $('.task__drop-container1').addClass("vol_md");
          $('.task__drop-container2').addClass("vol_bg");
        };
        if (drag_pozition2 == 2) {
          $('.task__drop-container1').addClass("vol_sm");
          $('.task__drop-container2').addClass("vol_bg");
        };
      };
      if (drag_pozition1 == 1) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        if (drag_pozition2 == 4) {
          $('.task__drop-container1').addClass("vol_bg");
          $('.task__drop-container2').addClass("vol_bg");
        };
        if (drag_pozition2 == 3) {
          $('.task__drop-container1').addClass("vol_md");
          $('.task__drop-container2').addClass("vol_bg");
        };
        if (drag_pozition2 == 2) {
          $('.task__drop-container1').addClass("vol_sm");
          $('.task__drop-container2').addClass("vol_bg");
        };
      };
      if (drag_pozition1 == 2) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        if (drag_pozition2 == 4) {
          $('.task__drop-container1').addClass("vol_bg");
          $('.task__drop-container2').addClass("vol_md");
        };
        if (drag_pozition2 == 3) {
          $('.task__drop-container1').addClass("vol_md");
          $('.task__drop-container2').addClass("vol_md");
        };
      };
      if (drag_pozition1 == 3) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        $('.task__drop-container1').addClass("vol_bg");
        $('.task__drop-container2').addClass("vol_sm");
      };
    }

    function dropp_drag2() {
      if (drag_pozition2 == 4) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        if (drag_pozition1 == 1) {
          $('.task__drop-container1').addClass("vol_bg");
          $('.task__drop-container2').addClass("vol_bg");
        };
        if (drag_pozition1 == 2) {
          $('.task__drop-container1').addClass("vol_bg");
          $('.task__drop-container2').addClass("vol_md");
        };
        if (drag_pozition1 == 3) {
          $('.task__drop-container2').addClass("vol_sm");
          $('.task__drop-container1').addClass("vol_bg");
        };
      };
      if (drag_pozition2 == 3) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        if (drag_pozition1 == 1) {
          $('.task__drop-container2').addClass("vol_bg");
          $('.task__drop-container1').addClass("vol_md");
        };
        if (drag_pozition1 == 2) {
          $('.task__drop-container1').addClass("vol_md");
          $('.task__drop-container2').addClass("vol_md");
        };
      };
      if (drag_pozition2 == 2) {
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        $('.task__drop-container1').addClass("vol_sm");
        $('.task__drop-container2').addClass("vol_bg");
      };
    }

    $('#drag1').draggable({

      axis: "x",
      containment: ".task__drop-container1",
      snap: "#snapper0,#snapper1,#snapper2, .droppable",
      snapMode: "inner",
      snapTolerance: 22,
      revert: _revert,
      start: function start() {
        _drag = false;
      },
      stop: function stop() {
        _revert = false;
        $('#drag1').css("top", "0");
      }
    });

    $('#drag2').draggable({
      axis: "x",
      containment: ".task__drop-container2",
      snap: "#snapper1,#snapper2,#snapper3, .droppable",
      snapMode: "inner",
      snapTolerance: 22,
      revert: _revert,
      start: function start() {
        _drag = true;
      },
      stop: function stop() {
        //$('#drag2').text("stop2");
        $('#drag2').css("top", "0");
      }
    });

    $("#snapper0").droppable({
      hoverClass: "hover",
      drop: function drop() {
        drag_pozition1 = 1;
        if (_drag === false) {
          drag1_rez = false;
          dropp_drag1();
        } else {
          dropp_drag2();
        }
      },
      activate: function activate() {},
      deactivate: function deactivate() {},
      over: function over() {},
      out: function out() {}
    });

    $("#snapper01").droppable({
      drop: function drop() {
        if (_drag === false) {
          drag_revert1();
        } else {
          drag_revert2();
        }
      }
    });

    $("#snapper1").droppable({
      //activeClass: "active",
      hoverClass: "hover",
      //tolerance: "pointer",
      drop: function drop() {
        //$('#snapper1').css({
        //  backgroundColor: "#ef8cdf"
        //});

        if (_drag === false) {
          drag_pozition1 = 2;
          drag1_rez = true;
          dropp_drag1();
        } else {
          drag2_rez = false;
          drag_pozition2 = 2;
          dropp_drag2();
        }
      },
      activate: function activate() {},
      deactivate: function deactivate() {},
      over: function over() {},
      out: function out() {
        //$('#snapper1').css({
        //  backgroundColor: ""
        //});
      }
    });

    $("#snapper12").droppable({
      drop: function drop() {
        if (_drag === false) {
          drag_revert1();
        } else {
          drag_revert2();
        }
      }
    });

    $("#snapper2").droppable({
      //activeClass: "active",
      hoverClass: "hover",
      //tolerance: "pointer",
      drop: function drop() {
        //$('#snapper2').css({
        //  backgroundColor: "#ef8cdf"
        //});

        if (_drag === false) {
          drag1_rez = false;
          drag_pozition1 = 3;
          dropp_drag1();
        } else {
          drag2_rez = true;
          drag_pozition2 = 3;
          dropp_drag2();
        }
      },
      activate: function activate() {},
      deactivate: function deactivate() {},
      over: function over() {},
      out: function out() {
        //$('#snapper2').css({
        //  backgroundColor: ""
        //});
      }
    });

    $("#snapper13").droppable({
      drop: function drop() {
        if (_drag === false) {
          drag_revert1();
        } else {
          drag_revert2();
        }
      }
    });

    $("#snapper3").droppable({
      //activeClass: "active",
      hoverClass: "hover",
      //tolerance: "pointer",
      drop: function drop() {
        if (_drag === false) {
          drag1_rez = false;
          drag_pozition1 = 4;
          dropp_drag1();
        } else {
          drag2_rez = false;
          drag_pozition2 = 4;
          dropp_drag2();
        }
      },
      activate: function activate() {},
      deactivate: function deactivate() {},
      over: function over() {},
      out: function out() {
        //$('#snapper3').css({
        //  backgroundColor: ""
        //});
      }
    });

    this.removeRestart = function () {

      _this13.state = 1;
      $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
      $('.task__drop-container').addClass("vol_bg");
      drag1_rez = false;
      drag2_rez = false;
      drag1_left = 0;
      drag2_left = 0;
      drag_pozition1 = 1;
      drag_pozition2 = 4;
      drag_revert1();
      drag_revert2();
    }; // end of removeRestart

    angular.element(document).ready(function () {

      _this13.checkAnswer = function (e) {
        if (_this13.userAttempt === _this13.attemptNum) {
          _this13.userAttempt = 0;
        }
        _this13.userAttempt++;
        _this13.state = 2;

        if (drag1_rez == false || drag2_rez == false) {
          //упражнение провалено
          if (_this13.userAttempt == _this13.attemptNum && _this13.taskData.showAnswer) {
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[_this13.userAttempt], false);
          return;
        }

        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[0], true);
      };

      var showAnswer = function showAnswer() {
        _this13.state = 2;
        $('.task__drop-container').removeClass("vol_bg vol_md vol_sm");
        $('.task__drop-container').addClass("vol_bg");
        drag_pozition1 = 2;
        drag_pozition2 = 3;
        drag_revert1();
        drag_revert2();
      };
    });
  }
})();
;(function () {
  'use strict';

  taskDragCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDrag', {
    templateUrl: 'js/components/task-drag/taskDragTmpl.html',
    controller: 'taskDragCtrl',
    controllerAs: '$ctrl'
  }).directive('draggable', draggable).directive('droppable', droppable).controller('taskDragCtrl', taskDragCtrl);

  function draggable() {
    return function ($scope, $element) {
      var elem = $element[0];
      elem.draggable = true;

      elem.addEventListener('dragstart', function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', this.id);
        this.classList.add('drag');
        return false;
      }, false);

      elem.addEventListener('dragend', function (e) {
        this.classList.remove('drag');
        return false;
      }, false);
    };
  }

  function droppable() {
    return function ($scope, $element) {
      var elem = $element[0];

      elem.addEventListener('dragover', function (e) {
        e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragenter', function (e) {
        this.classList.add('over');
        return false;
      }, false);

      elem.addEventListener('dragleave', function (e) {
        this.classList.remove('over');
        return false;
      }, false);

      elem.addEventListener('drop', function (e) {
        var dragContainer = document.getElementsByClassName('task__drag-container')[0];
        this.classList.remove('over');

        if (this.firstChild) {
          dragContainer.appendChild(this.firstChild);
        }

        var item = document.getElementById(e.dataTransfer.getData('Text'));
        this.appendChild(item);
        e.preventDefault();

        return false;
      }, false);
    };
  }

  /* @ngInject */
  function taskDragCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this14 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    this.showRight = 0;

    angular.element(document).ready(function () {

      _this14.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        if (_this14.userAttempt === _this14.attemptNum) {
          _this14.userAttempt = 0;
        }
        _this14.userAttempt++;
        _this14.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          if (!dropItemList[i].firstChild || dropItemList[i].firstChild && dropItemList[i].getAttribute("order") !== dropItemList[i].firstChild.getAttribute("order")) {
            //упражнение провалено

            if (_this14.userAttempt == _this14.attemptNum && _this14.taskOptions.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[_this14.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      for (var i = 0; i < dropItemList.length; i++) {
        if (dropItemList[i].firstChild) dropItemList[i].removeChild(dropItemList[i].firstChild);
      }
      _this14.state = 1;

      if (_this14.taskOptions.shuffle) _this14.questionList = _.shuffle(_this14.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {
      console.log("why not?");
      _this14.showRight = 1;
    };
  }
})();
;(function () {
  'use strict';

  taskDragTableCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDragTable', {
    templateUrl: 'js/components/task-drag-table/taskDragTableTmpl.html',
    controller: 'taskDragTableCtrl',
    controllerAs: '$ctrl'
  }
  // .directive('draggable', draggable)
  // .directive('droppable', droppable)
  ).controller('taskDragTableCtrl', taskDragTableCtrl);

  // function draggable(){
  //   return function($scope, $element){
  //     var elem = $element[0];
  //     elem.draggable = true;
  //
  //     elem.addEventListener('dragstart', function(e) {
  //           e.dataTransfer.effectAllowed = 'move';
  //           e.dataTransfer.setData('Text', this.id);
  //           this.classList.add('drag');
  //           return false;
  //       },
  //       false
  //     );
  //
  //     elem.addEventListener('dragend', function(e) {
  //           this.classList.remove('drag');
  //           return false;
  //       },
  //       false
  //     );
  //   }
  // }

  // function droppable(){
  //   return function($scope, $element){
  //       var elem = $element[0];
  //
  //       elem.addEventListener('dragover', function(e) {
  //           e.dataTransfer.dropEffect = 'move';
  //           e.preventDefault();
  //           this.classList.add('over');
  //           return false;
  //         },
  //         false
  //       );
  //
  //       elem.addEventListener('dragenter', function(e) {
  //           this.classList.add('over');
  //           return false;
  //         },
  //         false
  //       );
  //
  //       elem.addEventListener('dragleave', function(e) {
  //           this.classList.remove('over');
  //           return false;
  //         },
  //         false
  //       );
  //
  //       elem.addEventListener('drop', function(e) {
  //           var dragContainer = document.getElementsByClassName('task__drag-container')[0];
  //           this.classList.remove('over');
  //
  //           if (this.firstChild) {
  //             dragContainer.appendChild(this.firstChild);
  //           }
  //
  //           var item = document.getElementById(e.dataTransfer.getData('Text'));
  //           this.appendChild(item);
  //           e.preventDefault();
  //
  //           return false;
  //         },
  //         false
  //       );
  //
  //   }
  // }

  /* @ngInject */
  function taskDragTableCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this15 = this;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options;
    // this.questionList;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    var taskState = 0;
    this.state = 1;
    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // ограничение количества брошенных предметов
    window.inDropItemsLimit = this.taskOptions.limits.inDropItems ? this.taskOptions.limits.inDropItems : 1;

    // мешаем вопросы
    if (this.taskOptions.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = this.taskData.questionList;

    // this.showRight = 0;

    angular.element(document).ready(function () {

      _this15.checkAnswer = function (e) {
        var dropItemList = document.getElementsByClassName('task__drop-item');
        // console.log("dropItemList", dropItemList);
        if (_this15.userAttempt === _this15.attemptNum) {
          _this15.userAttempt = 0;
        }
        _this15.userAttempt++;
        _this15.state = 2;

        for (var i = 0; i < dropItemList.length; i++) {
          for (var j = 0; j < 2; j++) {

            if (dropItemList[i].childNodes[j]) {
              // Если пользователь добавил елемен
              var userOrder = dropItemList[i].childNodes[j].getAttribute("order");
            } else {
              var userOrder = "x";
            }

            var rightOrder = dropItemList[i].getAttribute("order");
            var compareOrder = rightOrder.indexOf(userOrder);

            if (compareOrder == -1) {
              // Упражнение провалено
              // console.log("упражнение провалено");
              if (_this15.userAttempt == _this15.attemptNum && _this15.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[_this15.userAttempt], false);
              return;
            }
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this15.taskData.messages[0], true);
      };
    });

    this.removeRestart = function () {
      var dropItemList = document.getElementsByClassName('task__drop-item');
      for (var i = 0; i < dropItemList.length; i++) {
        // console.log("dropItemList[i]", dropItemList[i]);
        while (dropItemList[i].lastChild) {
          dropItemList[i].removeChild(dropItemList[i].lastChild);
        }
        // console.log("dropItemList[i]--", dropItemList[i]);
      }

      _this15.showRight = 0;
      _this15.state = 1;

      if (_this15.taskOptions.shuffle) _this15.questionList = _.shuffle(_this15.questionList);
    }; // end of removeRestart

    var showAnswer = function showAnswer() {

      // console.log("WHY?");
      _this15.showRight = 1;
      _this15.state = 2;

      var dropItemList = document.getElementsByClassName('task__drop-item');
      // console.log("dropItemList", dropItemList);

      var dragItemList = document.getElementsByClassName("draggable");
      // console.log("dropItemList", dragItemList);

      for (var i = 0; i < dropItemList.length; i++) {
        while (dropItemList[i].lastChild) {
          dropItemList[i].removeChild(dropItemList[i].lastChild);
        };
        var rightOrder = dropItemList[i].getAttribute("order");
        // console.log("dropItemList", dropItemList[i]);
        for (var j = 0; j < 2; j++) {
          if (!(rightOrder[j] === "x")) {
            var dragItemOrder = "img[order=" + rightOrder[j] + "]";
            // console.log("dragItemOrder", dragItemOrder);
            var dragItem = document.querySelector(dragItemOrder);
            // console.log("dragItem", dragItem);
            dropItemList[i].appendChild(dragItem.cloneNode());
          };
        };
      };
    }; // End of showAnswer


    // jQuery UI Sortable
    angular.element(document).ready(function () {

      $(".draggable").draggable({
        connectToSortable: ".sortable",
        helper: 'clone',
        stop: function stop(event, ui) {
          this.state = 1;
          // console.warn("stop-drag", event, ui)
        }
      });

      $(".sortable").sortable({
        connectWith: '.sortable',
        update: function update(event, ui) {
          var limit = window.inDropItemsLimit;
          var elemOver = document.querySelector(".over");
          if (event.target.childNodes.length > limit) {
            // console.warn(event, ui)
            ui.item[0].parentNode.removeChild(ui.item[0]);
          }
        },
        stop: function stop(event, ui) {
          this.state = 1;
          // console.warn("stop-sort", event, ui)
        },
        helper: 'original'

      });

      var _loop = function _loop(i) {
        var currentCondID = "#cond" + i;
        var currentConcID = "#conc" + i;
        // console.log($(currentCondID));
        $(currentCondID).sortable({
          over: function over(event, ui) {
            $(currentCondID).addClass("over");
          },
          out: function out(event, ui) {
            $(currentCondID).removeClass("over");
          }
        });

        $(currentConcID).sortable({
          over: function over(event, ui) {
            $(currentConcID).addClass("over");
          },
          out: function out(event, ui) {
            $(currentConcID).removeClass("over");
          }
        });
      };

      for (var i = 0; i < 5; i++) {
        _loop(i);
      }

      $(".draggable").click(function (evt) {
        $('.select').each(function (index, item) {
          $(item).removeClass('select');
        });
        $(evt.target).addClass('select');
      });

      $(".sortable").click(function (evt) {
        var drag_item;
        var limit = window.inDropItemsLimit;
        $('.select').each(function (index, item) {
          if (item) {
            drag_item = item;
            $(item).removeClass('select');
          }
        });
        // console.warn(drag_item)
        if (drag_item) {
          if (evt.target.nodeName != 'IMG' && evt.target.childNodes.length < limit) {
            var repeat = 0;
            $(evt.target.childNodes).each(function (index, item) {
              if ($(item).attr('src') == $(drag_item).attr('src')) {
                repeat = 1;
              }
            });
            if (!repeat) evt.target.appendChild(drag_item.cloneNode());
          }
          if (evt.target.nodeName == 'IMG' && evt.target.parentNode.childNodes.length < limit) {
            var repeat = 0;
            $(evt.target.parentNode.childNodes).each(function (index, item) {
              if ($(item).attr('src') == $(drag_item).attr('src')) {
                repeat = 1;
              }
            });
            if (!repeat) evt.target.parentNode.appendChild(drag_item.cloneNode());
          }
        }
      });
    } // End of jQuery UI Draggable

    );
  } // End of taskDragTableCtrl
})();
;(function () {
  'use strict';

  ManyMultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManyMultiChoice', {
    templateUrl: 'js/components/task-many-multi-choice/taskManyMultiChoiceTmpl.html',
    controller: 'ManyMultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManyMultiChoiceCtrl', ManyMultiChoiceCtrl);

  /* @ngInject */
  function ManyMultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this16 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManyMultiCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManyMultiCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManyMultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManyMultiCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this16.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      } else {
        this.taskExs.forEach(function (item, i) {
          _this16.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this16.selectAnswer = function (parentIndex, index) {
        if (_this16.state == 2) {
          return;
        }
        _this16.active[parentIndex][index].selected = !_this16.active[parentIndex][index].selected;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this16.active.length; i++) {
          for (var j = 0; j < _this16.active[i].length; j++) {
            if (_this16.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this16.active.length) {
          if (_this16.test) {
            $scope.$emit('myTestState', 1);
          }
          _this16.state = 1;
        } else {
          if (_this16.test) {
            $scope.$emit('myTestState', 0);
          }
          _this16.state = 0;
        }
      }; // end of selectAnswer()

      _this16.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this16.userAttempt === _this16.attemptNum) {
          _this16.userAttempt = 0;
        }
        _this16.userAttempt++;
        _this16.state = 2;

        // console.log('mas => r, s', this.taskExs, this.active)
        for (var i = 0; i < _this16.taskExs.length; i++) {
          var item_i = _this16.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right, this.active[i][j])
            if (item_i[j].right != _this16.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManyMultiChoice:: упражнение провалено')

              if (_this16.userAttempt == _this16.attemptNum && _this16.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[_this16.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManyMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this16.removeRestart = function () {

        _this16.state = 0;

        if (_this16.taskOptions.shuffle) {
          _this16.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this16.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        } else {
          _this16.taskExs.forEach(function (item, i) {
            _this16.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var i = 0; i < _this16.taskExs.length; i++) {
          for (var j = 0; j < _this16.taskExs[i].questionList.length; j++) {
            _this16.active[i][j].selected = _this16.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice', {
    templateUrl: 'js/components/task-many-single-choice/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoiceCtrl', ManySingleChoiceCtrl);

  /* @ngInject */
  function ManySingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this17 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr
    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this17.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      } else {
        this.taskExs.forEach(function (item, i) {
          _this17.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this17.selectAnswer = function (parentIndex, index) {
        if (_this17.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        if (_this17.active[parentIndex][index].selected == true) {
          checkedTasks--;
          _this17.active[parentIndex][index].selected = false;
          return;
        }

        _this17.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this17.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this17.active.length; i++) {
          for (var j = 0; j < _this17.active[i].length; j++) {
            if (_this17.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this17.active.length) {
          if (_this17.test) {
            $scope.$emit('myTestState', 1);
          }
          _this17.state = 1;
        } else {
          if (_this17.test) {
            $scope.$emit('myTestState', 0);
          }
          _this17.state = 0;
        }
      };

      _this17.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this17.userAttempt === _this17.attemptNum) {
          _this17.userAttempt = 0;
        }
        _this17.userAttempt++;
        _this17.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this17.taskExs.length; i++) {
          var item_i = _this17.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this17.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this17.userAttempt == _this17.attemptNum && _this17.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this17.taskData.messages[_this17.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this17.taskData.messages[0], true);
      };

      _this17.removeRestart = function () {

        _this17.state = 0;

        if (_this17.taskOptions.shuffle) {
          _this17.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this17.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        } else {
          _this17.taskExs.forEach(function (item, i) {
            _this17.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var i = 0; i < _this17.taskExs.length; i++) {
          for (var j = 0; j < _this17.taskExs[i].questionList.length; j++) {
            _this17.active[i][j].selected = _this17.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  MarkerChoiceCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerChoice', {
    templateUrl: 'js/components/task-marker-choice/taskMarkerChoiceTmpl.html',
    controller: 'MarkerChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerChoiceCtrl', MarkerChoiceCtrl);

  /* @ngInject */
  function MarkerChoiceCtrl($scope, $stateParams, staticService, userService) {
    var _this18 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    // сколько ответов будет видно на странице
    var qCount = this.taskData.qCount;
    if (this.taskData.qCount > this.taskData.questionList.length) {
      var _qCount = this.taskData.questionList.length;
    }

    // составляем список ответов и мешаем егo
    // _.sample(list, [n])
    if (this.taskData.shuffle) {

      // создание нового объекта путем перегонки  объекта this.taskData.questionList - в строку , а затем эту стоку преобразуем сново в объект, теперь новый объект не будет ссылаться на объект this.taskData.questionList -и  при изменении в  randomList -this.taskData.questionList менятся не будет.
      var randomList = angular.fromJson(angular.toJson(_.shuffle(this.taskData.questionList))),
          usedId = [];
      this.questionList = [];

      // рандомно набираем по 1 ответу к каждому маркеру, т.к. по ТЗ на каждый цвет должен быть хотябы 1 ответ
      for (var _i2 = 0; _i2 < this.markers.length; _i2++) {
        for (var j = 0; j < randomList.length; j++) {
          if (this.markers[_i2].id == randomList[j].right) {
            this.questionList.push(randomList[j]);
            usedId.push(j);
            break;
          }
        }
      }
      // добираем ответы до нужного значения (qCount)
      for (var _i3 = 0; _i3 < randomList.length; _i3++) {
        var check = false;
        for (var _j = 0; _j < usedId.length; _j++) {
          if (_i3 == usedId[_j]) {
            check = true;
            break;
          }
        }
        if (check) {
          continue;
        } else {
          this.questionList.push(randomList[_i3]);
        }

        if (this.questionList.length >= qCount) {
          break;
        }
      }
      // ещё раз мешаем
      this.questionList = _.shuffle(this.questionList);
      // console.log('this.questionList:: =>', this.questionList, usedId)
    } else {
      this.questionList = this.taskData.questionList;
    }

    this.useVideo = staticService.getData($stateParams, 'useVideo');
    this.videoPoster = staticService.getData($stateParams, 'videoPoster');

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    // выделенный маркер
    this.marker = -1;
    // кол-во попыток
    this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
      this.active[i].marker = -1;
    }

    angular.element(document).ready(function () {
      if (_this18.useVideo) {
        // set video bg
        document.getElementsByClassName('btn_task-video')[0].style.background = 'url(' + _this18.videoPoster + ')';
      }

      /**
      *   Выбор цвета маркера
      */
      _this18.selectMarker = function (marker) {
        _this18.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this18.selectAnswer = function (index, $event) {
        if (_this18.marker == -1 || _this18.state == 2) {
          return;
        }

        _this18.active[index].selected = 1;
        _this18.active[index].marker = _this18.marker;
        $event.currentTarget.setAttribute('data', 'marker' + _this18.marker);
        _this18.state = 1;
      };
    });

    this.checkAnswer = function (e) {

      if (_this18.userAttempt === _this18.attemptNum) {
        _this18.userAttempt = 0;
      }
      _this18.userAttempt++;
      _this18.state = 2;

      for (var _i4 = 0; _i4 < _this18.questionList.length; _i4++) {
        // console.log('rightAnswer:', this.questionList[i].rightAnswer, 'userAnswer:', this.active[i].marker)
        if (_this18.questionList[_i4].right != _this18.active[_i4].marker) {
          //упражнение провалено
          if (_this18.userAttempt === 3) {
            // console.log('taskMarkerChoice:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[_this18.userAttempt], false);
          return;
        }
      }
      // console.log('taskMarkerChoice:: упражнение верно')
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[0], true);
    };
    this.removeRestart = function () {
      var aItems = document.getElementsByClassName('task__marker-choice-item');

      for (var i = 0; i < _this18.active.length; i++) {
        _this18.active[i].selected = false;
        _this18.active[i].marker = -1;
        aItems[i].setAttribute('data', 'marker');
      }
      _this18.state = 0;
      _this18.marker = -1;

      _this18.questionList = _.shuffle(_this18.questionList);
    }; // end of removeRestart

    this.showVideo = function () {
      var videoElement = document.querySelector('.modal_video__body');

      _this18.videoUrl = staticService.getData($stateParams, 'videoUrl');
      // console.warn('HeaderCtrl:: this.videoUrl:', this.videoUrl)
      _this18.videoPoster = staticService.getData($stateParams, 'videoPoster');
      _this18.videoWidth = staticService.getData($stateParams, 'videoWidth');
      _this18.videoHeight = staticService.getData($stateParams, 'videoHeight');

      staticService.showModal('video');
      var videoStr = "<video class=\"video-js vjs-default-skin video-element\" controls preload=\"auto\"\n                               width=\"" + _this18.videoWidth + "\" height=\"" + _this18.videoHeight + "\" poster=\"" + _this18.videoPoster + "\" vjs-video>\n                            <source src=\"" + _this18.videoUrl + "\" type=\"video/mp4\">\n                        </video>";
      videoElement.innerHTML = videoStr;
    }; // end of showVideo()

    var showAnswer = function showAnswer() {
      var itemList = document.querySelectorAll('.task__marker-choice-item');
      for (var i = 0; i < itemList.length; i++) {
        itemList[i].setAttribute('data', 'marker' + _this18.questionList[i].right);
      }
    };
  }
})();
;(function () {
  'use strict';

  MarkerChoiceDoubleCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerChoiceDouble', {
    templateUrl: 'js/components/task-marker-choice-double/taskMarkerChoiceDoubleTmpl.html',
    controller: 'MarkerChoiceDoubleCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerChoiceDoubleCtrl', MarkerChoiceDoubleCtrl);

  /* @ngInject */
  function MarkerChoiceDoubleCtrl($scope, $stateParams, staticService, userService) {
    var _this19 = this;

    this.taskData = staticService.getData($stateParams, 'data');
    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    // сколько ответов будет видно на странице
    var qCount = this.taskData.qCount;
    if (this.taskData.qCount > this.taskData.questionList.length) {
      var _qCount2 = this.taskData.questionList.length;
    }
    var _questionList = [];
    this.questionList = [];
    this.questionList1 = [];
    this.questionList = angular.fromJson(angular.toJson(_.shuffle(this.taskData.questionList)));
    this.questionList1 = angular.fromJson(angular.toJson(_.shuffle(this.taskData.questionList1)));
    console.log('randomList *-*-*-*---1-', this.questionList);
    console.log('randomList1 *-*-*-*---2-', this.questionList1);

    // массив для работы с ответами
    this.active = [];
    var _active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    // выделенный маркер
    this.marker = -1;
    // кол-во попыток
    this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.userAttempt = 0;
    var full_length = this.questionList.length * 2;

    for (var _i5 = 0; _i5 < this.questionList.length; _i5++) {
      _questionList[_i5] = {};
      _questionList[_i5].right = this.questionList[_i5].right;
      console.info("i - ", _i5, "  _questionList[i].right - ", _questionList[_i5].right);
    }
    for (var _i6 = 0; _i6 < this.questionList.length; _i6++) {
      var j = _i6 + 3;
      _questionList[j] = {};
      _questionList[j].right = this.questionList1[_i6].right;
      console.info("j - ", j, "  _questionList[j].right - ", _questionList[j].right);
    }
    for (var i = 0; i < this.questionList.length * 2; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
      this.active[i].marker = -1;
      _active[i] = {};
      _active[i].selected = 0;
      _active[i].marker = -1;
    }

    function ThisActive() {
      for (var i = 0; i < 6; i++) {
        console.info("i - ", i, "  this.active[i].selected - ", _active[i].selected);
      }
    }

    angular.element(document).ready(function () {
      if (_this19.useVideo) {
        // set video bg
        document.getElementsByClassName('btn_task-video')[0].style.background = 'url(' + _this19.videoPoster + ')';
      }

      /**
      *   Выбор цвета маркера
      */
      _this19.selectMarker = function (marker) {
        _this19.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this19.selectAnswer = function (index, $event) {
        if (_this19.marker == -1 || _this19.state == 2) {
          return;
        }
        _this19.active[index].selected = 1;
        _this19.active[index].marker = _this19.marker;
        _active[index].selected = 1;
        _active[index].marker = _this19.marker;
        ThisActive();
        $event.currentTarget.setAttribute('data', 'marker' + _this19.marker);
        _this19.state = 1;
      };

      _this19.selectAnswer1 = function (index, $event) {
        var _index = index + 3;

        if (_this19.marker == -1 || _this19.state == 2) {
          return;
        }

        _this19.active[_index].selected = 1;
        _this19.active[_index].marker = _this19.marker;
        _active[_index].selected = 1;
        _active[_index].marker = _this19.marker;
        $event.currentTarget.setAttribute('data', 'marker' + _this19.marker);
        _this19.state = 1;
        ThisActive();
      };
    });

    this.checkAnswer = function (e) {

      if (_this19.userAttempt === _this19.attemptNum) {
        _this19.userAttempt = 0;
      }
      _this19.userAttempt++;
      _this19.state = 2;

      for (var _i7 = 0; _i7 < _this19.questionList.length * 2; _i7++) {

        if (_questionList[_i7].right != _this19.active[_i7].marker) {
          //упражнение провалено
          if (_this19.userAttempt === 3) {
            // console.log('taskMarkerChoice:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[_this19.userAttempt], false);
          return;
        }
      }
      // console.log('taskMarkerChoice:: упражнение верно')
      _this19.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[0], true);
    };
    this.removeRestart = function () {
      var aItems = document.getElementsByClassName('task__marker-choice-item');

      for (var _i8 = 0; _i8 < _this19.active.length; _i8++) {
        _this19.active[_i8].selected = false;
        _this19.active[_i8].marker = -1;
        aItems[_i8].setAttribute('data', 'marker');
      }
      for (var _i9 = 0; _i9 < _this19.questionList.length * 2; _i9++) {
        _this19.active[_i9] = {};
        _this19.active[_i9].selected = 0;
        _this19.active[_i9].marker = -1;
        _active[_i9] = {};
        _active[_i9].selected = 0;
        _active[_i9].marker = -1;
      }

      _this19.state = 0;
      _this19.marker = -1;

      _this19.questionList = _.shuffle(_this19.questionList);
      _this19.questionList1 = _.shuffle(_this19.questionList1);
      for (var _i10 = 0; _i10 < _this19.questionList.length; _i10++) {
        _questionList[_i10].right = _this19.questionList[_i10].right;
      }
      for (var _i11 = 0; _i11 < _this19.questionList.length; _i11++) {
        var _j2 = _i11 + 3;
        _questionList[_j2].right = _this19.questionList1[_i11].right;
      }
    }; // end of removeRestart

    this.showVideo = function () {
      var videoElement = document.querySelector('.modal_video__body');

      _this19.videoUrl = staticService.getData($stateParams, 'videoUrl');
      // console.warn('HeaderCtrl:: this.videoUrl:', this.videoUrl)
      _this19.videoPoster = staticService.getData($stateParams, 'videoPoster');
      _this19.videoWidth = staticService.getData($stateParams, 'videoWidth');
      _this19.videoHeight = staticService.getData($stateParams, 'videoHeight');

      staticService.showModal('video');
      var videoStr = "<video class=\"video-js vjs-default-skin video-element\" controls preload=\"auto\"\n                               width=\"" + _this19.videoWidth + "\" height=\"" + _this19.videoHeight + "\" poster=\"" + _this19.videoPoster + "\" vjs-video>\n                            <source src=\"" + _this19.videoUrl + "\" type=\"video/mp4\">\n                        </video>";
      videoElement.innerHTML = videoStr;
    }; // end of showVideo()

    var showAnswer = function showAnswer() {
      var itemList = document.querySelectorAll('.task__marker-choice-item1');
      for (var _i12 = 0; _i12 < itemList.length; _i12++) {
        itemList[_i12].setAttribute('data', 'marker' + _questionList[_i12].right);
      }
      var itemList1 = document.querySelectorAll('.task__marker-choice-item2');
      for (var _i13 = 0; _i13 < itemList1.length; _i13++) {
        var _j3 = _i13 + 3;
        itemList1[_i13].setAttribute('data', 'marker' + _questionList[_j3].right);
      }
    };
  }
})();
;(function () {
  'use strict';

  MarkerNoteCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerNote', {
    controller: 'MarkerNoteCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerNoteCtrl', MarkerNoteCtrl);

  /* @ngInject */
  function MarkerNoteCtrl($scope, $stateParams, staticService, userService) {
    var _this20 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    //массив утверждений
    this.questionList = this.taskData.questionList;

    // массив для работы с ответами
    this.active = [];
    // выделенный маркер
    this.marker = -1;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].marker = this.questionList[i].marker;
      this.active[i].marker == -1 ? this.active[i].selected = 0 : this.active[i].selected = 1;
    }

    angular.element(document).ready(function () {
      /**
      *   Выбор цвета маркера
      */
      _this20.selectMarker = function (marker) {
        _this20.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this20.selectAnswer = function (index, $event) {
        if (_this20.active[index].selected == 1) {
          _this20.active[index].selected = 0;
          _this20.active[index].marker = -1;
          $event.currentTarget.setAttribute('data', 'marker-1');
        } else {
          _this20.active[index].selected = 1;
          _this20.active[index].marker = _this20.marker;
          $event.currentTarget.setAttribute('data', 'marker' + _this20.marker);
        }
      };

      _this20.saveNote = function () {
        for (var i = 0; i < _this20.questionList.length; i++) {
          staticService.setMarkerNote($stateParams, i, _this20.active[i].marker);
        }

        staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
      };
    });
  }
})();
;(function () {
  'use strict';

  MultiBoxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiBox', {
    templateUrl: 'js/components/task-multi-box/taskMultiBoxTmpl.html',
    controller: 'MultiBoxCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiBoxCtrl', MultiBoxCtrl);

  /* @ngInject */
  function MultiBoxCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this21 = this;

    var answers = [[0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1]];

    // массив для работы с ответами
    this.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    this.taskData = staticService.getData($stateParams, 'data');

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this21.selectAnswer = function (index, row) {
        if (_this21.state == 2) {
          return;
        }
        // console.log('select', index)
        _this21.active[row][index] = !_this21.active[row][index];
        var check = false;
        for (var i = 0; i < _this21.active.length; i++) {
          for (var j = 0; j < _this21.active[i].length; j++) {
            if (_this21.active[i][j]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this21.state = 1;
        } else {
          _this21.state = 0;
        }
      };

      _this21.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this21.userAttempt === _this21.attemptNum) {
          _this21.userAttempt = 0;
        }
        _this21.userAttempt++;
        _this21.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this21.active.length; i++) {
          for (var j = 0; j < _this21.active[i].length; j++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j])
            if (_this21.active[i][j] != answers[i][j]) {
              //упражнение провалено
              if (_this21.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3')
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this21.taskData.messages[_this21.userAttempt], false);
              return;
            }
          }
        }

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this21.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this21.removeRestart = function () {

        _this21.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        _this21.state = 0;
      }; // end of removeRestart
    });
    var showAnswer = function showAnswer() {
      _this21.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();
;(function () {
  'use strict';

  MultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoice', {
    templateUrl: 'js/components/task-multi-choice/taskMultiChoiceTmpl.html',
    controller: 'MultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceCtrl', MultiChoiceCtrl);

  /* @ngInject */
  function MultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this22 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    var qCount = 0;
    if (!this.test) {
      if (this.taskData.qCount == -1) {
        qCount = this.taskData.questionList.length;
      } else {
        qCount = this.taskData.qCount;
      }
    }
    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      if (this.taskData.shuffle) this.questionList = _.sample(this.taskData.questionList, qCount);else this.questionList = this.taskData.questionList;
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this22.selectAnswer = function (index) {
        if (_this22.state == 2) {
          return;
        }
        // console.log('select', index)
        _this22.active[index].selected = !_this22.active[index].selected;
        var check = false;
        for (var _i14 = 0; _i14 < _this22.active.length; _i14++) {
          if (_this22.active[_i14].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this22.test) {
            $scope.$emit('myTestState', 1);
          }
          _this22.state = 1;
        } else {
          if (_this22.test) {
            $scope.$emit('myTestState', 0);
          }
          _this22.state = 0;
        }
      };

      _this22.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this22.userAttempt === _this22.attemptNum) {
          _this22.userAttempt = 0;
        }
        _this22.userAttempt++;
        _this22.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this22.questionList.length; i++) {
          // console.log('taskMultiChoice:: упражнение не верно')
          if (_this22.questionList[i].right != _this22.active[i].selected) {
            //упражнение провалено

            if (_this22.userAttempt == _this22.attemptNum && _this22.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[_this22.userAttempt], false);
            return;
          }
        }
        // console.log('taskMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this22.taskData.messages[0], true);
      };

      _this22.removeRestart = function () {

        for (var i = 0; i < _this22.active.length; i++) {
          _this22.active[i].selected = false;
        }
        _this22.state = 0;

        if (_this22.taskData.shuffle) _this22.questionList = _.sample(_this22.taskData.questionList, qCount);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var _i15 = 0; _i15 < _this22.questionList.length; _i15++) {
          _this22.active[_i15].selected = _this22.questionList[_i15].right;
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  MultiChoiceTableCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoiceTable', {
    templateUrl: 'js/components/task-multi-choice-table/taskMultiChoiceTableTmpl.html',
    controller: 'MultiChoiceTableCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceTableCtrl', MultiChoiceTableCtrl);

  /* @ngInject */
  function MultiChoiceTableCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this23 = this;

    // массив для работы с ответами
    this.active = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // получение данных задания data из courseStructure.js
    this.taskData = staticService.getData($stateParams, 'data');
    var answers = [];
    for (var i = 0; i < this.taskData.questionList.length; i++) {
      answers[i] = this.taskData.questionList[i].right;
    }

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this23.selectAnswer = function (index, row) {
        if (_this23.state == 2) {
          return;
        }
        // console.log('select', index)
        _this23.active[row][index] = !_this23.active[row][index];
        var check = false;
        for (var _i16 = 0; _i16 < _this23.active.length; _i16++) {
          for (var j = 0; j < _this23.active[_i16].length; j++) {
            if (_this23.active[_i16][j]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this23.state = 1;
        } else {
          _this23.state = 0;
        }
      };

      _this23.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this23.userAttempt === _this23.attemptNum) {
          _this23.userAttempt = 0;
        }
        _this23.userAttempt++;
        _this23.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var _i17 = 0; _i17 < _this23.active.length; _i17++) {
          for (var j = 0; j < _this23.active[_i17].length; j++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j]);
            if (_this23.active[_i17][j] != answers[_i17][j]) {
              //упражнение провалено
              if (_this23.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3');
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this23.taskData.messages[_this23.userAttempt], false);
              return;
            }
          }
        };

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this23.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this23.removeRestart = function () {

        _this23.active = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
        _this23.state = 0;
      }; // end of removeRestart
    });
    var showAnswer = function showAnswer() {
      _this23.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();

;(function () {
  'use strict';

  NoteCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNote', {
    templateUrl: 'js/components/task-note/taskNoteTmpl.html',
    controller: 'NoteCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteCtrl', NoteCtrl);

  /* @ngInject */
  function NoteCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this24 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.titles = this.taskData.titles;
    this.showTitle = this.taskData.showTitle;
    var elemCount = this.taskData.task_fields / this.titles.length; // количество элементов в колонке

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this24.items = item;
        }
      });
    };

    this.range = function (index) {

      var range = [],
          from = index * elemCount,
          to = (index + 1) * elemCount;

      for (var i = from; i < to; i++) {
        range.push(_this24.items.fields[i]);
      }
      return range;
    };

    loadNotes();
    // console.log('NoteCtrl:: fields:', this.items)

    this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        // console.log(inputs[i].value)
        _this24.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this24.items, chapter, page);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();

;(function () {
  'use strict';

  SelectCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSelect', {
    templateUrl: 'js/components/task-select/taskSelectTmpl.html',
    controller: 'SelectCtrl',
    controllerAs: '$ctrl'
  }).controller('SelectCtrl', SelectCtrl);

  /* @ngInject */
  function SelectCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this25 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs)); // arr

    this.taskExs1 = this.taskExs[0];
    //console.log('this.taskExs1 ************************* ', this.taskExs1 );

    for (var i = 0; i < this.taskExs.length; i++) {
      this.taskExs[i].questionList.questions = this.taskExs[i].questionList.questions.map(function (item) {
        item.default = _this25.taskData.defaultLabel;
        item.v_id = -1;
        item.open = 0;
        return item;
      });
      this.taskExs[i].questionList.variants = this.taskExs[i].questionList.variants.map(function (item) {
        item.selected = -1;
        item.connectedTo = -1;
        return item;
      });
    }
    //console.log('this.taskExs ************************* ', this.taskExs );
    // console.warn('SelectCtrl:: taskOptions:', this.taskOptions);
    // console.warn('SelectCtrl:: taskExs:', this.taskExs);

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i18 = 0; _i18 < this.taskExs.length; _i18++) {
        this.taskExs[_i18].questionList.variants = _.shuffle(this.taskExs[_i18].questionList.variants);
        // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
      }
    }

    this.showComment = false;

    this.selectChange = function (e, v_id, questIndex, taskIndex) {
      // console.log('select element', v_id, questIndex, taskIndex)
      if (v_id == -1) {
        return;
      }
      if (_this25.state == 2) {
        return;
      }
      // console.log( index )

      // проверяем был ли уже дан ответ на вопрос
      if (_this25.taskExs[taskIndex].questionList.questions[questIndex].v_id != -1) {

        var _v_id = _this25.taskExs[taskIndex].questionList.questions[questIndex].v_id;

        for (var _i19 = 0; _i19 < _this25.taskExs[taskIndex].questionList.variants.length; _i19++) {
          if (_this25.taskExs[taskIndex].questionList.variants[_i19].v_id == _v_id) {
            _this25.taskExs[taskIndex].questionList.variants[_i19].selected = -1;
          }
          break;
        }
      }

      // в вопросе отмечаем какой на него дали ответ
      _this25.taskExs[taskIndex].questionList.questions[questIndex].v_id = v_id;

      // отмечаем, что ответ использован
      for (var _i20 = 0; _i20 < _this25.taskExs[taskIndex].questionList.variants.length; _i20++) {
        if (_this25.taskExs[taskIndex].questionList.variants[_i20].v_id == v_id) {
          _this25.taskExs[taskIndex].questionList.variants[_i20].selected = 1;
          // выводим лейбл ответа
          _this25.taskExs[taskIndex].questionList.questions[questIndex].default = _this25.taskExs[taskIndex].questionList.variants[_i20].label;
        }
      }

      // проверяем везде ли выбрали ответ
      var check = true;
      for (var _i21 = 0; _i21 < _this25.taskExs.length; _i21++) {
        for (var j = 0; j < _this25.taskExs[_i21].questionList.questions.length; j++) {
          if (_this25.taskExs[_i21].questionList.questions[j].v_id == -1) {
            check = false;
            break;
          }
        }
      }

      if (check) {
        _this25.state = 1;
      }

      // можно ли выбирать одни и теже ответы
      if (!_this25.taskExs[taskIndex].sameQ) {
        _this25.filteredList = _this25.getNotSelected(taskIndex);
      }
      _this25.toggleSelect(e, questIndex, taskIndex);

      e.stopPropagation();
    }; // end of selectChange()


    this.checkAnswer = function () {
      // console.log('SelectCtrl:: checkAnswer:')
      if (_this25.userAttempt === _this25.attemptNum) {
        _this25.userAttempt = 0;
      }
      _this25.userAttempt++;
      _this25.state = 2;

      for (var _i22 = 0; _i22 < _this25.taskExs.length; _i22++) {
        for (var j = 0; j < _this25.taskExs[_i22].questionList.questions.length; j++) {

          var thisQuestion = _this25.taskExs[_i22].questionList.questions[j];

          if (_this25.taskData.exs[_i22].questionList.variants[thisQuestion.v_id].q_id != thisQuestion.q_id) {
            // неправильно дан ответ
            if (_this25.userAttempt == _this25.attemptNum && _this25.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this25.taskData.messages[_this25.userAttempt], false);
            return;
          }
        }
      }

      // упражнение верно
      _this25.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this25.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {

      _this25.state = 0;
      // мешаем вопросы
      if (_this25.taskOptions.shuffle) {
        for (var _i23 = 0; _i23 < _this25.taskExs.length; _i23++) {
          _this25.taskExs[_i23].questionList.variants = _.shuffle(_this25.taskExs[_i23].questionList.variants);
          // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
        }
      }
      // this.active = angular.fromJson(angular.toJson(this.taskExs));

      for (var _i24 = 0; _i24 < _this25.taskExs.length; _i24++) {
        for (var j = 0; j < _this25.taskExs[_i24].questionList.questions.length; j++) {
          _this25.taskExs[_i24].questionList.questions[j].default = _this25.taskData.defaultLabel;
          _this25.taskExs[_i24].questionList.questions[j].open = 0;
          _this25.taskExs[_i24].questionList.questions[j].v_id = -1;
        }
        for (var _j4 = 0; _j4 < _this25.taskExs[_i24].questionList.variants.length; _j4++) {
          _this25.taskExs[_i24].questionList.variants[_j4].selected = -1;
        }
      }
      _this25.filteredList = _this25.getNotSelected(-1);
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      console.log('SelectCtrl:: showAnswer:'

      // this.userAttempt = 0;

      );for (var i = 0; i < _this25.taskExs.length; i++) {
        for (var j = 0; j < _this25.taskExs[i].questionList.questions.length; j++) {
          for (var k = 0; k < _this25.taskExs[i].questionList.variants.length; k++) {
            if (_this25.taskExs[i].questionList.questions[j].q_id == _this25.taskExs[i].questionList.variants[k].q_id) {
              _this25.taskExs[i].questionList.questions[j].default = _this25.taskExs[i].questionList.variants[k].label;
              break;
            }
          }
        }
      }
    }; // end of showAnswer()

    this.toggleSelect = function (e, questIndex, taskIndex) {
      // console.log('toggleSelect', questIndex, taskIndex);
      _this25.taskExs[taskIndex].questionList.questions[questIndex].open = !_this25.taskExs[taskIndex].questionList.questions[questIndex].open;
      e.stopPropagation();
    }; // end of toggleSelect()

    this.getNotSelected = function (taskIndex) {
      // console.log('filering::', taskIndex)
      var filtered = [];
      for (var _i25 = 0; _i25 < _this25.taskExs.length; _i25++) {
        filtered[_i25] = [];
        if (_i25 == taskIndex) {
          for (var j = 0; j < _this25.taskExs[_i25].questionList.variants.length; j++) {
            if (_this25.taskExs[_i25].questionList.variants[j].selected < 0) {
              filtered[_i25].push(_this25.taskExs[_i25].questionList.variants[j]);
            }
          }
        } else {
          filtered[_i25] = angular.fromJson(angular.toJson(_this25.taskExs[_i25].questionList.variants));
        }
      }
      return filtered;
    }; // end of getNotSelected()

    //инициализация списка ответов
    this.filteredList = this.getNotSelected(-1);
  }; // end of SelectCtrl()
})();
(function () {
  'use strict';

  TaskSequenceQuestCtrl.$inject = ["$stateParams", "$document", "$element", "staticService", "userService"];
  angular.module('courseApp').controller('TaskSequenceQuestCtrl', TaskSequenceQuestCtrl);

  /* @ngInject */
  function TaskSequenceQuestCtrl($stateParams, $document, $element, staticService, userService) {
    var self = this,
        variantNum = 3,
        // number of variants in blocks
    currentQuestNum = 0; // current question number

    self.taskData = staticService.getData($stateParams, 'exs');

    /* 
    *  self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "exs": {
    *      "taskText": "<p>Какой характеристики не хватает формулировке для того, чтобы стать целью?</p><p>Какой вопрос необходимо задать, чтобы трансформировать данную формулировку в цель?</p><p>Выберите правильный уточняющий вопрос и характеристику. Переход далее осуществляется только при правильном ответе.</p><p>Темным цветом написана формулировка, светлым – цель, которой она должна стать.</p>",
    *      "variant": [{
    *        "final": "Нашему отделу необходимо поднять уровень продаж. ",
    *        "initial": "Необходимо работать более эффективно.",
    *        "characterNum": 0,
    *        "questionNum": 0
    *      }],
    *      "characterList": [
    *        "Четкость, ясность",
    *        "Измеримость",
    *        "Ограниченность во времени",
    *        "Достижимость",
    *        "Актуальность",
    *        "Письменная формулировка",
    *        "Мобилизующий фактор"
    *      ],
    *      "questionList": [
    *        "Кому необходимо работать более эффективно? Что значит «более эффективно»?",
    *        "На сколько процентов необходимо поднять уровень продаж?",
    *        "К какому сроку?",
    *        "Какими путями?",
    *        "Зачем надо работать более эффективно?",
    *        "Как долго надо работать более эффективно?"
    *      ]
    *    }
    *  }
    */

    self.showVariant = false;
    self.show = false;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: true
    };

    self.userAnswer = [];
    self.userAnswer.length = variantNum + 1;
    for (var i = 0; i < self.userAnswer.length; i++) {
      self.userAnswer[i] = {};
      self.userAnswer[i].character = "";
      self.userAnswer[i].characterNum = "";
      self.userAnswer[i].question = "";
      self.userAnswer[i].questionNum = "";
    };

    function getArr(type, arr, num) {
      var newArr = _.shuffle(arr.filter(function (elem, i) {
        return i !== num;
      })),
          randomNum = _.random(0, variantNum);

      newArr.splice(randomNum, 0, arr[num]);
      newArr.length = variantNum + 1;

      self.userAnswer.forEach(function (elem) {
        elem[type + "Num"] = randomNum;
      });
      return newArr;
    };

    self.getVariantList = function (elem, i) {
      return i <= currentQuestNum;
    };

    self.orderByQuest = function (elem, i) {
      return i === currentQuestNum;
    };

    self.getAnswer = function (prop, index) {
      if (prop === "character") {
        self.userAnswer.forEach(function (elem) {
          return elem.character = "";
        });
        self.userAnswer[index].character = index === self.userAnswer[index].characterNum ? true : false;
      } else {
        self.userAnswer.forEach(function (elem) {
          return elem.question = "";
        });
        self.userAnswer[index].question = index === self.userAnswer[index].questionNum ? true : false;
      }
      if (self.userAnswer.filter(function (elem) {
        return elem.character !== "";
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question !== "";
      }).length) {
        self.btnDisabledState.answer = false;
      }
    };

    // check answers
    self.checkAnswer = function () {
      if (self.userAnswer.filter(function (elem) {
        return elem.character === true;
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question === true;
      }).length) {
        if (self.show === false && currentQuestNum + 1 !== self.taskData.variant.length) {
          self.show = true;
          return staticService.showModal('exercise', 'Результат', 'Верно! Следующая цель: ' + self.taskData.variant[currentQuestNum + 1].final + ' Закройте окно и нажмите кнопку "Далее".', true);
        }
        self.show = false;
        if (currentQuestNum + 1 !== self.taskData.variant.length) {
          currentQuestNum++;
          self.userAnswer.forEach(function (elem) {
            return elem.character = "";
          });
          self.userAnswer.forEach(function (elem) {
            return elem.question = "";
          });
          self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
          self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
          self.btnDisabledState.answer = true;
        } else {
          self.btnDisabledState.answer = true;
          self.show = true;
          self.end = true;
          // send data to userService (needs for statistics), query to staticService to show modal with comment
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', 'Верный ответ!', true);
        }
      } else {
        self.show = true;
        self.btnDisabledState.answer = true;
        self.btnDisabledState.restart = false;
        return staticService.showModal('exercise', 'Ваш результат', 'Неверно! Начните заново.', false);
      }
    };

    // restart
    self.removeRestart = function () {
      self.show = false;
      self.btnDisabledState.answer = true;
      self.btnDisabledState.restart = true;
      self.userAnswer.forEach(function (elem) {
        return elem.character = "";
      });
      self.userAnswer.forEach(function (elem) {
        return elem.question = "";
      });
      self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
      self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
    };

    self.removeRestart();
  }
})();
;(function () {
  'use strict';

  SingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSingleChoice', {
    templateUrl: 'js/components/task-single-choice/taskSingleChoiceTmpl.html',
    controller: 'SingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('SingleChoiceCtrl', SingleChoiceCtrl);

  /* @ngInject */
  function SingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this26 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('SingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)
      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;
      console.log('SingleCCtrl:: Answers:', this.questionList);
    } else {
      // Вопрос упражнения
      this.taskText = staticService.getData($stateParams, 'taskText');
      if (this.taskData.shuffle) this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));else this.questionList = staticService.getData($stateParams, 'questionList');
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this26.selectAnswer = function (index) {
        if (_this26.state == 2) {
          return;
        }

        _this26.active.forEach(function (item) {
          item.selected = 0;
        });
        _this26.active[index].selected = 1;
        if (_this26.test) {
          $scope.$emit('myTestState', 1);
        }
        _this26.state = 1;
      };

      _this26.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this26.userAttempt === _this26.attemptNum) {
          _this26.userAttempt = 0;
        }
        _this26.userAttempt++;
        _this26.state = 2;

        for (var i = 0; i < _this26.questionList.length; i++) {
          // console.log('taskSingleChoice:: упражнение не верно')
          if (_this26.questionList[i].right !== _this26.active[i].selected) {
            //упражнение провалено

            if (_this26.userAttempt == _this26.attemptNum && _this26.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this26.taskData.messages[_this26.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this26.taskData.messages[0], true);
      };

      _this26.removeRestart = function () {

        for (var i = 0; i < _this26.active.length; i++) {
          _this26.active[i].selected = false;
        }
        _this26.state = 0;

        if (_this26.taskData.shuffle) _this26.questionList = _.shuffle(_this26.questionList);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i26 = 0; _i26 < _this26.questionList.length; _i26++) {
          _this26.active[_i26].selected = _this26.questionList[_i26].right;
        }
      };
    });
  }
})();

(function () {
  'use strict';

  TaskStrictSortableCtrl.$inject = ["$element", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('TaskStrictSortableCtrl', TaskStrictSortableCtrl);

  /* @ngInject */
  function TaskStrictSortableCtrl($element, $stateParams, staticService, userService) {
    var self = this;

    self.taskData = JSON.parse(angular.toJson(staticService.getData($stateParams, 'data')));
    // console.log('taskData',self.taskData)
    /* 
    * self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "options":{
    *      "attempts": 3,       // кол-во попыток
    *      "shuffle": true,     // мешать ответы?
    *      "showAnswer": true,  // показывать правильный ответ в конце
    *    },
    *    "exs": {
    *      "taskText": "",
    *      "variant": [{
    *        "content": ""
    *      }]
    *    }
    *  }
    */

    // attempt number
    var attemptNum = self.taskData.options.attempts,
        userAttempt = 0;

    self.taskText = self.taskData.exs.taskText;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: false
    };

    angular.element(document).ready(function () {
      var itemList = $($element).find(".sortable-box__item");
      var basketsList = $($element).find(".sortable-box");

      $($element).find('.sortable-box__item').draggable({
        containment: ".sortable-container",
        refreshPositions: true,
        revert: true
      });
      $($element).find('.sortable-box').droppable({
        drop: function drop(event, ui) {
          var overBlock = $(event.target).find('.sortable-box__item'),
              overBlockContent = overBlock.html(),
              prevNumber = ui.draggable.attr("data-number"),
              newNumber = overBlock.attr("data-number"),
              topPos = $(basketsList[prevNumber]).position().top - overBlock.position().top,
              leftPos = $(basketsList[prevNumber]).position().left - overBlock.position().left;

          overBlock.html(ui.draggable.html()).css({ 'z-index': 10000 });
          ui.draggable.html(overBlockContent);
        }
      });
      self.checkAnswer = function () {
        var answerList = $($element).find(".sortable-box__item");

        self.btnDisabledState.restart = false;
        self.btnDisabledState.answer = true;

        userAttempt === attemptNum ? userAttempt = 0 : userAttempt++;

        for (var i = 0; i < answerList.length; i++) {
          // console.log(i, $.trim($(answerList[i]).html().replace(/'/g, '"')));
          // console.log(i, $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"')));
          if ($.trim($(answerList[i]).html().replace(/'/g, '"')) !== $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"'))) {
            self.taskData.exs.variant[i].answer = false;
          } else {
            self.taskData.exs.variant[i].answer = true;
          }
        }
        // console.log('=>',self.taskData.exs.variant.filter((elem) => elem.answer === true).length)
        // console.log('=>',self.taskData.exs.variant.length)
        console.log('=>', userAttempt);
        if (self.taskData.exs.variant.filter(function (elem) {
          return elem.answer === true;
        }).length === self.taskData.exs.variant.length) {
          // верно
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[0], true);
        } else {

          if (userAttempt === attemptNum) {
            showAnswer();
          }

          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[userAttempt], false);
        }
      };

      self.removeRestart = function () {
        self.btnDisabledState.restart = true;
        self.btnDisabledState.answer = false;

        var numberList = _.shuffle(_.range(basketsList.length));
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[numberList[i]].content);
        };
        self.taskData.exs.variant.forEach(function (elem) {
          return elem.answer = "";
        });
      };
      self.removeRestart();

      var showAnswer = function showAnswer() {
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[i].content);
          self.taskData.exs.variant[i].answer = true;
        }
      };
    });
  };
})();
;(function () {
  'use strict';

  SwapListCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskSwapList', {
    templateUrl: 'js/components/task-swap-list/taskSwapListTmpl.html',
    controller: 'SwapListCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListCtrl', SwapListCtrl);

  /* @ngInject */
  function SwapListCtrl($scope, $stateParams, staticService, userService) {
    var _this27 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;
    this.left_questions = [];

    for (var i = 0; i < this.taskExs[0].questionList.length; i++) {

      this.left_questions[i] = this.taskExs[0].questionList[i].phrase;
      console.log("this.left_questions[i] -***********************", this.left_questions[i]);
    }
    console.log("this.left_questions -***********************", this.left_questions);

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i27 = 0; _i27 < this.taskExs.length; _i27++) {
        this.taskExs[_i27].questionList = _.shuffle(this.taskExs[_i27].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this27.userAttempt === _this27.attemptNum) {
        _this27.userAttempt = 0;
      }
      _this27.userAttempt++;
      _this27.state = 2;
      $(".task-swap-list_item").draggable('disable');

      var taskList = document.querySelectorAll('.task-swap-list');

      for (var _i28 = 0; _i28 < _this27.taskData.exs.length; _i28++) {
        var list = taskList[_i28].querySelectorAll('.task-swap-list_item');

        for (var j = 0; j < _this27.taskData.exs[_i28].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this27.taskData.exs[_i28].questionList[j].order) {
            // неправильно дан ответ
            if (_this27.userAttempt == _this27.attemptNum && _this27.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this27.taskData.messages[_this27.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this27.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this27.state = 1;
      _this27.showRight = 0;
      $(".task-swap-list_item").draggable('enable');

      // мешаем вопросы
      if (_this27.taskOptions.shuffle) {
        for (var _i29 = 0; _i29 < _this27.taskExs.length; _i29++) {
          _this27.taskExs[_i29].questionList = _.shuffle(_this27.taskExs[_i29].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this27.showRight = 1;
    };

    angular.element(document).ready(function () {
      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {},
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  }; // end of SwapListCtrl()
})();
;(function () {
  'use strict';

  SwapListSortableCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService", "$timeout"];
  angular.module('courseApp').component('taskSwapListSortable', {
    templateUrl: 'js/components/task-swap-list-sortable/taskSwapListSortableTmpl.html',
    controller: 'SwapListSortableCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListSortableCtrl', SwapListSortableCtrl);

  /* @ngInject */
  function SwapListSortableCtrl($scope, $stateParams, staticService, userService, $timeout) {
    var _this28 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;
    this.left_questions = [];

    for (var i = 0; i < this.taskExs[0].questionList.length; i++) {
      this.left_questions[i] = this.taskExs[0].questionList[i].phrase;
      // console.log("this.left_questions[i] -***********************" , this.left_questions[i])
    }
    // console.log("this.left_questions -***********************" , this.left_questions);


    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i30 = 0; _i30 < this.taskExs.length; _i30++) {
        this.taskExs[_i30].questionList = _.shuffle(this.taskExs[_i30].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this28.userAttempt === _this28.attemptNum) {
        _this28.userAttempt = 0;
      }
      _this28.userAttempt++;
      _this28.state = 2;
      $(".sortable").sortable("option", "disabled", true);
      var taskList = document.querySelectorAll('.task-swap-list__label-container');

      for (var _i31 = 0; _i31 < _this28.taskData.exs.length; _i31++) {
        var list = taskList[_i31].querySelectorAll('.task-swap-list__label-item');

        for (var j = 0; j < _this28.taskData.exs[_i31].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this28.taskData.exs[_i31].questionList[j].order) {
            // неправильно дан ответ
            if (_this28.userAttempt == _this28.attemptNum && _this28.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this28.taskData.messages[_this28.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this28.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this28.state = 1;
      _this28.showRight = 0;

      // Повторная инициализация элемента jQuery после перестроения дерева DOM
      $timeout(function () {
        // console.log("timeout");
        $(".sortable").sortable({
          // containment: ".task-swap-list-sortable",
          placeholder: 'empty-space',
          start: function start(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.add("active");
          },
          stop: function stop(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.remove("active");
          }
        });
      }, 1);

      $(".sortable").sortable("option", "disabled", false);
      if (_this28.userAttempt === _this28.attemptNum) {
        _this28.userAttempt = 0;
      };

      // мешаем вопросы
      if (_this28.taskOptions.shuffle) {
        for (var _i32 = 0; _i32 < _this28.taskExs.length; _i32++) {
          _this28.taskExs[_i32].questionList = _.shuffle(_this28.taskExs[_i32].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this28.showRight = 1;
    };

    // TODO:
    // ready() deprecated, use angular.element(callback) instead of angular.element(document).ready(callback)
    angular.element(document).ready(function () {
      $(function () {
        // Инициализация элемента jQuery
        $(".sortable").sortable({
          // containment: ".task-swap-list-sortable",
          axis: "y",
          placeholder: 'empty-space',
          start: function start(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.add("active");
          },
          stop: function stop(event, ui) {
            console.log(ui.item);
            $timeout(function () {
              ui.item[0].classList.remove("active");
            }, 0);
          }
        });
      });
    });
  } // end of SwapListCtrl()
})();

;(function () {
  'use strict';

  taskTextInput1Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskTextInput1', {
    templateUrl: 'js/components/task-text-input/task-text-input-1/taskTextInput1Tmpl.html',
    controller: 'taskTextInput1Ctrl',
    controllerAs: '$ctrl'
  }).controller('taskTextInput1Ctrl', taskTextInput1Ctrl);

  /* @ngInject */
  function taskTextInput1Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this29 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.taskData = staticService.getData($stateParams, 'data'); // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs))[0]; // arr

    // console.log('taskTextInput1Ctrl::', this.taskData)

    this.userAttempt = 0;
    this.attemptNum = this.taskData.options.attempts;

    this.checkAnswer = function () {
      if (_this29.state == 2) {
        return;
      }

      if (_this29.userAttempt === _this29.attemptNum) {
        _this29.userAttempt = 0;
      }
      _this29.userAttempt++;
      _this29.state = 2;

      var inputs = document.getElementsByClassName('task-input');

      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this29.taskExs.questionList.length; j++) {
        // console.log('taskTextInput1Ctrl:: =>',inputs[j].value,  this.taskExs.questionList[j].label)
        if (inputs[j].value != _this29.taskExs.questionList[j].label) {
          // неправильный ответ
          if (_this29.userAttempt == _this29.attemptNum) {
            // console.log('taskTextInput1Ctrl:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          // to staticService (индекс, заголовок, тело соощения)
          staticService.showModal('exercise', 'Ваш результат', _this29.taskData.messages[_this29.userAttempt], false);
          return;
        }
      }
      // }
      // правильный ответ
      _this29.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this29.taskData.messages[0], true);
    };

    this.removeRestart = function () {
      _this29.state = 1;
      // this.userAttempt = 0;
      var inputs = document.getElementsByClassName('task-input');
      for (var i = 0; i < inputs.length; i++) {
        inputs[i].value = '';
      }
    };

    var showAnswer = function showAnswer() {
      var inputs = document.getElementsByClassName('task-input');
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this29.taskExs.questionList.length; j++) {
        inputs[j].value = _this29.taskExs.questionList[j].label;
      }
      // }
    }; // end of showAnswer()

    // angular.element(document).ready( () => {} )
  }
})();
;(function () {
  'use strict';

  taskTextInput2Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskTextInput2', {
    templateUrl: 'js/components/task-text-input/task-text-input-1/taskTextInput1Tmpl.html',
    controller: 'taskTextInput2Ctrl',
    controllerAs: '$ctrl'
  }).controller('taskTextInput2Ctrl', taskTextInput2Ctrl);

  /* @ngInject */
  function taskTextInput2Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this30 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    this.taskData = staticService.getData($stateParams, 'data'); // obj
    this.taskExs = JSON.parse(angular.toJson(this.taskData.exs))[0]; // arr
    var inputs = document.getElementsByClassName('task-input');
    var inputsLength = inputs.length;
    var inputsLength = 6;
    this.myValue = []; //  текстовые поля ng-model="$ctrl.myValue[i]
    for (var k = 0; k < this.taskExs.questionList.length; k++) {
      this.myValue[k] = "";
    }

    this.userAttempt = 0;
    this.attemptNum = this.taskData.options.attempts;

    this.checkAnswer = function () {
      if (_this30.state == 2) {
        return;
      }

      if (_this30.userAttempt === _this30.attemptNum) {
        _this30.userAttempt = 0;
      }
      _this30.userAttempt++;
      _this30.state = 2;

      var inputs = document.getElementsByClassName('task-input');
      console.log(' inputs =>', inputs[0].value);
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this30.taskExs.questionList.length; j++) {

        console.log('j - ', j, ' inputs[j].value =>', inputs[j].value);
        //console.log('taskTextInput1Ctrl:: =>',inputs[j].value,  this.taskExs.questionList[j].label)
        if (inputs[j].value != _this30.taskExs.questionList[j].label) {
          // неправильный ответ
          if (_this30.userAttempt == _this30.attemptNum) {
            // console.log('taskTextInput1Ctrl:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          // to staticService (индекс, заголовок, тело соощения)
          staticService.showModal('exercise', 'Ваш результат', _this30.taskData.messages[_this30.userAttempt], false);
          return;
        }
      }

      // }
      // правильный ответ
      _this30.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this30.taskData.messages[0], true);
    };

    this.removeRestart = function () {
      _this30.state = 0;
      for (var i = 0; i < inputsLength; i++) {
        inputs[i].value = ''; // обнуляет текстовые поля ввода
        _this30.myValue[i] = ''; // обнуляет текстовые поля ng-model="$ctrl.myValue[i] ng-change - отслежживает их. inputs[i].value и this.myValue[i] это не одно и тоже.
      }
    };

    this.checkA = function () {

      var filledInputField = 0;
      for (var i = 0; i < inputsLength; i++) {
        if (_this30.myValue[i] != '') {
          filledInputField++;
        }
      }
      if (filledInputField == inputsLength) {
        _this30.state = 1;
      }
    };

    var showAnswer = function showAnswer() {
      var inputs = document.getElementsByClassName('task-input');
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this30.taskExs.questionList.length; j++) {
        inputs[j].value = _this30.taskExs.questionList[j].label;
        _this30.myValue[j] = _this30.taskExs.questionList[j].label;
      }
      // }
    }; // end of showAnswer()

    // angular.element(document).ready( () => {} )
  }
})();