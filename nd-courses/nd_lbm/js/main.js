"use strict";

/**
*   пример упражнения singleChoice:
*    {
*      "id": 2,
*      "title": "Упражнение №1",
*      "location": "page02",
*      "hasSound": false,
*      "type": "exercise",
*      "data": {
*        "attempts": 3,  // кол-во попыток
*        "shuffle": true,  // мешать ответы?
*        "showAnswer": false, // показывать правильный ответ в конце
*        "taskText": "Упражнение на одиночный выбор, какой ответ верный?",
*        "questionList": [{
*          "label": "Правильный ответ",
*          "right": 1
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        },{
*          "label": "Неверный ответ",
*          "right": 0
*        }],
*      "messages": ["Правильный ответ!",
*                  "Ответ неверный!"]
*      }
*    }
*
*
*   звук страниц укладывать в папку audio страницы, файл звука должен иметь название:
*   «page-папка главы-папка страницы.mp3» Пример: page-chapter04-page04.mp3
*/
var courseStructure = {
  "course": "Легко ли быть менеджером?",
  "course_name": "lbm_html",
  "description": "Модульный курс для дистанционного обучения",
  "chapters": [{
    "chapter_id": 1,
    "chapter_location": "chapter01",
    "title": "Введение",
    "description": "Введение",
    "pages": [{
      "page_id": 1, //01
      "title": "Легко ли быть менеджером?",
      "location": "page01",
      "hasSound": true,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //02
      "title": "Введение",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //03
      "title": "О чем этот курс",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 1 (intro)
  }, // end of chapter
  {
    "chapter_id": 2,
    "chapter_location": "chapter02",
    "title": "Глава 1",
    "description": "Основные различия между профессиональной и управленченской деятельностью",
    "pages": [{
      "page_id": 1, //04
      "title": "Основные различия между профессиональной и управленченской деятельностью",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //05
      "title": "Определение менеджмента",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //06
      "title": "Три типа менеджмента",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //07
      "title": "Категории руководителей",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //08
      "title": "Низовое, среднее и высшее звено",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //09
      "title": "Задание 1",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "messages": [""],
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Профессиональные виды деятельности"
        }, {
          "id": 1,
          "label": "Управленческие виды деятельности"
        }],
        "questionList": [{
          "label": "Составлять график доставки грузов",
          "right": 0
        }, {
          "label": "Наводить порядок в складских помещениях",
          "right": 0
        }, {
          "label": "Проверять техническое состояние грузовиков, выходящих на линию ",
          "right": 0
        }, {
          "label": "Договариваться с клиентами о переносе сроков доставки грузов ",
          "right": 0
        }, {
          "label": "Составлять спецификацию предстоящих поставок ",
          "right": 0
        }, {
          "label": "Принимать решения о текущем или капитальном ремонте автотранспорта ",
          "right": 0
        }, {
          "label": "Определять, кого из водителей отправить в командировку ",
          "right": 0
        }, {
          "label": "Вести переговоры с поставщиками о предстоящих поставках",
          "right": 0
        }, {
          "label": "Комплектовать заказы для клиентов ",
          "right": 0
        }, {
          "label": "Получать от руководителя задания для всего подразделения ",
          "right": 1
        }, {
          "label": "Распределять задания между подчиненными",
          "right": 1
        }, {
          "label": "Участвовать в совещаниях, которые проводят вышестоящие руководители ",
          "right": 1
        }, {
          "label": "Налаживать взаимодействие внутри подразделения",
          "right": 1
        }, {
          "label": "Следить за соблюдением графика отпусков ",
          "right": 1
        }, {
          "label": "Проводить совещания",
          "right": 1
        }, {
          "label": "Контролировать рабочий процесс в подразделении и результаты работы",
          "right": 1
        }, {
          "label": "Выступать в роли арбитра в спорах или конфликтах в подразделении ",
          "right": 1
        }, {
          "label": "Принимать решения о поощрении и наказании ",
          "right": 1
        }, {
          "label": "Составлять заявки на бюджет ",
          "right": 1
        }],
        "messages": ["Ваш ответ верный! Вы совершенно правильно определили управленческие и профессиональные виды деятельности.", "Ваш ответ неверный. Вы перепутали управленческие и профессиональные виды деятельности.", "И снова ошибка! Сосредоточьтесь и помогите Николаю разобраться, в чем заключается профессиональная, а в чем – управленческая деятельность.", "Увы, вы не справились с заданием. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 7, //10
      "title": "Выводы: В чем заключается труд менеджера",
      "location": "page07",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 8, //11
      "title": "Роли руководителя",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //12
      "title": "Межличностные роли",
      "location": "page09",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 10, //13
      "title": "Информационные роли",
      "location": "page10",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 11, //14
      "title": "Роли по принятию решений",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //15
      "title": "Задание 2",
      "location": "page12",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Роль руководителя (эпизод 1)",
              "q_id": 0
            }],
            "variants": [{
              "label": "Распространитель информации",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Лидер",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Предприниматель",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Лицо организации",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Роль руководителя (эпизод 2)",
              "q_id": 0
            }],
            "variants": [{
              "label": "Распространитель информации",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Лидер",
              "v_id": 1,
              "q_id": 0
            }, {
              "label": "Предприниматель",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Лицо организации",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Роль руководителя (эпизод 3)",
              "q_id": 0
            }],
            "variants": [{
              "label": "Распространитель информации",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Лидер",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Предприниматель",
              "v_id": 2,
              "q_id": 0
            }, {
              "label": "Лицо организации",
              "v_id": 3,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Роль руководителя (эпизод 4)",
              "q_id": 0
            }],
            "variants": [{
              "label": "Распространитель информации",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Лидер",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Предприниматель",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Лицо организации",
              "v_id": 3,
              "q_id": 0
            }]
          }
        }],
        "defaultLabel": "Не выбрана",
        "messages": ["Ваш ответ верный! Вы правильно определили роль, которые должен был реализовать Николай в данной ситуации.", "Вы ошиблись. Посмотрите киноэпизод внимательнее и попробуйте еще раз определить роль, которую должен был реализовать молодой менеджер.", "Где-то допущена ошибка. Попробуйте определить роль снова, но помните, что управленческого опыта Николаю явно не хватает…", "Так какую же роль должен был, но не смог реализовать Николай? Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 13, //16
      "title": "Задание 3",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток; -1 бесконечно
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Почему, на ваш взгляд, Николай не реализовал эти роли?",
          "questionList": [{
            "label": "отдает приоритет более важным делам",
            "right": 0
          }, {
            "label": "не понимает сущности управленческого труда",
            "right": 1
          }, {
            "label": "не хочет перегружать подчиненных лишней информацией",
            "right": 0
          }, {
            "label": "помогает подчиненным приобрести нужные навыки",
            "right": 0
          }, {
            "label": "не осознает многообразия задач руководителя",
            "right": 1
          }]
        }, {
          "taskText": "К чему это может привести?",
          "questionList": [{
            "label": "к срывам в работе",
            "right": 1
          }, {
            "label": "к уважению со стороны подчиненных",
            "right": 0
          }, {
            "label": "к конфликтам с подчиненными",
            "right": 1
          }, {
            "label": "к недовольству руководства",
            "right": 1
          }, {
            "label": "к налаживанию горизонтальных связей между подразделениями",
            "right": 0
          }]
        }],
        "messages": ["Действительно, Николай еще неопытный менеджер и не понимает сущности управленческого труда и задач руководителя. А последствия этого непонимания весьма печальные…", "Вы ошиблись. Николай – менеджер неопытный, еще не разобравшийся в сущности управленческого труда. Попробуйте ответить на вопросы снова.", "Будьте внимательнее. Неопытность Николая может привести к срывам в работе и другим негативным последствиям…", "<p>Вы не справились с заданием.</p><p>Посмотрите правильный ответ.<p>"]
      }
    }, {
      "page_id": 14, //17
      "title": "Задание 4",
      "location": "page14",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Эпизод 1. «Начальство не опаздывает...»",
              "q_id": 0
            }, {
              "label": "Эпизод 2. «Отчет не получается»",
              "q_id": 1
            }, {
              "label": "Эпизод 3. «Коля, выручай!»",
              "q_id": 2
            }],
            "variants": [{
              "label": "Неумение установить новые отношения с прежними коллегами",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Выполнение чужих функций",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Выполнение старых профессиональных обязанностей в ущерб управленческим",
              "v_id": 2,
              "q_id": 2
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Вы совершенно верно определили ошибки, которые допустил Николай как начинающий руководитель.", "Вы неверно определили ошибки, которые допустил Николай как начинающий руководитель. Попробуйте снова!", "И снова ошибка! Ответьте на вопрос еще раз.", "Увы, с заданием вы не справились. Обратите внимание на верный ответ и не делайте типичных ошибок начинающего руководителя."]
      }
    }, {
      "page_id": 15, //18
      "title": "Типичные ошибки начинающих руководителей. Первая ошибка",
      "location": "page15",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 16, //19
      "title": "Соотношение профессиональных и управленческих обязанностей в деятельности руководителя",
      "location": "page16",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //20
      "title": "Типичные ошибки начинающих руководителей. Вторая ошибка",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //21
      "title": "Типичные ошибки начинающих руководителей. Третья ошибка",
      "location": "page18",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 2
  }, // end of chapter
  {
    "chapter_id": 3,
    "chapter_location": "chapter03",
    "title": "Глава 2",
    "description": "Цикл управленченской деятельности",
    "pages": [{
      "page_id": 1, //22
      "title": "Цикл управленческой деятельности",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //23
      "title": "Функции руководителя",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //24
      "title": "Связующие процессы",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //25
      "title": "Задание 5",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "videoPoster": "img/video-01.png",
        "videoUrl": "video/r1.mp4",
        "videoWidth": 640,
        "videoHeight": 480,
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Нет"
        }, {
          "id": 1,
          "label": "Да"
        }],
        "questionList": [{
          "label": "Планировать… Что тут особенно планировать? Это просто…",
          "right": 0
        }, {
          "label": "Организовывать… тоже никого не надо, все знают, что им делать.",
          "right": 0
        }, {
          "label": "Мотивировать – это дело руководства: пусть зарплату повышают.",
          "right": 0
        }, {
          "label": "А вот контролировать – это нужно.",
          "right": 1
        }, {
          "label": "Надо наказывать почаще, а то избаловались, все на начальство сваливают.",
          "right": 0
        }],
        "messages": ["Действительно, Николай высказал много спорных суждений, которые вряд ли помогут ему эффективно управлять коллективом.", "Николай высказал много ошибочных суждений. Попробуйте выполнить задание снова.", "И снова ошибка! Учтите, что Николай – менеджер неопытный, и многие его суждения неверные.", "Давайте посмотрим, где же в своих рассуждениях ошибся Николай."]
      }
    }, {
      "page_id": 5, //26
      "title": "Навыки менеджера",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }] // end of pages array in chapter 3
  }, // end of chapter
  {
    "chapter_id": 4,
    "chapter_location": "chapter04",
    "title": "Глава 3",
    "description": "Основные области деятельности руководителя",
    "pages": [{
      "page_id": 1, //27
      "title": "Основные области деятельности руководителя",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //28
      "title": "Множественность задач",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //29
      "title": "Основные области деятельности руководителя",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //30
      "title": "Задание 6",
      "location": "page04",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Неправильно"
        }, {
          "id": 1,
          "label": "Правильно"
        }],
        "questionList": [{
          "label": "Повышение уровня продаж",
          "right": 0
        }, {
          "label": "Поддержание ассортимента товара на складе",
          "right": 0
        }, {
          "label": "Регулярный контроль выхода машин на линию",
          "right": 0
        }, {
          "label": "Переписка с производством",
          "right": 0
        }, {
          "label": "Набор и увольнение персонала",
          "right": 0
        }, {
          "label": "Обеспечение финансовой стабильности предприятия",
          "right": 0
        }, {
          "label": "Организация продаж",
          "right": 1
        }, {
          "label": "Организация работы склада",
          "right": 1
        }, {
          "label": "Контроль работы гаража",
          "right": 1
        }, {
          "label": "Формирование заказов продукции",
          "right": 1
        }, {
          "label": "Управление составом персонала",
          "right": 1
        }, {
          "label": "Управление финансовыми потоками",
          "right": 1
        }],
        "messages": ["Ваш ответ верный! Вы совершенно точно отметили правильные и неправильные формулировки областей деятельности.", "Где-то закралась ошибка. Попробуйте еще раз распределить правильные и неправильные формулировки областей деятельности.", "Правильные формулировки областей деятельности помогают структурировать работу руководителя. Попробуйте пройти задание еще раз.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 5, //31
      "title": "Как выделить основные области деятельности?",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //32
      "title": "Записная книжка. Задание 1",
      "location": "page06",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "useColumns": true, "maxlength": 200,
        "titles": ['Наименование области деятельности', 'Краткий перечень видов деятельности, входящих в эту область'],
        "messages": [""]
      }
    }] // end of pages array in chapter 4
  }, // end of chapter
  {
    "chapter_id": 5,
    "chapter_location": "chapter05",
    "title": "Глава 4",
    "description": "Функции управления и навыки менеджера",
    "pages": [{
      "page_id": 1, //33
      "title": "Функции управления и навыки менеджера",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //34
      "title": "Планирование как функция управления",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //35
      "title": "Принципы эффективного планирования",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //36
      "title": "Навык целеполагания",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //37
      "title": "Характеристики целей",
      "location": "page05",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 6, //38
      "title": "Задание 7",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": false, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "taskType": "textInput",
          "questionList": [{
            "label": "участия"
          }, {
            "label": "точности"
          }]
        }],
        "messages": ["Ваш ответ верный! Действительно, Николай нарушил принцип участия, потому что не привлек к планированию непосредственных подчиненных, и принцип точности, ведь краткосрочные планы должны быть конкретными.", "Вы неверно определили принципы, нарушенные молодым менеджером. Учтите, что к разработке планов нужно привлекать их непосредственных исполнителей, а краткосрочные планы должны быть прописаны в деталях.", "И снова ошибка! Принципы эффективного планирования вами определены неверно", "Посмотрите правильный ответ и начните учиться на чужих ошибках."]
      }
    }, {
      "page_id": 7, //39
      "title": "Задание 8",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "messages": ["Все верно. Действительно, цели, которые поставил Николай перед подчиненными, не отвечают большинству необходимых характеристик.", "Неверно. Попробуйте снова определить характеристики и учтите, что цели, поставленные Николаем перед подчиненными, были весьма расплывчатыми и недостижимыми.", "И снова ошибка. Цели не соответствуют большинству характеристик.", "И снова ошибка. Обратите внимание на правильный ответ."]
      }

    }, {
      "page_id": 8, //40
      "title": "Задание 9",
      "location": "page08",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "exs": {
          "taskText": "<p>Перед вами некорректная формулировка. Выберите правильный уточняющий вопрос и характеристику, чтобы формулировка стала целью.</p>",
          "variant": [{
            "final": "Нашему отделу необходимо поднять уровень продаж. ",
            "initial": "Необходимо работать более эффективно.",
            "characterNum": 0,
            "questionNum": 0
          }, {
            "final": "Нашему отделу необходимо поднять уровень продаж на 20%.",
            "initial": "Нашему отделу необходимо поднять уровень продаж.",
            "characterNum": 1,
            "questionNum": 1
          }, {
            "final": "Нашему отделу необходимо поднять уровень продаж на 20% к концу следующего квартала.",
            "initial": "Нашему отделу необходимо поднять уровень продаж на 20%.",
            "characterNum": 2,
            "questionNum": 2
          }, {
            "final": "Нашему отделу необходимо поднять уровень продаж на 20% к концу следующего квартала за счет привлечения новых клиентов.",
            "initial": "Нашему отделу необходимо поднять уровень продаж на 20% к концу следующего квартала.",
            "characterNum": 3,
            "questionNum": 3
          }],
          "characterList": ["Четкость, ясность", "Измеримость", "Ограниченность во времени", "Достижимость", "Актуальность", "Письменная формулировка", "Мобилизующий фактор"],
          "questionList": ["Кому необходимо работать более эффективно? Что значит «более эффективно»?", "На сколько процентов необходимо поднять уровень продаж?", "К какому сроку?", "Какими путями?", "Зачем надо работать более эффективно?", "Как долго надо работать более эффективно?"]
        },
        "messages": [""]
      }
    }, {
      "page_id": 9, //41
      "title": "Записная книжка. Задание 2",
      "location": "page09",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 12,
        "useColumns": true,
        "maxlength": 200,
        "titles": ['Наименование области деятельности', 'Цель деятельности'],
        "messages": [""]
      }
    }, {
      "page_id": 10, //42
      "title": "Управление по целям",
      "location": "page10",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 11, //43
      "title": "Этапы управления по целям",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //44
      "title": "Задание 10",
      "location": "page12",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1,
        "taskText": "",
        "questionList": [{
          "label": "Распределение задач между ключевыми сотрудниками",
          "right": 0
        }, {
          "label": "Совместная выработка целей руководителем и подчиненными",
          "right": 1
        }, {
          "label": "Систематический контроль, измерение и оценка работы и результатов",
          "right": 0
        }, {
          "label": "Разработка реалистичных планов достижения",
          "right": 1
        }, {
          "label": "Корректирующие меры для достижения запланированных результатов",
          "right": 1
        }],
        "messages": ["Ваш ответ верный! Планы Николая нереалистичны, потому что выработаны отдельно от непосредственных исполнителей.", "Вы не совсем верно отметили аспекты концепции управления, которые проигнорировал Николай. Попробуйте ответить снова.", "Вы ошиблись. Учтите, что у Николая плохая обратная связь с подчиненными, поэтому и планы из области фантастики.", "Так какой же правильный ответ?"]
      }
    }, {
      "page_id": 13, //45
      "title": "Практические рекомендации",
      "location": "page13",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 14, //46
      "title": "Ограничения в использовании управления по целям (УПЦ)",
      "location": "page14",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 15, //47
      "title": "Дерево целей",
      "location": "page15",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 16, //48
      "title": "Дерево целей функциональных подсистем по уровням (на примере производства)",
      "location": "page16",
      "hasSound": true,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 17, //49
      "title": "Правила построения дерева целей",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //50
      "title": "Задание 11",
      "location": "page18",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Николай разбил достижение желаемого результата на 2 этапа: Снизить срывы графика поставок с 20 до 10 % к концу квартала. Добиться снижения срывов до 2 % к концу года. Правильно ли он поступил?",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Николай привлек к разработке планов развития сотрудников своего отдела. Имело ли это смысл, ведь все задачи он мог сформулировать сам?",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }],
        "messages": ["Ваш ответ совершенно верный! Действительно, Николай поступил правильно в обеих ситуациях.", "Неверно! Учтите, что чем ближе цель, тем больше она мобилизует, а спущенные сверху цели никому не интересны.", "Увы, вы снова ошиблись. Будьте внимательнее!", "Посмотрите на правильный ответ. Николай поступил верно!"]
      }
    }, {
      "page_id": 19, //51
      "title": "Цели развития",
      "location": "page19",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 20, //52
      "title": "Процесс разработки плана развития",
      "location": "page20",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 21, //53
      "title": "Задание 12",
      "location": "page21",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«Каждый пятый заказ задерживается, график нарушается, склад лихорадит, клиенты недовольны».",
              "q_id": 0
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 3
            }]
          }
        }, {
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«А ведь поставки будут расти, значит, объем работы только увеличится… (поэтому и срывов тоже будет больше).",
              "q_id": 1
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 3
            }]
          }
        }, {
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«Снизить до конца года срывы поставок до 2 %».",
              "q_id": 2
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 3
            }]
          }
        }, {
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«Наладить оперативную связь с торговыми представителями».",
              "q_id": 3
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 3
            }]
          }
        }, {
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«Наладить учет движения автомобилей».",
              "q_id": 4
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 4
            }]
          }
        }, {
          "taskText": "Выберите правильные утверждения из списка",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "«Изменить порядок складирования готовой продукции».",
              "q_id": 5
            }],
            "variants": [{
              "label": "Анализ",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Прогноз",
              "v_id": 1,
              "q_id": 1
            }, {
              "label": "Цели",
              "v_id": 2,
              "q_id": 2
            }, {
              "label": "Планы развития",
              "v_id": 3,
              "q_id": 5
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Отлично! Вы совершенно верно определили этапы разработки планов развития.", "Вы неверно определили этапы разработки планов развития. Попробуйте выполнить задание снова.", "Этапы графика развития вновь обозначены неверно. Будьте внимательнее!", "Так где же анализ, прогнозы, цели и планы развития? Посмотрите на правильный ответ."]
      }
    }, {
      "page_id": 22, //54
      "title": "Пример динамического дерева целей для организации",
      "location": "page22",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 23, //55
      "title": "Задание 13",
      "location": "page23",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": {
          "taskText": "Постройте модель дерева целей отдела логистики, опираясь на формулировки, которые мог бы использовать Николай.",
          "variant": [{
            "content": "<img class='desktop' src='pages/chapter05/page23/img/1-01.png' alt='К концу года снизить срывы графика поставок с 20 до 2%' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/1-01s.png' alt='К концу года снизить срывы графика поставок с 20 до 2%' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/2-01.png' alt='Ускорить формирование каждого заказа на 15%' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/2-01s.png' alt='Ускорить формирование каждого заказа на 15%' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/3-01.png' alt='Наладить оперативную связь с торговыми представителями' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/3-01s.png' alt='Наладить оперативную связь с торговыми представителями' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/4-01.png' alt='Снизить число аварий (поломок) грузовиков на 15%' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/4-01s.png' alt='Снизить число аварий (поломок) грузовиков на 15%' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/5-01.png' alt='Изменить порядок складирования готовой продукции' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/5-01s.png' alt='Изменить порядок складирования готовой продукции' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/6-01.png' alt='Внедрить корпоративную мобильную связь с выходом на систему управленческого учета' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/6-01s.png' alt='Внедрить корпоративную мобильную связь с выходом на систему управленческого учета' width='100%' height='100%'>"
          }, {
            "content": "<img class='desktop' src='pages/chapter05/page23/img/7-01.png' alt='Ввести показатель «безаварийное вождение» в систему премирования водителей' width='100%' height='100%'><img class='mobile' src='pages/chapter05/page23/img/7-01s.png' alt='Ввести показатель «безаварийное вождение» в систему премирования водителей' width='100%' height='100%'>"
          }]
        },
        "messages": ["Вы совершенно верно построили модель дерева целей отдела логистики.", "Вы нарушили правила построения дерева целей. Выполните задание еще раз.", "Вернитесь к предыдущему слайду и проанализируйте пример построения динамического дерева целей.", "Увы, с заданием вы не справились. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 24, //56
      "title": "Организация как функция управления. Навык делегирования полномочий",
      "location": "page24",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 25, //57
      "title": "«Золотое правило» руководства",
      "location": "page25",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 26, //58
      "title": "Преимущества делегирования полномочий (ДП)",
      "location": "page26",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 27, //59
      "title": "Принципы делегирования полномочий",
      "location": "page27",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 28, //60
      "title": "Правила делегирования полномочий",
      "location": "page28",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 29, //61
      "title": "Задание 14",
      "location": "page29",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Нет"
        }, {
          "id": 1,
          "label": "Да"
        }],
        "questionList": [{
          "label": "Проблема, требующая разрешения, до конца не понятна работнику.",
          "right": 0
        }, {
          "label": "Сложность задания превосходит уровень квалификации и компетентности работника («Я не очень-то знаю, как это делать, но могу и взяться»).",
          "right": 0
        }, {
          "label": "Работник в общих чертах представляет, что руководитель ждет от его работы.",
          "right": 0
        }, {
          "label": "Границы полномочий размыты.",
          "right": 0
        }, {
          "label": "Ответственность определяется как само собой разумеющееся, детально не оговаривается.",
          "right": 0
        }, {
          "label": "Работнику в деталях не сообщается, как будут оцениваться конечные результаты его работы, если он постарается выполнить ее отлично, хорошо, удовлетворительно.",
          "right": 0
        }, {
          "label": "Задания выдаются неравномерными дозами, частично.",
          "right": 0
        }, {
          "label": "Одно и то же задание передается нескольким сотрудникам одновременно (для надежности).",
          "right": 0
        }, {
          "label": "Работнику обеспечивается ограниченный доступ к необходимой информации.",
          "right": 0
        }, {
          "label": "Руководитель предлагает подчиненному пути решения проблемы.",
          "right": 0
        }, {
          "label": "Делегирование полномочий предусматривает снижение требовательности и ответственности менеджера.",
          "right": 0
        }, {
          "label": "Руководитель часто вмешивается в работу сотрудника, постоянно контролирует исполнение задания.",
          "right": 0
        }, {
          "label": "Конечные результаты работы сотрудника используются его руководителем либо анонимно, либо в личных целях.",
          "right": 0
        }, {
          "label": "Отбирать право на принятие решения у подчиненного, если он допускает ошибки. ",
          "right": 0
        }, {
          "label": "Принимать решения через голову своего помощника.",
          "right": 0
        }, {
          "label": "Решения о том, что и кому поручить, принимаются сразу после составления рабочего плана.",
          "right": 1
        }, {
          "label": "Задачи делегируются заблаговременно.",
          "right": 1
        }, {
          "label": "Работник точно знает, чего от него ждет руководитель.",
          "right": 1
        }, {
          "label": "Руководитель оповещает других сотрудников о новых полномочиях их коллеги.",
          "right": 1
        }, {
          "label": "Определяется персональная ответственность работника за конкретные конечные результаты.",
          "right": 1
        }, {
          "label": "Работник точно знает, как будут оценены конечные результаты его работы, если он выполнит ее отлично, хорошо или удовлетворительно.",
          "right": 1
        }, {
          "label": "Руководитель предлагает задания только тем, кто профессионально готов и  согласен их принять.",
          "right": 1
        }, {
          "label": "Задания передаются целиком, чтобы работник мог видеть весь фронт работ.",
          "right": 1
        }, {
          "label": "Задания распределяются равномерно по контрольным срокам.",
          "right": 1
        }, {
          "label": "Руководитель гарантирует необходимые виды поддержки и помощи по запросу работника.",
          "right": 1
        }, {
          "label": "Оценку деятельности подчиненного в условиях делегирования полномочий следует производить по общим результатам деятельности.",
          "right": 1
        }, {
          "label": "Руководитель не вмешивается в работу сотрудника, предпочитая учить его на допущенных ошибках.",
          "right": 1
        }, {
          "label": "Работник представляет в вышестоящих инстанциях конечные результаты своей работы либо сам, либо вместе с руководителем.",
          "right": 1
        }, {
          "label": "Важно укреплять авторитет помощников, объясняя коллегам их новые права.",
          "right": 1
        }, {
          "label": "Помощнику разъясняется ошибка, неправильное решение он отменяет сам.",
          "right": 1
        }],
        "messages": ["Ваш ответ верный. Вы отлично разобрались в принципах и правилах делегирования полномочий.", "Где-то закралась ошибка. Принципы делегирования полномочий вами нарушены.", "Правила делегирования полномочий вами определены неверно. Может быть, стоит повторить пройденный материал?", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 30, //62
      "title": "Задание 15",
      "location": "page30",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "qCount": -1, // -1 все вопросы
        "questionList": [{
          "label": "Решения о том, что и кому поручить, принимаются сразу после составления плана",
          "right": 0
        }, {
          "label": "Работник точно знает, чего от него ждет руководитель",
          "right": 1
        }, {
          "label": "Руководитель оповещает других сотрудников о новых полномочиях их коллеги",
          "right": 1
        }, {
          "label": "Определяется персональная ответственность работника за конкретные конечные результаты",
          "right": 1
        }, {
          "label": "Работник точно знает, как будут оценены конечные результаты его работы, если он выполнит ее отлично, хорошо или удовлетворительно",
          "right": 1
        }, {
          "label": "Задания передаются целиком, чтобы работник мог видеть весь фронт работ",
          "right": 1
        }, {
          "label": "Руководитель гарантирует необходимые виды поддержки и помощи по запросу работника",
          "right": 1
        }, {
          "label": "Руководитель не вмешивается в работу сотрудника, предпочитая учить его на допущенных ошибках",
          "right": 0
        }, {
          "label": "Задачи делегируются заблаговременно",
          "right": 0
        }],
        "messages": ["Вы верно отметили те правила делегирования, которые нарушил руководитель. Задания подчиненному лучше озвучивать целиком, должны быть выработаны четкие критерии оценки, а также оказана необходимая поддержка.", "Вы неверно ответили на вопрос. Возможно, Николай нарушил другие правила делегирования полномочий, либо вы отметили не все нарушения.", "И снова ошибка. Альберт не знал в полной мере, чего же от него ждет руководитель… ", "Делегирование полномочий – главный инструмент процесса управления. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 31, //63
      "title": "Задание 16",
      "location": "page31",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Используя матрицу A, B, C, D.",
          "questionList": [{
            "label": "Сообщите суть задания (желаемые результаты).",
            "order": 0
          }, {
            "label": "Обрисуйте общую ситуацию в связи с заданием.",
            "order": 1
          }, {
            "label": "Определите нормативы, по которым вы будете оценивать исполнение задания. Оговорите формы и методы контроля. Что последует за невыполнением задания?",
            "order": 2
          }, {
            "label": "Предоставьте полномочия для выполнения задания без постоянных помех или отказов со стороны других работников.",
            "order": 3
          }, {
            "label": "Предоставьте ресурсы: деньги, обучение, совет и т. д. Окажите поддержку.",
            "order": 4
          }, {
            "label": "Убедитесь, что работник понимает, что ему поручено. Получите согласие.",
            "order": 5
          }]
        }],
        "messages": ["Вы расставили действия руководителя в нужном порядке. Теперь вы наверняка справитесь с делегированием полномочий.", "Последовательность делегирования полномочий нарушена. Посмотрите киноэпизод более внимательно.", "Делегирование – важный инструмент процесса управления. Сосредоточьтесь и выполните задание еще раз.", "Увы, с заданием вы не справились. Обратите внимание на правильный ответ и не нарушайте больше последовательность действий при делегировании."]
      }
    }, {
      "page_id": 32, //64
      "title": "Задание 17",
      "location": "page32",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": 14, // -1 все вопросы
        "taskText": "Выберите из перечня дел только те виды деятельности, которые нельзя, на ваш взгляд, делегировать.",
        "questionList": [{
          "label": "Мелкие дела",
          "right": 0
        }, {
          "label": "Контроль результатов работы",
          "right": 1
        }, {
          "label": "Сбор информации",
          "right": 0
        }, {
          "label": "Воспитательная беседа с нарушившим правила сотрудником",
          "right": 1
        }, {
          "label": "Подготовительная работа для реализации важного проекта",
          "right": 0
        }, {
          "label": "Неожиданно возникшие дела",
          "right": 0
        }, {
          "label": "Ликвидация кризиса при остром дефиците времени",
          "right": 1
        }, {
          "label": "Личные поручения",
          "right": 0
        }, {
          "label": "Представительство на совещаниях у вышестоящего руководства",
          "right": 0
        }, {
          "label": "Дела, в которых ошибка недопустима",
          "right": 1
        }, {
          "label": "Важная задача, которую подчиненный горит желанием выполнить",
          "right": 0
        }, {
          "label": "Исправление допущенных руководителем ошибок",
          "right": 1
        }, {
          "label": "Установление целей",
          "right": 1
        }],
        "messages": ["Вы отлично разбираетесь в том, какие виды деятельности можно делегировать, а какие нельзя.", "Вы неверно указали действия, которые нельзя делегировать. Вспомните принципы делегирования полномочий и учтите, что нельзя делегировать особенно важные дела, которые влияют на стратегию развития, а также контроль результатов работы.", "Ваш ответ неверный. Выполните задание еще раз.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 33, //65
      "title": "Задание 18",
      "location": "page33",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Подчиненный не считает нужным исправлять чужие ошибки",
          "right": 1
        }, {
          "label": "Подчиненный перегружен",
          "right": 0
        }, {
          "label": "Подчиненный избегает дополнительной ответственности",
          "right": 0
        }, {
          "label": "Подчиненному не хватает информации и ресурсов",
          "right": 0
        }, {
          "label": "Подчиненный боится критики",
          "right": 0
        }],
        "messages": ["Действительно, никому не хочется исправлять чужие ошибки. В данной ситуации Николай должен был сам поговорить с начальником производства.", "Вы неверно указали причину, по которой подчиненный не захотел выполнять поручение руководителя. Так будет ли собран заказ в срок?", "И все же причина отказа подчиненного в другом. У вас есть еще одна попытка, чтобы найти верное решение.", "Николай совершил ошибку, а исправить ее попросил подчиненного, поэтому и нарвался на отказ."]
      }
    }, {
      "page_id": 34, //66
      "title": "Как нейтрализовать сопротивление подчиненных?",
      "location": "page34",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 35, //67
      "title": "Привычка во всем полагаться на руководителя и нежелание самому принимать решения",
      "location": "page35",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 36, //68
      "title": "Страх критики за ошибки",
      "location": "page36",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 37, //69
      "title": "Отсутствие информации и ресурсов",
      "location": "page37",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 38, //70
      "title": "Избыток рабочих заданий и обязанностей",
      "location": "page38",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 39, //71
      "title": "Отсутствие добавочных стимулов для принятия дополнительной ответственности",
      "location": "page39",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 40, //72
      "title": "Формирование новой системы поведения",
      "location": "page40",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 41, //73
      "title": "Мотивация как функция управления",
      "location": "page41",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 42, //74
      "title": "Мотивация и решение задач",
      "location": "page42",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 43, //75
      "title": "Механизм мотивации",
      "location": "page43",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 44, //76
      "title": "Потребности. Содержательные теории мотивации",
      "location": "page44",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 45, //77
      "title": "Иерархия потребностей Маслоу",
      "location": "page45",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 46, //78
      "title": "Задание 19",
      "location": "page46",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "В самовыражении и личностном росте"
        }, {
          "id": 1,
          "label": "В уважении и признании заслуг"
        }, {
          "id": 2,
          "label": "В принадлежности и причастности"
        }, {
          "id": 3,
          "label": "В безопасности и защищенности"
        }, {
          "id": 4,
          "label": "Физиологические"
        }],
        "questionList": [{
          "label": "Увлечены содержанием работы, инициативны, берутся за трудные задания. ",
          "right": 0
        }, {
          "label": "Отдают предпочтение творческой работе, любят учиться, стремятся работать на максимуме своих возможностей.",
          "right": 0
        }, {
          "label": "Не всегда доводят дело до конца, не любят рутину.",
          "right": 0
        }, {
          "label": "Не любят правил, не любят начальников, ценят независимость.",
          "right": 0
        }, {
          "label": "Могут быть критично настроены по отношению к самой организации, не боятся быть в оппозиции.",
          "right": 0
        }, {
          "label": "Упорно защищают свою точку зрения.",
          "right": 0
        }, {
          "label": "Чувствительны к оценкам руководства, стремятся быть лучшими, демонстрируют свои достижения.",
          "right": 1
        }, {
          "label": "Придают большое значение престижу в одежде, выборе машины, условиях работы. ",
          "right": 1
        }, {
          "label": "Ориентируются в этом на общепризнанное мнение.",
          "right": 1
        }, {
          "label": "Стремятся к общению, объединению в профессиональные или неформальные группы.",
          "right": 2
        }, {
          "label": "Получают удовольствие от командных игр.",
          "right": 2
        }, {
          "label": "Любят делиться своим мнением, перед тем как принять решение.",
          "right": 2
        }, {
          "label": "Выступают против перемен, если это беспокоит группу.",
          "right": 2
        }, {
          "label": "Одеваются чисто и аккуратно, боясь отрицательных оценок окружающих.",
          "right": 3
        }, {
          "label": "Имеют давно установившиеся личные привычки, не любят их нарушать.",
          "right": 3
        }, {
          "label": "Любят вдаваться в подробности, разъясняя свою позицию.",
          "right": 3
        }, {
          "label": "Избегают волнующих ситуаций, любят порядок, четкие правила, ясные структуры.",
          "right": 3
        }, {
          "label": "Мало интересуются содержанием работы.",
          "right": 4
        }, {
          "label": "Концентрируют свое внимание на оплате, условиях труда, удобстве рабочего места.",
          "right": 4
        }],
        "messages": ["Вы отлично усвоили иерархию потребностей Маслоу и верно определили доминирующие типы потребностей.", "Вы не совсем четко понимаете разницу между доминирующими типами потребностей. Попробуйте распределить особенности поведения людей снова.", "Где-то закралась ошибка. Изучите внимательнее иерархию потребностей Маслоу.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 47, //79
      "title": "Двухфакторная теория мотивации Герцберга",
      "location": "page47",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 48, //80
      "title": "Гигиенические факторы и мотиваторы",
      "location": "page48",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 49, //81
      "title": "Задание 20",
      "location": "page49",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какие потребности актуализированы у Виктора?",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "С точки зрения Николая?",
              "q_id": 0
            }, {
              "label": "С точки зрения Андрея Михайловича?",
              "q_id": 1
            }],
            "variants": [{
              "label": "Самовыражение",
              "v_id": 0,
              "q_id": 1
            }, {
              "label": "Признание и уважение",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Принадлежность и причастность",
              "v_id": 2,
              "q_id": -1
            }, {
              "label": "Защищенность и безопасность",
              "v_id": 3,
              "q_id": -1
            }, {
              "label": "Физиологические потребности",
              "v_id": 4,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "Маслоу считает зарплату мотивирующим фактором, Герцберг – гигиеническим. Чью позицию разделяют герои фильма?",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Николай",
              "q_id": 0
            }, {
              "label": "Андрей Михайлович",
              "q_id": 1
            }],
            "variants": [{
              "label": "Позиция Маслоу",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Позиция Герцберга",
              "v_id": 1,
              "q_id": 1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Действительно, с точки зрения Николая, у Виктора доминируют физиологические потребности, а Андрей Михайлович считает, что сотрудник нуждается в самовыражении, интересной задаче. Николай придерживается позиции Маслоу в отношении зарплаты, а Андрей Михайлович – позиции Герцберга, потому что не согласен с тем, что Виктора можно мотивировать зарплатой.", "Вы ошиблись в определении факторов, которые влияют на Виктора с точки зрения обоих руководителей.", "Безусловно, оба руководителя занимают противоположные точки зрения в отношении Виктора. Николай считает материальное стимулирование основным. Попробуйте ответить на вопросы еще раз.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 50, //82
      "title": "Концепция потребностей Макклеланда",
      "location": "page50",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 51, //83
      "title": "Задание 21",
      "location": "page51",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какая из потребностей, по Макклеланду, актуализирована у Лены?",
          "questionList": [{
            "label": "Потребность во власти",
            "right": 0
          }, {
            "label": "Потребность в успехе",
            "right": 0
          }, {
            "label": "Потребность в причастности",
            "right": 1
          }]
        }, {
          "taskText": "Какую потребность Николай, как руководитель, должен развивать у Лены?",
          "questionList": [{
            "label": "Потребность во власти",
            "right": 0
          }, {
            "label": "Потребность в успехе",
            "right": 1
          }, {
            "label": "Потребность в причастности",
            "right": 0
          }]
        }],
        "messages": ["Вы правы! Лена – человек безынициативный, боящийся брать на себя ответственность. Ей необходимо быть «в центре событий», ощущать свою причастность. Но чтобы развиваться, девушке необходима потребность добиваться успеха.", "Вы ошиблись. Учтите, что Лена – неуверенный в себе человек, который хочет ощущать себя частью важного процесса.", "Ваш ответ неверный. Посмотрите киноэпизод еще раз.", "Лене необходимо развивать в себе потребность к успеху, потому что пока она – «человек толпы», боящийся принимать решения."]
      }
    }, {
      "page_id": 52, //84
      "title": "Мотивы. Виды стимулирования труда",
      "location": "page52",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 53, //85
      "title": "Внутренние мотивы",
      "location": "page53",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 54, //86
      "title": "Внешние мотивы",
      "location": "page54",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 55, //87
      "title": "Задание 22",
      "location": "page55",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Самовыражение",
          "right": 0
        }, {
          "label": "Признание и выражение",
          "right": 0
        }, {
          "label": "Принадлежность и причастность",
          "right": 0
        }, {
          "label": "Защищенность и безопасность",
          "right": 1
        }, {
          "label": "Физиологические потребности",
          "right": 0
        }],
        "messages": ["Ваш ответ совершенно верный! Людмила Петровна беспокоится за свою дочь, которая остается дома одна.", "Вы отметили не тот уровень потребностей, который выражен у Людмилы Петровны. За кого же женщина так сильно переживает?", "Вы снова ошиблись. Подумайте, что больше всего волнует Людмилу Петровну, и ответьте на вопрос еще раз.", "Людмила Петровна беспокоится за свою дочь, которая остается дома одна. У женщины актуализированы потребности в защищенности и безопасности."]
      }
    }, {
      "page_id": 56, //88
      "title": "Задание 23",
      "location": "page56",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какой из гигиенических факторов (по таблице Герцберга) вызывал чувство неудовлетворенности у Людмилы Петровны?",
          "taskType": "single",
          "questionList": [{
            "label": "Политика фирмы и администрации",
            "right": 0
          }, {
            "label": "Условия работы",
            "right": 1
          }, {
            "label": "Заработная плата",
            "right": 0
          }, {
            "label": "Межличностные отношения с начальством, коллегами, подчиненными",
            "right": 0
          }, {
            "label": "Степень непосредственного контроля над работой",
            "right": 0
          }]
        }, {
          "taskText": "Удалось ли Николаю перевести внешнюю мотивацию во внутреннюю?",
          "taskType": "single",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }],
        "messages": ["Ваш ответ верный! Людмиле Петровне важен отпуск в летнее время.", "Вы ошиблись. Чувство неудовлетворенности у Людмилы Петровны вызвал другой фактор.", "Это неверный ответ. Попробуйте снова.", "Людмиле Петровне важен отпуск в летнее время, то есть ее не устраивали условия работы."]
      }
    }, {
      "page_id": 57, //89
      "title": "Способы стимулирования",
      "location": "page57",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 58, //90
      "title": "Требования к стимулированию труда",
      "location": "page58",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 59, //91
      "title": "Задание 24",
      "location": "page59",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1, // -1 все вопросы
        "taskText": "Посмотрите киноэпизоды. Какие из требований к стимулированию сотрудников не были соблюдены Николаем?",
        "questionList": [{
          "label": "Комплексность",
          "right": 1
        }, {
          "label": "Дифференцированность",
          "right": 1
        }, {
          "label": "Гибкость и оперативность",
          "right": 0
        }, {
          "label": "Открытость и последовательность",
          "right": 1
        }, {
          "label": "Своевременность",
          "right": 0
        }],
        "messages": ["Вы совершенно правы. Николай не разъяснил сотрудникам, за что «срезал» премию, не было индивидуального и комплексного подхода к решению вопроса.", "Вы неверно ответили на вопрос. При распределении премии Николай допустил ряд ошибок, явно не желая разбираться в этом вопросе. Так какие же принципы стимулирования сотрудников были нарушены?", "И снова ошибка. Возможно, вам стоит посмотреть киноэпизод снова.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 60, //92
      "title": "Экономическое (материальное) стимулирование",
      "location": "page60",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 61, //93
      "title": "Базовая оплата и премии",
      "location": "page61",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 62, //94
      "title": "Выводы: Особенности материального стимулирования",
      "location": "page62",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 63, //95
      "title": "Записная книжка. Задание 3",
      "location": "page63",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 2,
        "useColumns": true,
        "maxlength": 565,
        "titles": ['Какие требования к экономическому стимулированию не соблюдаются в вашем подразделении?', 'Что вы могли бы предложить для повышения эффективности экономического стимулирования в вашем подразделении, учитывая имеющиеся ресурсы?'],
        "messages": [""]
      }
    }, {
      "page_id": 64, //96
      "title": "Организационные способы мотивации",
      "location": "page64",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 65, //97
      "title": "Записная книжка. Задание 4",
      "location": "page65",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 2,
        "useColumns": true,
        "maxlength": 565,
        "titles": ['Какие организационные способы мотивации вы как руководитель используете в своей управленческой деятельности?', 'Опишите конкретные шаги, которые вы предполагаете предпринять для усиления мотивации своих сотрудников с помощью организационных методов?'],
        "messages": [""]
      }
    }, {
      "page_id": 66, //98
      "title": "Моральные способы стимулирования",
      "location": "page66",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 67, //99
      "title": "Задание 25",
      "location": "page67",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Альберт",
              "q_id": 0
            }],
            "variants": [{
              "label": "Порицание",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Похвала",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Николай",
              "q_id": 0
            }],
            "variants": [{
              "label": "Порицание",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Похвала",
              "v_id": 1,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Какая мотивация, на ваш взгляд, эффективнее?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Положительная",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Отрицательная",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Все верно. Признание и похвала являются самыми сильными мотиваторами.", "Увы, ваш ответ неверный. Имейте в виду, что хотя концентрация на отрицательном может уменьшить случаи нежелательного поведения, но это не означает, что желательное поведение непременно участится.", "Вы снова ошиблись. Похвалить при движении к цели важнее, чем после ее достижения.", "С заданием вы не справились. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 68, //100
      "title": "Поведение (действия). Процессуальные теории мотивации",
      "location": "page68",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 69, //101
      "title": "Модель мотивации Портера–Лоулера",
      "location": "page69",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 70, //102
      "title": "Задание 26",
      "location": "page70",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какие из факторов условий трудового процесса привели к хорошему результату?",
          "taskType": "multi",
          "questionList": [{
            "label": "Ценность вознаграждения",
            "right": 1
          }, {
            "label": "Оценка вероятности связи «усилия» и «вознаграждения»",
            "right": 1
          }, {
            "label": "Затраченные усилия",
            "right": 1
          }, {
            "label": "Способности и характер",
            "right": 1
          }, {
            "label": "Роль работника",
            "right": 0
          }, {
            "label": "Результаты",
            "right": 1
          }, {
            "label": "Вознаграждение",
            "right": 1
          }]
        }, {
          "taskText": "Какую мотивацию – отрицательную или положительную – использовал Николай?",
          "taskType": "single",
          "questionList": [{
            "label": "положительная",
            "right": 0
          }, {
            "label": "отрицательная",
            "right": 1
          }]
        }],
        "messages": ["В данном случае действия руководителя оправданы: выбор типа мотивации и стиля руководства зависит от личности подчиненного, его опыта, профессиональных качеств и особенностей конкретной ситуации.", "При мотивации подчиненной были затронуты другие факторы. Попробуйте снова.", "Задание действительно непростое. Внимательнее пересмотрите киноэпизод.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 71, //103
      "title": "Задание 27",
      "location": "page71",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "В самовыражении и личностном росте"
        }, {
          "id": 1,
          "label": "В уважении и признании заслуг"
        }, {
          "id": 2,
          "label": "В принадлежности и причастности"
        }, {
          "id": 3,
          "label": "В безопасности и защищенности"
        }, {
          "id": 4,
          "label": "Физиологические"
        }],
        "questionList": [{
          "label": "Свобода действий без мелочной опеки.",
          "right": 0
        }, {
          "label": "Возможности для обучения и развития.",
          "right": 0
        }, {
          "label": "Предоставление сложной и важной работы, требующей использования всего потенциала работника.",
          "right": 0
        }, {
          "label": "Делегирование полномочий.",
          "right": 0
        }, {
          "label": "Общение с сотрудником как с равным, профессионалом. ",
          "right": 1
        }, {
          "label": "Положительная обратная связь, делегирование дополнительных прав и полномочий.",
          "right": 1
        }, {
          "label": "Повышение уровня компетентности через обучение.",
          "right": 1
        }, {
          "label": "Публичное признание заслуг.",
          "right": 1
        }, {
          "label": "Возможность общения, в том числе на совещаниях.",
          "right": 2
        }, {
          "label": "Сформулированные цели команды.",
          "right": 2
        }, {
          "label": "Вознаграждения, подчеркивающие общие усилия.",
          "right": 2
        }, {
          "label": "Совместные тренинги, общие празднования знаменательных для организации событий и дат. ",
          "right": 2
        }, {
          "label": "Информирование о долгосрочных целях.",
          "right": 3
        }, {
          "label": "Частая обратная связь.",
          "right": 3
        }, {
          "label": "Введение надежной системы социального страхования.",
          "right": 3
        }, {
          "label": "Применение ясных и справедливых правил регулирования деятельности. ",
          "right": 3
        }, {
          "label": "Нет принятия рискованных решений.",
          "right": 3
        }, {
          "label": "Обеспечение нормальными  условиями труда.",
          "right": 4
        }, {
          "label": "Заработная плата, позволяющая удовлетворить на приемлемом уровне потребности работников.",
          "right": 4
        }, {
          "label": "Достаточно времени для отдыха и восстановления сил.",
          "right": 4
        }],
        "messages": ["Вы отлично усвоили, какие виды стимулирования использовать для сотрудников с разными типами доминирующих потребностей.", "Увы, стимулировать сотрудников с разными типами доминирующих потребностей вам не удалось. Сосредоточьтесь и попробуйте еще раз.", "И снова ошибка.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 72, //104
      "title": "Задание 28",
      "location": "page72",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "videoPoster": "img/video-01.png",
        "videoUrl": "video/r1.mp4",
        "videoWidth": 640,
        "videoHeight": 480,
        "markers": [{
          "id": 2, // эквивалентно ответу
          "label": "Экономические методы стимулирования"
        }, {
          "id": 1,
          "label": "Моральные способы стимулирования"
        }, {
          "id": 0,
          "label": "Организационные способы мотивации"
        }],
        "questionList": [{
          "label": "Заработная плата",
          "right": 2
        }, {
          "label": "Премии",
          "right": 2
        }, {
          "label": "Бонусы/тринадцатая зарплата",
          "right": 2
        }, {
          "label": "Одобрение",
          "right": 1
        }, {
          "label": "Поддержка",
          "right": 1
        }, {
          "label": "Уважение и доверие",
          "right": 1
        }, {
          "label": "Внимание к личности и интересам",
          "right": 1
        }, {
          "label": "Сочувствие",
          "right": 1
        }, {
          "label": "Похвала",
          "right": 1
        }, {
          "label": "Мотивация целями",
          "right": 0
        }, {
          "label": "Мотивация участием в делах фирмы",
          "right": 0
        }],
        "messages": ["Вы верно отметили методы стимулирования, которые были применены в отделе логистики.", "Где-то произошла ошибка. Попробуйте еще раз отметить методы, примененные в отделе логистики.", "Работа в отделе логистики заметно улучшилась. Какие же методы стимулирования применило руководство? ", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 73, //105
      "title": "Этапы воздействия на трудовую мотивацию работника",
      "location": "page73",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 74, //106
      "title": "Пять шагов",
      "location": "page74",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 75, //107
      "title": "Записная книжка. Задание 5",
      "location": "page75",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 1,
        "useColumns": false,
        "maxlength": 565,
        "titles": ['', ''],
        "messages": [""]
      }
    }, {
      "page_id": 76, //108
      "title": "Контроль как функция управления",
      "location": "page76",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 77, //109
      "title": "Задание 29",
      "location": "page77",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "qCount": 10, // -1 все вопросы
        "questionList": [{
          "label": "Создается впечатление, что руководитель не доверяет исполнителю.",
          "right": 1
        }, {
          "label": "Демонстрируется зависимость исполнителя от руководителя.",
          "right": 1
        }, {
          "label": "Контроль ограничивает действия, сковывает инициативу, подавляет творчество.",
          "right": 0
        }, {
          "label": "Руководитель специально выискивает ошибки.",
          "right": 0
        }, {
          "label": "Контроль осуществляется не вовремя, когда проверять еще нечего.",
          "right": 1
        }, {
          "label": "Результаты контроля, особенно положительные, не доводятся до исполнителя.",
          "right": 0
        }, {
          "label": "Замечания, особенно негативные, выносятся на всеобщее обсуждение.",
          "right": 0
        }, {
          "label": "Контроль бывает слишком детализирован, избыточен.",
          "right": 1
        }, {
          "label": "Контроль ради проформы отнимает время у исполнителя и подрывает авторитет руководителя.",
          "right": 1
        }, {
          "label": "Некорректная форма контроля унижает исполнителя.",
          "right": 0
        }, {
          "label": "Контролируют людей, а не процесс.",
          "right": 1
        }, {
          "label": "Контроль давит психологически, не дает сосредоточиться, держит исполнителя в напряжении.",
          "right": 0
        }, {
          "label": "Иногда руководитель обладает более низкой компетенцией, чем исполнитель, но придерживается жесткой позиции при выполнении функции контроля.",
          "right": 0
        }, {
          "label": "Руководитель не может адекватно оценивать результаты работы.",
          "right": 0
        }, {
          "label": "Руководитель необъективно, предвзято относится к подчиненным.",
          "right": 0
        }, {
          "label": "Руководитель заранее отрицательно настроен на любой результат.",
          "right": 0
        }, {
          "label": "Контроль осуществляют сразу несколько руководителей, предъявляются разные требования к результатам работы.",
          "right": 0
        }, {
          "label": "Руководитель не формулирует предварительно требования к работе.",
          "right": 1
        }, {
          "label": "У подчиненного отсутствует возможность отстаивать свою позицию.",
          "right": 0
        }],
        "messages": ["Вы привели верную аргументацию. Действительно, избыточный и формальный контроль может только навредить рабочему процессу, подорвать самооценку исполнителя.", "Попробуйте выбрать другие аргументы, более подходящие героям фильма.", "Безусловно, чрезмерный контроль скорее вреден, чем полезен, и может привести к недовольству подчиненных. Но какие именно аргументы могли бы привести герои фильма?", "Перед вами – правильный ответ."]
      }
    }, {
      "page_id": 78, //110
      "title": "Записная книжка. Задание 6",
      "location": "page78",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 2,
        "useColumns": true,
        "maxlength": 550,
        "titles": ['Какие из этих пунктов могли бы назвать ваши подчиненные? Если затрудняетесь ответить на этот вопрос, проведите анонимное анкетирование.', 'Если подчиненные «отвергают» контроль, то…'],
        "messages": [""]
      }
    }, {
      "page_id": 79, //111
      "title": "Нужен ли контроль?",
      "location": "page79",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 80, //112
      "title": "Для чего необходим контроль",
      "location": "page80",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 81, //113
      "title": "Виды контроля",
      "location": "page81",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 82, //114
      "title": "Задание 30",
      "location": "page82",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток, -1 бесконечное кол-во
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "«Работайте лучше»",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }, {
          "taskText": "«Необходимо снизить на 10 % срывы графика поставок к концу текущего квартала»",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }],
        "messages": ["Все верно! Стандарты должны иметь четкие критерии по времени и конкретным показателям.", "Ваш ответ неверный. Подумайте и выполните задание снова, учитывая, что стандарты должны иметь четкие критерии.", "И снова ошибка. Будьте внимательнее!", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 83, //115
      "title": "Задание 31",
      "location": "page83",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Виктору",
          "questionList": [{
            "label": "Да",
            "right": 1
          }, {
            "label": "Нет",
            "right": 0
          }]
        }, {
          "taskText": "Лене",
          "questionList": [{
            "label": "Да",
            "right": 0
          }, {
            "label": "Нет",
            "right": 1
          }]
        }],
        "messages": ["Совершенно верно! Управление по отклонениям уместно в отношении квалифицированных и мотивированных сотрудников.", "Попробуйте ответить снова. Управление по отклонениям уместно в отношении квалифицированных и мотивированных сотрудников.", "И снова ошибка. Будьте внимательнее!", "И снова ошибка. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 84, //116
      "title": "Элементы текущего контроля",
      "location": "page84",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 85, //117
      "title": "Задание 32",
      "location": "page85",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "Что менеджеру психологически осуществить труднее?",
        "questionList": [{
          "label": "устранить отклонение (изменить действия подчиненных)",
          "right": 0
        }, {
          "label": "пересмотреть стандарты",
          "right": 1
        }],
        "messages": ["Менеджеру надо признать, что на этапе планирования и выработки стандартов им были допущены ошибки.", "Вы ошиблись. Психологически менеджеру сложнее осуществить другое действие…", "И снова ошибка. Будьте внимательнее!", "И снова ошибка. Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 86, //118
      "title": "Задание 33",
      "location": "page86",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Эпизод 1",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Какой вид контроля осуществляет Николай?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Предварительный",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Итоговый",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Текущий",
              "v_id": 2,
              "q_id": 0
            }]
          }
        }, {
          "taskText": "",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Что предпринял менеджер? ",
              "q_id": 0
            }],
            "variants": [{
              "label": "Корректирову действий",
              "v_id": 0,
              "q_id": 0
            }, {
              "label": "Изменение стандартов",
              "v_id": 1,
              "q_id": -1
            }]
          }
        }, {
          "taskText": "Эпизод 2",
          "sameQ": true, // можно ли выбирать одни и теже ответы
          "questionList": {
            "questions": [{
              "label": "Какой вид контроля осуществляет Николай, обзванивая подчиненных?",
              "q_id": 0
            }],
            "variants": [{
              "label": "Текущий",
              "v_id": 0,
              "q_id": -1
            }, {
              "label": "Итоговый",
              "v_id": 1,
              "q_id": -1
            }, {
              "label": "Предварительный",
              "v_id": 2,
              "q_id": 0
            }]
          }
        }],
        "defaultLabel": "Не выбран",
        "messages": ["Николай ввел стандарт (ежедневные отчеты) для реализации текущего контроля. Обзванивая подчиненных, он осуществляет предварительный контроль с целью соблюдения установленного стандарта.", "Вы неверно определили вид контроля в данной ситуации. Попробуйте ответить на вопрос еще раз.", "И снова ошибка.", "Николай ввел стандарт (ежедневные отчеты) для реализации текущего контроля. Обзванивая подчиненных, он осуществляет предварительный контроль с целью соблюдения установленного стандарта."]
      }
    }, {
      "page_id": 87, //119
      "title": "Рекомендации по организации эффективного контроля работы подчиненных",
      "location": "page87",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 88, //120
      "title": "Записная книжка. Задание 7",
      "location": "page88",
      "hasSound": false,
      "type": "note_page",
      "data": {
        "task_fields": 2,
        "useColumns": true,
        "maxlength": 550,
        "titles": ['Какие рекомендации по организации эффективного контроля вы планируете ввести в свою управленческую практику?', 'Составьте план, включающий конкретные шаги, который поможет вам реализовать эти рекомендации.'],
        "messages": [""]
      }
    }] // end of pages array in chapter 5
  }, {
    "chapter_id": 6,
    "chapter_location": "chapter06",
    "title": "Глава 5",
    "description": "Связующие процессы управленческого цикла",
    "pages": [{
      "page_id": 1, //121
      "title": "Связующие процессы управленческого цикла",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //122
      "title": "Виды связующих процессов",
      "location": "page02",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 3, //123
      "title": "Коммуникация",
      "location": "page03",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 4, //124
      "title": "Виды коммуникаций",
      "location": "page04",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 5, //125
      "title": "Задание 34",
      "location": "page05",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "qCount": -1, // -1 все вопросы
        "taskText": "Какие из этих целей вам кажутся наиболее важными и строго обязательными?",
        "questionList": [{
          "label": "Поставить конкретные задачи по выполнению работы",
          "right": 1
        }, {
          "label": "Передать информацию о принятых в данной организации процедурах и практике",
          "right": 1
        }, {
          "label": "Обеспечить информацией, касающейся смысла исполняемой работы",
          "right": 1
        }, {
          "label": "Проинформировать подчиненных о качестве их работы (обратная связь)",
          "right": 1
        }, {
          "label": "Предоставить идеологическую информацию для облегчения восприятия целей",
          "right": 1
        }],
        "messages": ["Нередко руководители ограничиваются только постановкой задач и передачей информации о процедурах, что отрицательно воздействует на деятельность организации. Однако если люди знают, почему им поручена данная работа и как она связана с подсистемой, то в большинстве случаев работают более эффективно и лучше понимают общие цели и задачи организации.", "Вы отметили не все обязательные цели нисходящих коммуникаций.", "Целей нисходящих коммуникаций больше. Выполните задание снова.", "Важны и строго обязательны все перечисленные цели нисходящих коммуникаций."]
      }
    }, {
      "page_id": 6, //126
      "title": "Задание 35",
      "location": "page06",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Поставить конкретные задачи по выполнению работы",
          "right": 0
        }, {
          "label": "Передать информацию о принятых в данной организации процедурах и практике",
          "right": 0
        }, {
          "label": "Обеспечить информацией, касающейся смысла исполняемой работы",
          "right": 0
        }, {
          "label": "Проинформировать подчиненных о качестве их работы (обратная связь)",
          "right": 0
        }, {
          "label": "Предоставить идеологическую информацию для облегчения восприятия целей",
          "right": 1
        }],
        "messages": ["В большинстве организаций нисходящие коммуникации носят директивный характер и полностью доминируют над восходящими. Это нередко приводит не только к дефициту информации, но и к самообману руководителей относительно реального положения дел.", "Вы ошиблись. Николай проигнорировал другую цель нисходящей коммуникации.", "Общение руководителя с подчиненными в этом сюжете носило явно директивный характер. Какую же цель Николай игнорировал?", "Так какую же цель нисходящей коммуникации игнорировал Николай? Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 7, //127
      "title": "Задание 36",
      "location": "page07",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какие коммуникации инициирует Николай в ходе первого собрания?",
          "questionList": [{
            "label": "нисходящие",
            "right": 1
          }, {
            "label": "восходящие",
            "right": 0
          }]
        }, {
          "taskText": "...в ходе второго собрания?",
          "questionList": [{
            "label": "нисходящие",
            "right": 0
          }, {
            "label": "восходящие",
            "right": 1
          }]
        }],
        "messages": ["Вы отлично разобрались в нисходящих и восходящих коммуникациях!", "Где-то допущена ошибка. На втором собрании Николай был более мягок с подчиненными и ждал от них совета…", "И снова ошибка. Будьте внимательнее!", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 8, //128
      "title": "Создание восходящих коммуникаций",
      "location": "page08",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 9, //129
      "title": "Обратная связь",
      "location": "page09",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 10, //130
      "title": "Задание 37",
      "location": "page10",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Эпизод 1",
          "questionList": [{
            "label": "Правильно выбрать место и время (осуществлять обратную связь по горячим следам, вести разговор один на один)",
            "right": 1
          }, {
            "label": "Говорить о конкретном случае",
            "right": 0
          }, {
            "label": "Не обобщать и не вешать «ярлыки»",
            "right": 1
          }, {
            "label": "Описать желаемое поведение",
            "right": 1
          }, {
            "label": "Предложить помощь",
            "right": 1
          }]
        }, {
          "taskText": "Эпизод 2",
          "questionList": [{
            "label": "Правильно выбрать место и время (осуществлять обратную связь по горячим следам, вести разговор один на один)",
            "right": 1
          }, {
            "label": "Говорить о конкретном случае",
            "right": 1
          }, {
            "label": "Не обобщать и не вешать «ярлыки»",
            "right": 1
          }, {
            "label": "Описать желаемое поведение",
            "right": 1
          }, {
            "label": "Предложить помощь",
            "right": 1
          }]
        }],
        "messages": ["Вы совершенно верно отметили правила, которые были нарушены в первом эпизоде и соблюдены во втором.", "Вы неверно ответили на вопрос. Вспомните правила эффективной обратной связи руководителя с подчиненными.", "И снова ошибка. Помните, что осуществляя обратную связь, руководитель должен быть позитивным.", "Посмотрите правильный ответ."]
      }
    }, {
      "page_id": 11, //131
      "title": "Принятие решений",
      "location": "page11",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 12, //132
      "title": "Как принимаются решения?",
      "location": "page12",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 13, //133
      "title": "Задание 38",
      "location": "page13",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "taskText": "",
        "questionList": [{
          "label": "Интуитивное решение",
          "right": 0
        }, {
          "label": "Решение, основанное на суждении и опыте",
          "right": 1
        }, {
          "label": "Рациональное решение",
          "right": 0
        }],
        "messages": ["Выбор Николая был основан на знаниях и опыте.", "Ваш ответ неверный. Николай принял другой тип решения.", "И снова ошибка. Попробуйте внимательнее проанализировать решение менеджера.", "Обратите внимание на правильный ответ. Выбор Николая был основан на знаниях и опыте."]
      }
    }, {
      "page_id": 14, //134
      "title": "Задание 39",
      "location": "page14",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Недостатки"
        }, {
          "id": 1,
          "label": "Достоинства"
        }],
        "questionList": [{
          "label": "Потеря возможных альтернативных решений",
          "right": 0
        }, {
          "label": "Высокий процент ошибок",
          "right": 0
        }, {
          "label": "Быстрота",
          "right": 1
        }, {
          "label": "Оригинальность",
          "right": 1
        }],
        "messages": ["Вы совершенно верно отметили достоинства и недостатки интуитивного типа процесса принятия решений. ", "Не все достоинства интуитивного типа процесса принятия решения вы определили верно. Попробуйте еще раз!", "Так какие же достоинства и недостатки присущи интуитивному типу процесса принятия решений? Будьте внимательнее и выполните задание снова.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 15, //135
      "title": "Задание 40",
      "location": "page15",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Недостатки"
        }, {
          "id": 1,
          "label": "Достоинства"
        }],
        "questionList": [{
          "label": "Потеря возможных альтернативных решений",
          "right": 0
        }, {
          "label": "Устаревшие подходы",
          "right": 0
        }, {
          "label": "Быстрота",
          "right": 1
        }, {
          "label": "Проверенность практикой ",
          "right": 1
        }, {
          "label": "Реализуемость",
          "right": 1
        }],
        "messages": ["Вы совершенно верно отметили достоинства и недостатки типа процесса принятия решений, основанного на суждениях и опыте. ", "Не все достоинства процесса принятия решения, основанного на суждениях и опыте, вы определили верно. Попробуйте еще раз!", "Так какие же достоинства и недостатки присущи типу процесса принятия решений, основанному на суждениях и опыте? Будьте внимательнее и выполните задание снова.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 16, //136
      "title": "Задание 41",
      "location": "page16",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "attempts": 3, // кол-во попыток: -1 бесконечно
        "shuffle": true, // мешать ответы?
        "showAnswer": true, // показывать правильный ответ в конце
        "useVideo": false, // для упражнения taskMarkerChoice: будет ли в блоке видео
        "qCount": 6, // сколько ответов будет видно на странице
        "markers": [{
          "id": 0, // эквивалентно ответу
          "label": "Недостатки"
        }, {
          "id": 1,
          "label": "Достоинства"
        }],
        "questionList": [{
          "label": "Временные затраты",
          "right": 0
        }, {
          "label": "Низкий процент ошибок",
          "right": 1
        }, {
          "label": "Взвешенность",
          "right": 1
        }, {
          "label": "Обоснованность",
          "right": 1
        }, {
          "label": "Соответствие ситуации",
          "right": 1
        }, {
          "label": "Реализуемость",
          "right": 1
        }],
        "messages": ["Вы совершенно верно отметили достоинства и недостатки рационального типа процесса принятия решений. ", "Не все достоинства рационального типа процесса принятия решения вы определили верно. Попробуйте еще раз!", "Так какие же достоинства и недостатки присущи рациональному типу процесса принятия решений? Будьте внимательнее и выполните задание снова.", "Обратите внимание на правильный ответ."]
      }
    }, {
      "page_id": 17, //137
      "title": "Привлечение подчиненных к процессу принятия решений",
      "location": "page17",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 18, //138
      "title": "Задание 42",
      "location": "page18",
      "hasSound": false,
      "type": "exercise",
      "data": {
        "options": {
          "attempts": 3, // кол-во попыток
          "shuffle": true, // мешать ответы?
          "showAnswer": true // показывать правильный ответ в конце
        },
        "exs": [{
          "taskText": "Какой вариант использовал Николай при принятии решения о премировании?",
          "questionList": [{
            "label": "Руководитель принимает решение и сообщает результаты подчиненным, если это необходимо.",
            "right": 1
          }, {
            "label": "Руководитель принимает решение и сообщает, почему его принял.",
            "right": 2
          }, {
            "label": "Руководитель принимает решение, но интересуется мнением подчиненных, приветствует их вопросы, получая, таким образом, возможность проверить решение и в случае необходимости изменить его.",
            "right": 0
          }, {
            "label": "Руководитель принимает решение и представляет группе на доработку.",
            "right": 0
          }, {
            "label": "Руководитель излагает суть проблемы, спрашивает, какие будут предложения, и, выслушав их, принимает решение.",
            "right": 0
          }, {
            "label": "Руководитель излагает проблему и просит группу принять решение, оставляя за собой право выбора и утверждения варианта.",
            "right": 0
          }, {
            "label": "Руководитель излагает проблему и принимает решение группы.",
            "right": 0
          }]
        }],
        "messages": ["Да, таким распределением премии Николай вызвал недовольство подчиненных. Люди всегда должны понимать, за что их наказывают или поощряют.", "Ваш ответ неверный. Будьте внимательнее, ведь распределение премии существенно влияет на качество работы и мотивацию подчиненных.", "И снова ошибка. Безусловно, распределение премии – вещь директивная и должна распределяться руководителем. Но люди имеют право знать, за что их наказывают или поощряют.", "А вот какой был правильный ответ."]
      }
    }] // end of pages array in chapter 6
  }, {
    "chapter_id": 7,
    "chapter_location": "chapter07",
    "title": "Итоговый тест",
    "description": "Итоговый тест",
    "pages": [{
      "page_id": 1, //139
      "title": "Итоговый тест",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page",
      "messages": [""]
    }, {
      "page_id": 2, //140
      "title": "Итоговый тест",
      "location": "page02",
      "hasSound": false,
      "type": "test",
      "data": {
        "messages": [""]
      }
    }] // end of pages array in chapter 7
  }, {
    "chapter_id": 8,
    "chapter_location": "chapter08",
    "title": "Заключение",
    "description": "Заключение",
    "pages": [{
      "page_id": 1, //141
      "title": "Заключение",
      "location": "page01",
      "hasSound": false,
      "type": "simple_page"
    }] // end of pages array in final chapter
  }] // end of chapters array
};

var testStructure = {
  "tests": [{
    "testId": 0,
    "caption": "final_test",
    "type": "section",
    "groups": [{
      "caption": "group1",
      "qUse": "all",
      "questions": [
      // {
      //   "question":"Определите, какая задача соответствует определенному типу менеджмента:",
      //   "score":-1,
      //   "status":"notanswered",
      //   "type": "single",
      //   "answers":[]
      // },
      {
        "question": "Какие роли менеджера относятся к межличностным?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Лицо организации",
          "right": true
        }, {
          "label": "Связной",
          "right": true
        }, {
          "label": "Лидер",
          "right": true
        }, {
          "label": "Приемник информации",
          "right": false
        }, {
          "label": "Представитель",
          "right": false
        }, {
          "label": "Предприниматель",
          "right": false
        }, {
          "label": "Устранитель нарушений",
          "right": false
        }]
      }, {
        "question": "Отметьте информационные роли менеджера.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Лицо организации",
          "right": false
        }, {
          "label": "Лидер",
          "right": false
        }, {
          "label": "Приемник информации",
          "right": true
        }, {
          "label": "Передатчик информации",
          "right": true
        }, {
          "label": "Представитель",
          "right": false
        }, {
          "label": "Предприниматель",
          "right": false
        }, {
          "label": "Распределитель ресурсов",
          "right": false
        }, {
          "label": "Переговорщик",
          "right": false
        }]
      }, {
        "question": "Выберите роли менеджера по принятию решений.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Лидер",
          "right": false
        }, {
          "label": "Приемник информации",
          "right": false
        }, {
          "label": "Представитель",
          "right": false
        }, {
          "label": "Предприниматель",
          "right": true
        }, {
          "label": "Устранитель нарушений",
          "right": true
        }, {
          "label": "Распределитель ресурсов",
          "right": true
        }, {
          "label": "Переговорщик",
          "right": true
        }]
      },
      // {
      //   "question":"Впишите в управленческий цикл функции управления.",
      //   "score":-1,
      //   "status":"notanswered",
      //   "type": "single",
      //   "answers":[]
      // },
      // {
      //   "question":"Заполните пробелы (или «раскройте скобки»)",
      //   "score":-1,
      //   "status":"notanswered",
      //   "type": "single",
      //   "answers":[]
      // },
      {
        "question": "Правильно сформулированная цель должна иметь семь характеристик: быть достижимой, четкой, ограниченной во времени, сформулированной письменно, актуальной... Дополните список двумя недостающими характеристиками.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "измеримой",
          "right": true
        }, {
          "label": "абстрактной",
          "right": false
        }, {
          "label": "проверенной",
          "right": false
        }, {
          "label": "мобилизующей",
          "right": true
        }, {
          "label": "тонизирующей",
          "right": false
        }]
      }, {
        "question": "При реализации системы управления по целям устанавливают цели для выполнения работы и развития:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "руководители",
          "right": false
        }, {
          "label": "руководители совместно с подчиненными",
          "right": true
        }, {
          "label": "сами подчиненные",
          "right": false
        }]
      }, {
        "question": "При управлении по целям интегрируются и реализуются:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Организационные и групповые цели.",
          "right": false
        }, {
          "label": "Организационные и индивидуальные цели.",
          "right": false
        }, {
          "label": "Организационные, групповые и индивидуальные цели.",
          "right": true
        }, {
          "label": "Индивидуальные и групповые цели.",
          "right": false
        }]
      }, {
        "question": "Первый этап процесса управления по целям – выработка ключевых результатов деятельности подразделения. Нормативное число ключевых результатов:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "От 3 до 5.",
          "right": false
        }, {
          "label": "От 4 до 6.",
          "right": true
        }, {
          "label": "От 6 до 8.",
          "right": false
        }]
      }, {
        "question": "Функция планирования отвечает на вопрос «ЧТО?», а функция организации –…",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "С какой целью?",
          "right": false
        }, {
          "label": "За что?",
          "right": false
        }, {
          "label": "Кто?",
          "right": true
        }, {
          "label": "Почему?",
          "right": false
        }, {
          "label": "Как?",
          "right": true
        }, {
          "label": "Когда?",
          "right": false
        }]
      }, {
        "question": "Закончите фразу: «Делегирование означает передачу прав и полномочий лицу, которое…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "хочет их принять",
          "right": false
        }, {
          "label": "обязано их принять в силу должностной инструкции",
          "right": false
        }, {
          "label": "принимает на себя ответственность за их выполнение",
          "right": true
        }]
      }, {
        "question": "Фиксированная ответственность – это принцип делегирования полномочий, в соответствии с которым…",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Определяется оптимальное число подчиненных для одного руководителя.",
          "right": false
        }, {
          "label": "Масштабы ответственности не превышают индивидуальных возможностей сотрудника.",
          "right": false
        }, {
          "label": "Делегируются только полномочия, но не управленческая ответственность.",
          "right": true
        }, {
          "label": "Сотрудник получает задание и отвечает за их выполнение только перед одним начальником.",
          "right": false
        }]
      }, {
        "question": "Закончите фразу: «Чтобы развить у подчиненных самостоятельность, надо приучить их приходить не с проблемой, а с…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "собранной информацией",
          "right": false
        }, {
          "label": "подготовленными вопросами",
          "right": false
        }, {
          "label": "проектом решения",
          "right": true
        }]
      }, {
        "question": "Система мотивации сотрудников должна решать три серьезные задачи. Для решения какой из перечисленных ниже задач компании стремятся поддерживать конкурентоспособный уровень заработной платы?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Удержание сотрудников в организации.",
          "right": true
        }, {
          "label": "Повышение результативности и эффективности работы.",
          "right": false
        }, {
          "label": "Обеспечение преданности (приверженности) сотрудников данной компании.",
          "right": false
        }]
      }, {
        "question": "Закончите фразу: «Потребность – это чувство…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "необходимости изменить ситуацию",
          "right": false
        }, {
          "label": "желания действовать в определенном направлении",
          "right": false
        }, {
          "label": "неудовлетворенности ",
          "right": true
        }, {
          "label": "удовлетворенности",
          "right": false
        }]
      }, {
        "question": "Может ли потребность в самореализации доминировать, если не удовлетворена потребность в социальной принадлежности (в соответствии с иерархией потребностей А. Маслоу)?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Да",
          "right": false
        }, {
          "label": "Нет",
          "right": true
        }]
      }, {
        "question": "В соответствии с теорией Герцберга, гигиенические факторы:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "мотивируют к более производительному труду",
          "right": false
        }, {
          "label": "влияют на устранение неудовлетворенности сотрудника",
          "right": true
        }]
      }, {
        "question": "Закончите фразу: «Сотрудник с высокой мотивацией достижения выберет…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "трудновыполнимую задачу",
          "right": false
        }, {
          "label": "среднюю по тяжести задачу",
          "right": true
        }, {
          "label": "легковыполнимую задачу",
          "right": false
        }]
      }, {
        "question": "Закончите фразу: «Чем увереннее в своих профессиональных качествах сотрудник – тем…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "выше его внутренняя мотивация",
          "right": true
        }, {
          "label": "ниже его внутренняя мотивация",
          "right": false
        }]
      }, {
        "question": "Деньги являются мотиватором… ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "всегда, при любых условиях",
          "right": false
        }, {
          "label": "при определенных условиях ",
          "right": true
        }, {
          "label": "деньги не мотивируют к достижению более высоких результатов",
          "right": false
        }]
      }, {
        "question": "Какие способы стимулирования относятся к организационным?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Мотивация целями",
          "right": true
        }, {
          "label": "Участие в делах фирмы",
          "right": true
        }, {
          "label": "Информирование сотрудников о результатах работы ",
          "right": true
        },
        // {
        //   "label": "Делегирование полномочий ",
        //   "right": true
        // },
        // {
        //   "label": "Корпоративная газета ",
        //   "right": true
        // },
        // {
        //   "label": "Перспективы служебного роста ",
        //   "right": true
        // },
        // {
        //   "label":"Обучение",
        //   "right": true
        // },
        // {
        //   "label": "Задания повышенной сложности ",
        //   "right": true
        // },
        // {
        //   "label": "Разнообразие в работе ",
        //   "right": true
        // },
        {
          "label": "Одобрение",
          "right": false
        }, {
          "label": "Поддержка",
          "right": false
        }, {
          "label": "Уважение и доверие",
          "right": false
          // ,{
          //   "label":"Внимание к личности и интересам",
          //   "right": false
          // },
          // {
          //   "label": "Сочувствие",
          //   "right": false
          // },
          // {
          //   "label": "Похвала (с глазу на глаз или публичная, в том числе через прессу)",
          //   "right": false
          // },
          // {
          //   "label": "Соревновательный дух",
          //   "right": false
          // },
          // {
          //   "label": "Порицание (с глазу на глаз или публичное, устное – письменное)",
          //   "right": false
          // },
          // {
          //   "label": "Признание заслуг",
          //   "right": false
          // }
        }]
      }, {
        "question": "Отметьте моральные способы стимулирования.",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [
        // {
        //   "label":"Мотивация целями",
        //   "right": false
        // },
        // {
        //   "label": "Участие в делах фирмы",
        //   "right": false
        // },
        // {
        //   "label": "Информирование сотрудников о результатах работы ",
        //   "right": false
        // },
        {
          "label": "Делегирование полномочий ",
          "right": false
        }, {
          "label": "Корпоративная газета ",
          "right": false
        }, {
          "label": "Перспективы служебного роста ",
          "right": false
        },
        // {
        //   "label":"Обучение",
        //   "right": false
        // },
        // {
        //   "label": "Задания повышенной сложности ",
        //   "right": false
        // },
        // {
        //   "label": "Разнообразие в работе ",
        //   "right": false
        // },
        // {
        //   "label": "Одобрение",
        //   "right": true
        // },
        // {
        //   "label": "Поддержка",
        //   "right": true
        // },
        // {
        //   "label": "Уважение и доверие",
        //   "right": true
        // },
        {
          "label": "Внимание к личности и интересам",
          "right": true
        }, {
          "label": "Сочувствие",
          "right": true
        }, {
          "label": "Похвала (с глазу на глаз или публичная, в том числе через прессу)",
          "right": true
          // ,{
          //   "label": "Соревновательный дух",
          //   "right": true
          // },
          // {
          //   "label": "Порицание (с глазу на глаз или публичное, устное – письменное)",
          //   "right": true
          // },
          // {
          //   "label": "Признание заслуг",
          //   "right": true
          // }
        }]
      }, {
        "question": "Какие теории мотивации объясняют воздействие различных условий на достижение исполнителем рабочих результатов?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Содержательные.",
          "right": false
        }, {
          "label": "Процессуальные.",
          "right": true
        }]
      },
      // {
      //   "question":"Руководителю, желающему воздействовать на трудовую мотивацию подчиненных, необходимо сделать пять шагов для того, чтобы добиться желаемого результата. Распределите описанные ниже действия по «шагам».",
      //   "score":-1,
      //   "status":"notanswered",
      //   "type": "single",
      //   "answers":[]
      // },
      {
        "question": "Какие из действий менеджера не относятся к функции контроля?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Менеджер устанавливает стандарты выполнения подчиненным функций и задач.",
          "right": false
        }, {
          "label": "Менеджер распределяет поручения между подчиненными. ",
          "right": true
        }, {
          "label": "Менеджер информирует подчиненных о последствиях несоблюдения стандартов. ",
          "right": true
        }, {
          "label": "Менеджер сравнивает фактическое положение дел со стандартами.",
          "right": false
        }, {
          "label": "Менеджер по результатам сравнения вносит изменения  в работу подчиненного или в стандарты.",
          "right": false
        }]
      }, {
        "question": "Проверка соответствия качеств и квалификации сотрудника занимаемой должности относится к:",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "предварительному виду контроля",
          "right": true
        }, {
          "label": "текущему виду контроля",
          "right": false
        }, {
          "label": "итоговому виду контроля",
          "right": false
        }]
      },
      // {
      //   "question":"Справедливо ли утверждение? ",
      //   "score":-1,
      //   "status":"notanswered",
      //   "type": "single",
      //   "answers":[]
      // },
      {
        "question": "Руководители часто пренебрегают организацией… коммуникаций. ",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "нисходящих",
          "right": false
        }, {
          "label": "восходящих",
          "right": true
        }, {
          "label": "горизонтальных",
          "right": false
        }]
      }, {
        "question": "«Обратная связь» – важнейший инструмент каких функций управления?",
        "score": -1,
        "status": "notanswered",
        "type": "multi",
        "answers": [{
          "label": "Планирование ",
          "right": false
        }, {
          "label": "Организация ",
          "right": false
        }, {
          "label": "Мотивация ",
          "right": true
        }, {
          "label": "Контроль ",
          "right": true
        }]
      }, {
        "question": "Закончите фразу: «Цель развивающей обратной связи –…».",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "указать подчиненному на его ошибку",
          "right": false
        }, {
          "label": "наказать подчиненного",
          "right": false
        }, {
          "label": "помочь подчиненному ",
          "right": true
        }]
      }, {
        "question": "Какой тип решения предпочтительнее в управленческой практике?",
        "score": -1,
        "status": "notanswered",
        "type": "single",
        "answers": [{
          "label": "Интуитивное решение. ",
          "right": false
        }, {
          "label": "Решение, основанное на суждении.",
          "right": false
        }, {
          "label": "Рациональное решение.",
          "right": true
        }]
      }]
    }]
  }]
};
var manifest = ["img/01-01.png", "img/01-02.png", "img/01-03.png", "img/01-04.png", "img/01-05.png", "img/01-06.png", "img/01-07.png", "img/02-02.png", "img/04-122_01.png", "img/05-44-076-02.png", "img/05-44-076.png", "img/05-45-077.png", "img/05-50-082-01.png", "img/05-57-089-01.png", "img/05-57-089-02.png", "img/10.jpg", "img/11.jpg", "img/111.jpg", "img/113_1.jpg", "img/113_2.jpg", "img/113_3.jpg", "img/116.jpg", "img/121.jpg", "img/124.jpg", "img/128_1.jpg", "img/128_1_blur.png", "img/128_2.jpg", "img/128_2_blur.png", "img/128_3.jpg", "img/128_3_blur.png", "img/128_4.jpg", "img/128_4_blur.png", "img/12_1.jpg", "img/12_1_blur.png", "img/12_2.jpg", "img/12_2_blur.png", "img/12_3.jpg", "img/12_3_blur.png", "img/131.jpg", "img/13_1.jpg", "img/13_1_blur.png", "img/13_2.jpg", "img/13_2_blur.png", "img/13_3.jpg", "img/13_3_blur.png", "img/14_1.jpg", "img/14_1_blur.png", "img/14_2.jpg", "img/14_2_blur.png", "img/14_3.jpg", "img/14_3_blur.png", "img/14_4.jpg", "img/14_4_blur.png", "img/15.jpg", "img/17.jpg", "img/18.jpg", "img/28.jpg", "img/29.jpg", "img/3.jpg", "img/31.jpg", "img/34.jpg", "img/35.jpg", "img/35_blur.jpg", "img/36.jpg", "img/37.jpg", "img/42.jpg", "img/43.jpg", "img/45_1.jpg", "img/45_2.jpg", "img/45_3.jpg", "img/45_4.jpg", "img/45_5.jpg", "img/46.jpg", "img/47.jpg", "img/49.jpg", "img/5.jpg", "img/51.jpg", "img/56.jpg", "img/57.jpg", "img/58.jpg", "img/59.jpg", "img/60.jpg", "img/66-1.png", "img/66-2.png", "img/66-3.png", "img/66-4.png", "img/66-5.png", "img/66.png", "img/67.jpg", "img/68.jpg", "img/69.jpg", "img/6_1.jpg", "img/70.jpg", "img/71.jpg", "img/72.jpg", "img/73.jpg", "img/74.jpg", "img/74_blur.png", "img/76.jpg", "img/7_1.jpg", "img/80_1.jpg", "img/80_2.jpg", "img/85.jpg", "img/86_1.jpg", "img/8_1.jpg", "img/8_2.jpg", "img/8_3.jpg", "img/93.jpg", "img/96_1.jpg", "img/96_1_blur.png", "img/96_2.jpg", "img/96_2_blur.png", "img/96_3.jpg", "img/96_3_blur.png", "img/96_4.jpg", "img/96_4_blur.png", "img/98.jpg", "img/138_1.jpg", "img/arrow.png", "img/bg-arrow.png", "img/bg-device.png", "img/custom-video-sprite.png", "img/intro_blur.png", "img/manager.png", "img/modal_false.jpg", "img/modal_true.jpg", "img/png_icons.png", "img/taskNote.jpg", "img/video-01.png", "img/task-bg.jpg", "video/posters/01-01.png", "video/posters/02-01.png", "video/posters/02_2-01.png", "video/posters/03-01.png", "video/posters/04-01.png", "video/posters/04_1-01.png", "video/posters/04_2-01.png", "video/posters/05-01.png", "video/posters/06-01.png", "video/posters/07-01.png", "video/posters/07_2-01.png", "video/posters/08-01.png", "video/posters/09-01.png", "video/posters/10-01.png", "video/posters/11-01.png", "video/posters/11_2-01.png", "video/posters/12-01.png", "video/posters/13-01.png", "video/posters/13_2-01.png", "video/posters/14-01.png", "video/posters/15-01.png", "video/posters/16-01.png", "video/posters/17-01.png", "video/posters/18-01.png", "video/posters/19-01.png", "video/posters/19_2-01.png", "video/posters/19_3-01.png", "video/posters/20-01.png", "video/posters/21-01.png", "video/posters/26-01.png", "video/posters/27-01.png", "video/posters/29-01.png", "video/posters/30-01.png", "video/posters/r1.jpg", "video/posters/r10.jpg", "video/posters/r11.jpg", "video/posters/r12.jpg", "video/posters/r13.jpg", "video/posters/r14.jpg", "video/posters/r15.jpg", "video/posters/r16.jpg", "video/posters/r17.jpg", "video/posters/r18.jpg", "video/posters/r19.jpg", "video/posters/r19_2.jpg", "video/posters/r19_3.jpg", "video/posters/r2.jpg", "video/posters/r20.jpg", "video/posters/r21.jpg", "video/posters/r27.jpg", "video/posters/r3.jpg", "video/posters/r4.jpg", "video/posters/r4_1.jpg", "video/posters/r4_2.jpg", "video/posters/r5.jpg", "video/posters/r6.jpg", "video/posters/r7.jpg", "video/posters/r8.jpg", "video/posters/r9.jpg"];

;(function () {
  'use strict';

  config.$inject = ["$stateProvider", "$urlRouterProvider", "courseDataObj"];
  run.$inject = ["$state", "$rootScope", "$timeout", "staticService", "userService", "scormWrapper", "courseInfo", "courseDataObj"];
  angular.module('courseApp', ['ui.router', 'ngAnimate', 'ngSanitize', 'vjs.video']).constant('courseDataObj', courseStructure).constant('testDataObj', testStructure).constant('courseInfo', {
    bookmark: {
      page: 1,
      chapterPage: 1,
      chapter: 1
    },
    exercises: [],
    notes: [],
    testScore: 0
  }).config(config).run(run

  /* @ngInject */
  );function config($stateProvider, $urlRouterProvider, courseDataObj) {

    $stateProvider.state('page', {
      url: '/chapter/:chapter/page/:page',
      views: {
        'header': {
          templateUrl: 'js/components/header/headerTmpl.html',
          controller: 'HeaderCtrl',
          controllerAs: '$ctrl'
        },
        'content': {
          templateUrl: function templateUrl($stateParams) {

            // переход по кастомным папкам типа «page04a»
            var chapterLocation = courseDataObj.chapters[$stateParams.chapter - 1].chapter_location,
                pageLocation = courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].location;
            // console.log('::main:: confog:', chapterLocation, pageLocation)
            return "pages/" + chapterLocation + "/" + pageLocation + "/index.html";
          },
          controller: 'PageCtrl',
          controllerAs: '$ctrl'
        },
        'footer': {
          templateUrl: 'js/components/footer/footerTmpl.html',
          controller: 'FooterCtrl',
          controllerAs: '$ctrl'
        }
      }
    }
    // .state('test', {})

    // $urlRouterProvider.otherwise('/chapter/1/page/1')
    );
  }

  /* @ngInject */
  function run($state, $rootScope, $timeout, staticService, userService, scormWrapper, courseInfo, courseDataObj) {

    var _preload = function preload() {
      if (_preload != null) {
        // preload.close();
      }
      _preload = new createjs.LoadQueue(false);
      _preload.on('fileload', onFileload, this);
      _preload.on('progress', onProgress, this);
      _preload.on('complete', onComplete, this);
      _preload.on('error', onError, this);
      _preload.loadManifest(manifest);
    };

    var onFileload = function onFileload() {
      $state.go('page', { chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage });
    };
    var onProgress = function onProgress() {
      // 
    };
    var onComplete = function onComplete() {
      // 
    };
    var onError = function onError(e) {
      console.error('can`t load image!', e.data.src);
    };

    _preload();

    scormWrapper.setAPIVersion("1.2");
    scormWrapper.doLMSInitialize();

    if (scormWrapper.LMSIsInitialized()) {
      console.info('<:: Load from LMS ::>');

      var completionStatus = scormWrapper.doLMSGetValue('cmi.completion_status');
      console.info('Course completion status » ' + completionStatus);

      if (completionStatus === 'not attempted') {
        scormWrapper.doLMSSetValue('cmi.suspend_data', '');
      }

      // alert('suspend_data >> '+suspend_data)
      var suspend_data = scormWrapper.doLMSGetValue('cmi.suspend_data').replace(/\*\#/g, '[').replace(/\#\*/g, ']');

      var score = scormWrapper.doLMSGetValue('cmi.core.score.raw');
      console.log('%c LMS score -> ', 'color:#C0FFEE;', score);

      courseInfo.testScore = score;
      console.log('%c courseInfo testScore -> ', 'color:#BADA55;', courseInfo.testScore);

      if (suspend_data.length > 0) {
        try {
          courseInfo = JSON.parse(suspend_data);
          window.bookmark = courseInfo.bookmark;
          window.bookmark.loaded = false;
          window.exercises = courseInfo.exercises;
          window.exercises.loaded = false;
          userService.loadExs(courseInfo.exercises);
        } catch (e) {
          console.error('Что-то пошло не так... \n', e);
        }
      }

      console.info('main:: courseInfo', courseInfo);
    }

    if (localStorage) {
      if (localStorage.getItem(courseDataObj.course_name)) {
        userService.loadNotes();
      } else {
        localStorage.setItem(courseDataObj.course_name, '');
      }
    }

    // alert('start change bookmark')
    // $state.go('page', ({chapter: courseInfo.bookmark.chapter, page: courseInfo.bookmark.chapterPage}));

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState) {

      // stop audio
      staticService.stopAudio(true);
      // replace current position of audio slider to zero
      staticService.setAudioTime(0);

      staticService.setBookmark(Number(toParams.page), Number(toParams.chapter));

      userService.sendToLMS();
    });

    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
      $timeout(function () {
        // stop audio
        staticService.stopAudio(false);
      }, 100);
    });
  }
})();
/********************************************************************************
**
** Prometheus Research SCORM API Wrapper
** 
** Supports:
**
** SCORM 1.2, SCORM 2004.[1]
**
** The following is a porting of the code from the
** original APIWrapper.js file to Angular JS with a 
** number of improvements from
** Concurrent Technologies Corporation (CTC) released
** under the MIT style license available
** on the ADL scorm website [2]
** 
** The code has been updated to wrap the original functions in
** in angularjs and extend support for SCORM 2004 [4].
** It draws upon some of concepts offered in the Pipewerks[3]
** 
** The code is served as an AngularJS service [5].
** 
** References/Inspiration:
** 
** [1] ADL
** http://www.adlnet.gov/scorm
** 
** [2] CTC SCORM SCORM 1.2 API wrapper
** http://www.adlnet.gov/resources/scorm-1-2-content-packages?type=software_downloads
** 
** [3] Pipewerks SCORM wrapper
** https://github.com/pipwerks/scorm-api-wrapper
** 
** [4] SCORM.com
** http://scorm.com/scorm-explained/technical-scorm/run-time/
** 
** [5] Angularjs services
** http://docs.angularjs.org/guide/dev_guide.services
**
** Copyright (c) Prometheus Research 2014
** Copyright (c) Philip Hutchison
** Copyright (c) Concurrent Technologies Corporation (CTC)
** ---------------------------------------------------------------------------------
** License:
** 
** 
** Permission is hereby granted, free of charge, to any person obtaining a 
** copy of this software and associated documentation files (the “Software”), 
** to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the Software is furnished to
** do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in 
** all copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
** FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
** 
*********************************************************************************/
;(function () {
  "use strict";

  angular.module('courseApp').service('scormWrapper', scormWrapper);

  /* @ngInject */
  function scormWrapper() {

    var version = "Auto";
    var API = false;
    var scormVersions = ["Auto", "1.2", "2004"];

    this.setAPIVersion = function (scormVersion) {

      scormVersion = scormVersion || "Auto";
      console.log('set SCORM ver:', scormVersion);

      var v = scormVersions.indexOf(scormVersion.toString());
      v > -1 ? version = scormVersions[v] : console.log("Not found, default to Auto");
      return version;
    };

    this.getAPIVersion = function () {
      return version;
    };

    this.isAvailable = function () {
      return true;
    };

    this.doLMSInitialize = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSInitialize", "Initialize")(""));
    };

    this.doLMSFinish = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSFinish", "Terminate")(""));
    };

    this.doLMSGetValue = function (parameter) {
      return this.getAPICall("LMSGetValue", "GetValue")(parameter);
    };

    this.doLMSSetValue = function (parameter, value) {
      return this.cmiBooleanToJs(this.getAPICall("LMSSetValue", "SetValue")(parameter, value));
    };

    this.doLMSCommit = function () {
      return this.cmiBooleanToJs(this.getAPICall("LMSCommit", "Commit")(""));
    };

    this.doLMSGetLastError = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.doLMSGetErrorString = function (errorCode) {
      return this.getAPICall("LMSGetErrorString", "GetErrorString")(errorCode.toString());
    };

    this.doLMSGetDiagnostic = function (errorCode) {
      return this.getAPICall("LMSGetDiagnostic", "GetDiagnostic")(errorCode.toString());
    };

    this.LMSIsInitialized = function () {
      return API;
    };

    this.ErrorHandler = function () {
      return this.getAPICall("LMSGetLastError", "GetLastError")();
    };

    this.cmiBooleanToJs = function (value) {
      return value === "1" || value === 1 || value === "true" || value === true;
    };

    this.getAPIHandle = function () {

      var win = window;

      if (win.parent && win.parent != win) {
        this.findAPI(win.parent);
      }

      if (!API && win.top.opener) {
        this.findAPI(win.top.opener);
      } else if (!API) {
        console.log("Unable to find API adapter");
      }
    };

    this.findAPI = function (win) {

      var findAttempts = 0,
          findAttemptLimit = 500;

      for (findAttempts; findAttempts < findAttemptLimit; findAttempts++) {

        if (win.API && (version === "1.2" || version === "Auto")) {
          API = win.API;
          version = "1.2";
          break;
        } else if (win.API_1484_11 && (version === "2004" || version === "Auto")) {
          API = win.API_1484_11;
          version = "2004";
          break;
        } else if (win.parent && win.parent != win) {
          findAttempts++;
          win = win.parent;
        }
      }
    };

    this.getAPICall = function (funcname12, funcname2004) {

      if (!API) {
        this.getAPIHandle();
        if (!API) {
          return function () {
            console.log("No API found, can't execute: " + funcname12 + " or " + funcname2004);
          };
        }
      }

      switch (version) {
        case "2004":
          return function () {
            return API[funcname2004].apply(API, arguments);
          };

        case "1.2":
          return function () {
            return API[funcname12].apply(API, arguments);
          };
      }
    };
  };
})();
;(function () {
  'use strict';

  staticService.$inject = ["courseDataObj", "courseInfo", "$document"];
  angular.module('courseApp').service('staticService', staticService

  /* @ngInject */
  );function staticService(courseDataObj, courseInfo, $document) {
    var _this = this,
        _arguments = arguments;

    var modals = {
      'menu': { state: false },
      'stats': { state: false },
      'about': { state: false },
      'notes': { state: false },
      'help': { state: false },
      'exercise': { state: false },
      'video': { state: false },
      'cloak': { state: false },
      'addInfo': { state: false }
    };

    //
    this.getModalState = function (index) {
      // console.log('staticService:: getModalState: index', index)
      return modals[index].state;
    };

    this.showModal = function (index, headText, bodyText, answer, specific) {
      // console.log('staticService:: showModal:', index, modals[index])
      if (modals[index].state) {
        modals[index].state = false;
      } else {
        _this.closeModals();

        if (index == 'exercise') {
          document.getElementsByClassName('modal_head')[0].innerHTML = headText;
          document.getElementsByClassName('modal_body')[0].innerHTML = bodyText;
          if (specific != "final") document.getElementById('pie-chart').style.display = 'none';
          modals['exercise'].content = bodyText;
          modals['exercise'].answer = answer;
          modals['exercise'].heading = headText;
        }
        modals[index].state = true;
        modals['cloak'].state = true;
      }
    };

    this.closeModals = function (index) {
      for (var key in modals) {
        if (key == 'video' && modals[key].state == true) {
          var oldPlayer = document.querySelector('.my-home-video');
          // console.warn('closeModals:: oldPlayer:', oldPlayer)
          videojs(oldPlayer).dispose();
        }
        modals[key].state = false;
      }
    };

    // 
    this.getCourseName = function () {
      return {
        course: courseDataObj.course,
        description: courseDataObj.description
      };
    };

    // call getChapterObj() from 'HeaderCtrl' controller
    this.getChapterObj = function (index) {
      return courseDataObj.chapters[index];
    };

    this.getChaptersTotal = function () {
      return courseDataObj.chapters;
    };

    this.getPageTotal = function () {
      var totalPages = 0;
      for (var i = 0; i < courseDataObj.chapters.length; i++) {
        totalPages += courseDataObj.chapters[i].pages.length;
      }
      return totalPages;
    };
    this.getBookmark = function () {
      return courseInfo.bookmark;
    };

    this.setBookmark = function (chapterPage, chapter) {
      console.warn('staticService:: try to setBookmark:', chapterPage, chapter);
      courseInfo.bookmark.chapterPage = chapterPage;
      courseInfo.bookmark.chapter = chapter;

      if (chapter == 1) {
        courseInfo.bookmark.page = chapterPage;
      } else {
        var tmpPages = 0;
        for (var i = 0; i < chapter - 1; i++) {
          tmpPages += courseDataObj.chapters[i].pages.length;
        }
        courseInfo.bookmark.page = tmpPages + chapterPage;
      }
      console.log('staticService:: setBookmark ChP: %d, Ch: %d, Page: %d', chapterPage, chapter, courseInfo.bookmark.page);
    };

    // get exercise data array
    this.getData = function ($stateParams, prop) {
      // console.log('staticService:: courseDataObj:', courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1])
      if (prop == 'data') {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data;
      } else {
        return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].data[prop];
      }
    };

    // get message array
    this.getMessage = function ($stateParams, num) {
      return courseDataObj.chapters[$stateParams.chapter - 1].pages[$stateParams.page - 1].messages[num];
    };

    /**
    *  audio section
    */
    var audioTime = 0,
        stopAudio = false;

    this.setAudioTime = function (time) {
      audioTime = time;
    };

    this.getAudioTime = function () {
      return audioTime;
    };

    this.stopAudio = function (bool) {
      stopAudio = bool;
    };

    this.getStopAudio = function () {
      return stopAudio;
    };

    var waitAudio = false;
    this.startAudio = function (toggler) {
      if (_arguments.length === 0) {
        return waitAudio;
      };
      waitAudio = toggler;
    };

    /***************************************************************
    /  For addInfo modal
    /**************************************************************/

    this.addInfo = function (content, state, heading) {
      modals['addInfo'].content = content;
      modals['addInfo'].state = state;
      modals['addInfo'].heading = heading;
    };

    this.getAddInfo = function () {
      return modals['addInfo'];
    };

    this.getExercise = function () {
      return modals['exercise'];
    };
    // Close modals by several types
    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(modals['exercise']);
      }
    });
  }
})();
;(function () {
  'use strict';

  userService.$inject = ["courseDataObj", "testDataObj", "$document", "scormWrapper", "courseInfo"];
  angular.module('courseApp').service('userService', userService);

  function userService(courseDataObj, testDataObj, $document, scormWrapper, courseInfo) {
    var _this2 = this;

    var userDataObj = courseDataObj.chapters.map(function (elem) {
      return {
        id: elem.id,
        visited: 1,
        completed: false,
        pages: elem.pages.map(function (item, index) {
          return {
            id: item.id,
            type: item.type,
            title: item.title,
            visited: index === 0 ? true : false,
            completed: ''
          };
        })
      };
    });

    var myStorage = localStorage;
    this.exs = [];
    this.notes = [];
    if (!this.start_date) {
      this.start_date = new Date();
    }
    courseDataObj.chapters.forEach(function (elem, index) {
      elem.pages.map(function (page, i) {

        if (page.type == 'exercise') {
          _this2.exs.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            score: 0,
            status: -1,
            title: page.title
          });
        }

        if (page.type == 'note_page') {
          // console.info('note_page', page)

          var fields = [];
          for (var _i = 0; _i < page.data.task_fields; _i++) {
            fields.push({
              id: _i,
              text: ""
            });
          }

          _this2.notes.push({
            id: page.page_id,
            chapter_id: index,
            page_id: i,
            title: page.title,
            fields_num: page.data.task_fields,
            fields: fields
          });
        }
      });
    }
    // console.warn('userService:: setUp exs Arr', JSON.stringify(this.exs));
    // console.warn('userService:: setUp notes Arr', JSON.stringify(this.notes));

    // this.testData = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));

    );this.ConvertMilliSecondsIntoSCORM2004Time = function (intTotalMilliseconds) {

      var ScormTime = "";

      var HundredthsOfASecond; //decrementing counter - work at the hundreths of a second level because that is all the precision that is required

      var Seconds; // 100 hundreths of a seconds
      var Minutes; // 60 seconds
      var Hours; // 60 minutes
      var Days; // 24 hours
      var Months; // assumed to be an "average" month (figures a leap year every 4 years) = ((365*4) + 1) / 48 days - 30.4375 days per month
      var Years; // assumed to be 12 "average" months

      var HUNDREDTHS_PER_SECOND = 100;
      var HUNDREDTHS_PER_MINUTE = HUNDREDTHS_PER_SECOND * 60;
      var HUNDREDTHS_PER_HOUR = HUNDREDTHS_PER_MINUTE * 60;
      var HUNDREDTHS_PER_DAY = HUNDREDTHS_PER_HOUR * 24;
      var HUNDREDTHS_PER_MONTH = HUNDREDTHS_PER_DAY * ((365 * 4 + 1) / 48);
      var HUNDREDTHS_PER_YEAR = HUNDREDTHS_PER_MONTH * 12;

      HundredthsOfASecond = Math.floor(intTotalMilliseconds / 10);

      Years = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_YEAR);
      HundredthsOfASecond -= Years * HUNDREDTHS_PER_YEAR;

      Months = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MONTH);
      HundredthsOfASecond -= Months * HUNDREDTHS_PER_MONTH;

      Days = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_DAY);
      HundredthsOfASecond -= Days * HUNDREDTHS_PER_DAY;

      Hours = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_HOUR);
      HundredthsOfASecond -= Hours * HUNDREDTHS_PER_HOUR;

      Minutes = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_MINUTE);
      HundredthsOfASecond -= Minutes * HUNDREDTHS_PER_MINUTE;

      Seconds = Math.floor(HundredthsOfASecond / HUNDREDTHS_PER_SECOND);
      HundredthsOfASecond -= Seconds * HUNDREDTHS_PER_SECOND;

      if (Years > 0) {
        ScormTime += Years + "Y";
      }
      if (Months > 0) {
        ScormTime += Months + "M";
      }
      if (Days > 0) {
        ScormTime += Days + "D";
      }

      //check to see if we have any time before adding the "T"
      if (HundredthsOfASecond + Seconds + Minutes + Hours > 0) {

        ScormTime += "T";

        if (Hours > 0) {
          ScormTime += Hours + "H";
        }

        if (Minutes > 0) {
          ScormTime += Minutes + "M";
        }

        if (HundredthsOfASecond + Seconds > 0) {
          ScormTime += Seconds;

          if (HundredthsOfASecond > 0) {
            ScormTime += "." + HundredthsOfASecond;
          }

          ScormTime += "S";
        }
      }

      if (ScormTime == "") {
        ScormTime = "0S";
      }

      ScormTime = "P" + ScormTime;
      return ScormTime;
    };

    this.loadExs = function (data) {
      // alert('load exs!')
      if (data.length != 0) {
        // alert('exs not empty')
        _this2.exs = data;
      }
      courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
    };
    this.loadNotes = function () {
      var data = localStorage.getItem(courseDataObj.course_name);
      data = JSON.parse(data);
      // alert('load saved notes!')
      // console.warn('load saved notes!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:', data);
      if (data.length != 0) {
        _this2.notes = data;
      }
      // console.warn(this.notes)

      courseInfo.notes = _this2.notes;
      // console.warn('courseInfo.notes -1-1-1-1-1-1-1-1-1-1', courseInfo.notes);
    };

    this.currentTestQuestion = null;
    this.setCurrentTestQuestion = function (question) {
      _this2.currentTestQuestion = question;
    };

    // console.log('userService:: exs',this.exs)
    this.getExs = function () {
      // console.log('userService:: getExs, exs', this.exs)
      return _this2.exs;
    };
    this.getPageType = function (chapter, page) {
      if (courseDataObj.chapters[chapter].pages[page].type == 'test') {
        return true;
      }
      return false;
    };

    this.getPageVisit = function () {
      //
    };
    this.setPageVisit = function (module, page) {
      // 
    };
    this.setUserProgress = function (score, status, chapter, page) {
      // console.log('userService:: setUserProgress this.exs', this.exs)
      // console.log('userService:: setUserProgress income params', score, status, chapter, page)
      _this2.exs.forEach(function (item) {
        // console.log('=>',item, chapter, page)
        if (item.chapter_id == chapter && item.page_id == page) {
          item.score = score;
          item.status = status;
        }
      }
      // console.log('userService:: setUserProgress > this.exs',this.exs)

      );courseInfo.exercises = JSON.parse(JSON.stringify(_this2.exs));
      // courseInfo.excercises = this.exs;

      _this2.sendToLMS();
    };

    this.getUserNotes = function () {
      return _this2.notes;
    };

    this.setUserNotes = function (notes, chapter, page) {

      // console.log('userService:: setNotes:', notes, chapter, page);

      _this2.notes.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          item = notes;
        }
      });

      function supports_html5_storage() {
        try {
          console.log('supports_html5_storage------:');
          return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
          console.log('NO_supports_html5_storage------:');
          return false;
        }
      }

      // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
      myStorage.setItem(courseDataObj.course_name, JSON.stringify(_this2.notes, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }
        return value;
      }));
      _this2.sendToLMS();
    };

    this.sendToLMS = function () {
      var session_time;
      var end_date = new Date();

      session_time = end_date - _this2.start_date; // in milliseconds
      session_time = _this2.ConvertMilliSecondsIntoSCORM2004Time(session_time);

      _this2.dataCourse = courseInfo;
      _this2.dataCourse.exercises.forEach(function (elem) {
        delete elem.title;
      });
      delete _this2.dataCourse.notes;

      var suspendData = JSON.stringify(_this2.dataCourse, function (key, value) {
        if (key === "$$hashKey") {
          return undefined;
        }

        return value;
      }).replace(/\[/g, '*#').replace(/\]/g, '#*');

      console.info('sendToLMS suspendData: ', suspendData);
      console.info('sendToLMS suspendData.length: ', suspendData.length);
      console.warn('Put => session_time: ' + session_time);
      scormWrapper.doLMSSetValue('cmi.suspend_data', suspendData);
      scormWrapper.doLMSSetValue('cmi.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.session_time', session_time);
      scormWrapper.doLMSSetValue('cmi.core.score.raw', courseInfo.testScore);

      if (courseInfo.testScore >= 60) {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'completed');
      } else {
        scormWrapper.doLMSSetValue('cmi.core.lesson_status', 'incomplete');
      }

      scormWrapper.doLMSCommit();
    };

    // Close modals by several types
    $($document).keydown(function (e) {
      // ESCAPE key pressed
      if (e.keyCode == 9) {
        console.warn(courseDataObj);
        console.warn(courseInfo);
        console.warn(_this2.exs);
        console.warn(window.window);
      }
    });

    //     function close_window() {
    //     window.open('','_parent','').close();
    // }

    window.onbeforeunload = function (e) {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');

      var e = e || window.event;

      //IE & Firefox
      if (e) {}

      // For Safari
      scormWrapper.doLMSFinish();
    };

    this.closeCourse = function () {
      scormWrapper.doLMSSetValue('cmi.exit', 'suspend');
      _this2.sendToLMS();
      scormWrapper.doLMSFinish();
      var a = confirm('Вы уверены, что хотите закончить прохождение курса?');
      if (a) {
        //close_window();
        document.getElementsByClassName('course-wrapper')[0].innerHTML = '<p class="close-msg">Работа с модулем курса завершена.</p>';
      }
    };
  }
})();
;(function () {
  'use strict';

  CourseCtrl.$inject = ["$http", "$sce", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('CourseCtrl', CourseCtrl);

  /* @ngInject */
  function CourseCtrl($http, $sce, $stateParams, staticService, userService) {
    var self = this;

    //if (device.mobile() && device.portrait()) {
    //  self.turnMobile = true;
    //} else {
    //  self.turnMobile = false;
    //}
  }
})();
;(function () {
  'use strict';

  PageCtrl.$inject = ["$document", "staticService", "$scope", "courseInfo"];
  angular.module('courseApp').controller('PageCtrl', PageCtrl);

  /* @ngInject */
  function PageCtrl($document, staticService, $scope, courseInfo) {

    this.tabNum = 1;

    $scope.getModalState = function (index) {
      return staticService.getModalState(index);
    };
    $scope.closeModals = function () {
      return staticService.closeModals();
    };

    // uses for sync of audio and content changes (some kind of animation)
    this.time = function () {
      return staticService.getAudioTime();
    };
  }
})();
(function () {
  'use strict';

  AddInfoCtrl.$inject = ["$element", "$attrs", "staticService"];
  angular.module('courseApp').component('addInfo', {
    bindings: {
      heading: '@'
    },
    transclude: true,
    templateUrl: './js/components/add-info/addInfoTmpl.html',
    controller: 'AddInfoCtrl',
    controllerAs: '$ctrl'
  }).controller('AddInfoCtrl', AddInfoCtrl);

  /* @ngInject */
  function AddInfoCtrl($element, $attrs, staticService) {
    var self = this;

    self.getAddInfo = function () {
      staticService.addInfo($element.find('ng-transclude').prop('innerHTML'), true, $attrs.heading);
    };
  }
})();
;(function () {
  'use strict';

  CustomAudioCtrl.$inject = ["$document", "$interval", "staticService"];
  angular.module('courseApp').component('customAudio', {
    bindings: {
      chapter: '@',
      page: '@',
      hassound: '@'
    },
    templateUrl: 'js/components/custom-audio/customAudioTmpl.html',
    controller: 'CustomAudioCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomAudioCtrl', CustomAudioCtrl);

  /* @ngInject */
  function CustomAudioCtrl($document, $interval, staticService) {
    var _this3 = this;

    this.play = '#play'; // variable for play/pause btn that toggle icons
    this.mute = '#unmute'; // variable for mute/unmute btn that toggle icons
    this.volume = 1; // define volume in volume slider
    this.seekPos = 0;

    this.$onInit = function () {
      // console.warn('AudioCtrl:: hasSound', this.hassound)
      if (_this3.hassound != 'false') {
        init();
      }
    };

    var init = function init() {
      console.warn('customAudio:: init'
      /* It's a better way to use createElement than create new Audio(), 
      /  because such object is easier to remove
       **/
      );_this3.audio = $document[0].createElement('audio');
      _this3.audio.src = "pages/" + _this3.chapter + "/" + _this3.page + "/audio/page-" + _this3.chapter + "-" + _this3.page + ".mp3";

      _this3.audio.oncanplaythrough = function () {

        _this3.changePlayPause = function () {

          if (_this3.audio.paused) {
            _this3.audio.play();
            _this3.play = '#pause';
          } else {
            _this3.audio.pause();
            _this3.play = '#play';
          }
        };

        _this3.updateSeekSlider = function () {
          var seekNewPos = _this3.audio.currentTime * (100 / _this3.audio.duration),
              // position in seek slider
          curmins = Math.floor(_this3.audio.currentTime / 60),
              // current minutes value
          cursecs = Math.floor(_this3.audio.currentTime - curmins * 60),
              // current seconds value
          durmins = Math.floor(_this3.audio.duration / 60),
              // audio duration in minutes
          dursecs = Math.floor(_this3.audio.duration - durmins * 60); // audio duration in rest seconds

          _this3.seekPos = Math.floor(seekNewPos);

          if (curmins < 10) {
            curmins = '0' + curmins;
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs;
          };
          if (durmins < 10) {
            durmins = '0' + durmins;
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs;
          };

          _this3.curTime = curmins + ':' + cursecs; // display current time in the audio player
          _this3.durTime = durmins + ':' + dursecs; //  display audio duration time in the audio player
          if (_this3.audio.currentTime === _this3.audio.duration) {
            _this3.play = '#play';
          }
        };

        _this3.changeSeekPos = function () {
          _this3.audio.currentTime = _this3.audio.duration * (_this3.seekPos / 100);
        };

        $interval(function () {

          if (!_this3.audio) return;
          _this3.updateSeekSlider();

          // set audio time position in staticService to animate images in pages
          staticService.setAudioTime(_this3.audio.currentTime);

          // listen call from staticService at page state change
          if (staticService.getStopAudio()) {
            _this3.audio.pause();
            _this3.audio = null;
            return;
          }
        }, 100);

        _this3.changeMuteState = function () {
          _this3.mute = '#unmute';

          if (_this3.audio.muted) {
            _this3.audio.muted = false;
            _this3.mute = '#unmute';
          } else {
            _this3.audio.muted = true;
            _this3.mute = '#mute';
          }
        };

        _this3.changeVolume = function () {
          _this3.audio.volume = _this3.volume;
        };

        _this3.restart = function () {
          _this3.audio.currentTime = 0;
          _this3.audio.play();
          _this3.play = '#pause';
        };
      };
    };
  }
})();
(function () {
  'use strict';

  CustomVideoCtrl.$inject = ["$document", "$timeout", "staticService"];
  angular.module('courseApp').component('customVideo', {
    bindings: {
      src: '@'
    },
    templateUrl: 'js/components/custom-video/customVideoTmpl.html',
    controller: 'CustomVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('CustomVideoCtrl', CustomVideoCtrl);

  /* @ngInject */
  function CustomVideoCtrl($document, $timeout, staticService) {
    var self = this;

    self.play = 'pause'; // variable for play/pause btn that toggle icons
    self.mute = 'unmute'; // variable for mute/unmute btn that toggle icons
    self.volume = 1; // define volume in volume slider
    self.seekPos = 0;

    self.$onInit = function () {
      var video = $($document).find('.custom-video__video')[0];

      video.oncanplaythrough = function () {
        console.log('here');
        $(video).on('timeupdate', updateSeekSlider);

        updateSeekSlider();

        self.changePlayPause = function () {
          if (video.paused) {
            video.play();
            self.play = 'pause';
          } else {
            video.pause();
            self.play = 'play';
          }
        };

        self.changeSeekPos = function () {
          video.currentTime = video.duration * (self.seekPos / 100);
        };

        function updateSeekSlider() {
          var seekNewPos = video.currentTime * (100 / video.duration),
              curhours = Math.floor(video.currentTime / 3600),
              curmins = Math.floor(video.currentTime / 60),
              cursecs = Math.floor(video.currentTime - curmins * 60),
              durhours = Math.floor(video.duration / 3600),
              durmins = Math.floor(video.duration / 60),
              dursecs = Math.floor(video.duration - durmins * 60);

          self.seekPos = Math.floor(seekNewPos);
          if (video.currentTime === video.duration) {
            self.play = 'play';
          }

          if (curmins < 10) {
            curmins = '0' + curmins || '00';
          };
          if (cursecs < 10) {
            cursecs = '0' + cursecs || '00';
          };
          if (durmins < 10) {
            durmins = '0' + durmins || '00';
          };
          if (dursecs < 10) {
            dursecs = '0' + dursecs || '00';
          };
          $timeout(function () {

            self.curtimetext = curmins + ':' + cursecs;
            self.durtimetext = durmins + ':' + dursecs;
          });
        }

        self.changeMuteState = function () {

          if (video.muted) {
            video.muted = false;
            self.mute = 'unmute';
          } else {
            video.muted = true;
            self.mute = 'mute';
          }
        };

        self.changeVolume = function () {
          video.volume = self.volume;
        };
      };
    };
  }
})();
;(function () {
  'use strict';

  TestCtrl.$inject = ["$scope", "$state", "$compile", "$stateParams", "testDataObj", "staticService", "userService", "courseInfo"];
  angular.module('courseApp').component('finalTest', {
    templateUrl: 'js/components/final-test/finalTestTmpl.html',
    controller: 'TestCtrl',
    controllerAs: '$ctrl'
  }).controller('TestCtrl', TestCtrl);

  /* @ngInject */
  function TestCtrl($scope, $state, $compile, $stateParams, testDataObj, staticService, userService, courseInfo) {
    var _this4 = this;

    /**
    *   tasks:
    *     single, multi, sortab
    */

    // составляем список вопросов и мешаем его
    this.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));

    //номер вопроса
    this.currentQuest = 0;
    this.startTest = 0;
    // состояния теста: 
    this.state = 0;
    $scope.$on('myTestState', function (e, data) {
      _this4.state = data;
    });

    this.testScore = 0;

    this.testRight = 0;

    this.testTask = document.getElementsByClassName('test-task')[0];

    this.buildQuestion = function () {

      _this4.questionList[_this4.currentQuest].answers = _.shuffle(_this4.questionList[_this4.currentQuest].answers);
      userService.setCurrentTestQuestion(_this4.questionList[_this4.currentQuest]);

      // console.warn('TestCtrl:: buildQuestion:',this.questionList[this.currentQuest])

      var tmpstr = '';
      switch (_this4.questionList[_this4.currentQuest].type) {
        case 'single':
          tmpstr = '<task-single-choice test="true"></task-single-choice>';
          break;
        case 'multi':
          tmpstr = '<task-multi-choice test="true"></task-multi-choice>';
          break;
      }

      _this4.testTask.appendChild($compile(tmpstr)($scope)[0]);
      // console.warn($compile(tmpstr)($scope))
    };

    this.nextQuestion = function (e) {
      if (e.target.classList.contains('btn_disabled')) {
        return;
      }

      _this4.checkAnswer();

      _this4.currentQuest++;
      if (_this4.currentQuest < _this4.questionList.length) {
        _this4.state = 0;
        _this4.testTask.innerHTML = '';
        _this4.buildQuestion();
      } else {
        _this4.state = 2;
        _this4.startTest = 1;
        _this4.currentQuest--;
        // console.log('TEST::>', this.testScore/(this.questionList.length))
        courseInfo.testScore = Math.round(_this4.testScore / _this4.questionList.length);
        courseInfo.testRight = _this4.testRight;
        // alert('konec')
        // show result window
        // to showModal: modal id, head comment, text comment
        userService.sendToLMS();
        if (courseInfo.testScore < 75) {
          _this4.chartTitle = 'Тест не пройден.';
        } else {
          _this4.chartTitle = 'Тест пройден!';
        }
        Chart.defaults.global.defaultFontSize = 22;
        Chart.defaults.global.defaultFontColor = '#000';
        staticService.showModal('exercise', 'Итоговое тестирование', _this4.chartTitle /*'Набрано баллов: '+courseInfo.testScore+' из 100.'*/, '', "final");
        new Chart(document.getElementById("pie-chart"), {
          type: 'pie',
          data: {
            labels: ["Правильных ответов", "Неправильных ответов"],
            datasets: [{
              label: "",
              backgroundColor: ["#A3ADD8", "#F15A29"],
              data: [courseInfo.testRight, 27 - courseInfo.testRight]
            }]
          },
          options: {
            plugins: {
              fillter: {
                propagate: false
              }
            },
            title: {
              display: true,
              text: 'Ваш результат - ' + courseInfo.testScore + ' %'

            }
          }
        });
      }
    };

    this.checkAnswer = function () {
      var answersElements = document.getElementsByClassName('task-question'
      // console.warn('answersElements', answersElements) 
      // console.warn('questionList', this.questionList[this.currentQuest].answers) 

      );for (var i = 0; i < answersElements.length; i++) {
        var answer = _this4.questionList[_this4.currentQuest].answers[i].right,
            question = answersElements[i].classList.contains('radio-selected');

        // console.warn('check answers', answer, question)
        if (answer !== question) {
          // неверный ответ
          //console.warn('ответ на вопрос теста неверен')
          //console.info('score', this.testScore, this.testRight)
          return;
        }
      }
      //console.warn('ответ на вопрос верен')
      _this4.testScore += 100;
      _this4.testRight += 1;
      //console.info('score', this.testScore, this.testRight)
      // 
    };

    this.removeRestart = function () {
      _this4.startTest = 0;
      _this4.state = 0;
      _this4.testScore = 0;
      _this4.testRight = 0;
      _this4.currentQuest = 0;
      _this4.questionList = _.shuffle(JSON.parse(JSON.stringify(testDataObj.tests[0].groups[0].questions)));
      _this4.testTask.innerHTML = '';
      _this4.buildQuestion();
    };

    angular.element(document).ready(function () {
      // console.log(this.questionList)
      _this4.buildQuestion();
    });
  }
})();
;(function () {
  'use strict';

  FooterCtrl.$inject = ["$state", "$stateParams", "staticService", "userService", "courseInfo", "courseDataObj"];
  angular.module('courseApp').controller('FooterCtrl', FooterCtrl);

  /* @ngInject */
  function FooterCtrl($state, $stateParams, staticService, userService, courseInfo, courseDataObj) {
    var _this5 = this;

    if (window.bookmark && !window.bookmark.loaded) {
      window.bookmark.loaded = true;
      document.getElementsByClassName('paginator')[0].innerHTML = window.bookmark.page + ' / ' + staticService.getPageTotal();
      staticService.setBookmark(window.bookmark.chapterPage, window.bookmark.chapter);
    } else {
      document.getElementsByClassName('paginator')[0].innerHTML = courseInfo.bookmark.page + ' / ' + staticService.getPageTotal();
    }

    this.bookmark = staticService.getBookmark();
    // console.log('FooterCtrl::', this.bookmark)

    // alert(JSON.stringify(courseInfo))

    this.coursePage = document.querySelector('.page-wrapper');

    this.curChapterNum = Number($stateParams.chapter);
    // страница в главе
    this.curPageNum = Number($stateParams.page);
    // всего страниц в курсе
    this.pageAmountTotal = '' + staticService.getPageTotal();
    // всего страниц в главе
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    var currChapterObj = courseDataObj.chapters[this.curChapterNum - 1];
    this.chapterLocation = currChapterObj.chapter_location;
    this.pageLocation = currChapterObj.pages[this.curPageNum - 1].location;
    this.pageHasSound = currChapterObj.pages[this.curPageNum - 1].hasSound;
    console.warn('FooterCtrl:: locs: %s, %s, sound: %s', this.chapterLocation, this.pageLocation, this.pageHasSound);

    this.toBack = function () {
      if (_this5.curChapterNum == 1 && _this5.curPageNum == 1) {
        return;
      }

      if (_this5.curPageNum == 1) {
        _this5.curPageNum = staticService.getChapterObj(_this5.curChapterNum - 2).pages.length;
        _this5.curChapterNum--;
      } else {
        _this5.curPageNum--;
      }

      staticService.setBookmark(_this5.curPageNum, _this5.curChapterNum);
      _this5.coursePage.classList.add('backward');
      // console.warn('FooterCtrl:: локейшены', courseDataObj.chapters[this.curChapterNum-1].chapter_location, courseDataObj.chapters[this.curChapterNum-1].pages[this.curPageNum-1].location)

      $state.go('page', { chapter: _this5.curChapterNum, page: _this5.curPageNum });
    };

    this.toForward = function () {
      if (_this5.curChapterNum == staticService.getChaptersTotal().length && _this5.curPageNum == _this5.pageAmountChapter) {
        return;
      }

      if (_this5.curPageNum == _this5.pageAmountChapter) {
        _this5.curChapterNum++;
        _this5.curPageNum = 1;
      } else {
        _this5.curPageNum++;
      }

      staticService.setBookmark(_this5.curPageNum, _this5.curChapterNum);
      userService.setPageVisit(_this5.curChapterNum - 1, _this5.curPageNum);
      _this5.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this5.curChapterNum, page: _this5.curPageNum });
    };

    this.toggleAbout = function () {
      //
    };
    this.toggleHelp = function () {
      //
    };
  }
})();
;(function () {
  'use strict';

  HeaderCtrl.$inject = ["$state", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('HeaderCtrl', HeaderCtrl);

  /* @ngInject */
  function HeaderCtrl($state, $stateParams, staticService, userService) {
    var _this6 = this;

    this.chapters = staticService.getChaptersTotal();

    this.exercises = userService.exs;

    this.getExs = function () {
      return userService.getExs();
    };

    this.getPageType = function () {
      return userService.getPageType(Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
    };

    this.getNotes = function () {
      return userService.getUserNotes();
    };

    this.countExs = function () {
      return userService.getExs().length;
    };

    this.countDoneExs = function () {
      var exs = userService.getExs(),
          counter = 0;
      exs.forEach(function (item, i, arr) {
        if (item.status == 1) {
          counter++;
        }
      });
      return counter;
    };

    this.addInfo = function () {
      return staticService.getAddInfo();
    };

    this.exerciseData = function () {
      return staticService.getExercise();
    };

    this.title = {
      course: staticService.getCourseName().course,
      chapter: staticService.getChapterObj(Number($stateParams.chapter) - 1).title,
      exercise: this.chapters[Number($stateParams.chapter) - 1].pages[Number($stateParams.page) - 1].title
    };

    this.getModalState = function (index) {
      return staticService.getModalState(index);
    };

    this.menuPagesCounter = 1;
    this.countPages = function () {
      return _this6.menuPagesCounter++;
    };

    this.coursePage = document.querySelector('.page-wrapper');

    this.goFromMenu = function (page, chapter) {
      console.log('HeaderCtrl:: goFromMenu, page: %d, chapter: %d, SP: %s, SC: %s', page.page_id, chapter.chapter_id, $stateParams.page, $stateParams.chapter);

      if (chapter.chapter_id > Number($stateParams.chapter)) {
        _this6.coursePage.classList.remove('backward');
      } else if (chapter.chapter_id == Number($stateParams.chapter)) {
        if (page.page_id > Number($stateParams.page)) {
          _this6.coursePage.classList.remove('backward');
        } else {
          _this6.coursePage.classList.add('backward');
        }
      } else {
        _this6.coursePage.classList.add('backward');
      }

      $state.go('page', { chapter: chapter.chapter_id, page: page.page_id });

      staticService.closeModals();
    };
    this.getCurrent = function () {
      return staticService.getBookmark().page;
    };
    this.toggleMenu = function () {
      staticService.showModal('menu');
      scrollMenu();
    };

    this.scrollMenu = function () {

      _this6.curChapterNum = Number($stateParams.chapter);
      _this6.curPageNum = Number($stateParams.page);
      console.log("this.curChapterNum - ", _this6.curChapterNum, "this.curPageNum - ", _this6.curPageNum);
      var currentItem = document.querySelector('#page_' + _this6.curChapterNum + '_' + _this6.curPageNum);
      console.log("currentItem - ", currentItem);
      var menu = document.querySelector('.modal_nav-menu');

      console.log('curr offsetTop', currentItem.offsetTop);
      setTimeout(function () {
        menu.scrollTop = currentItem.offsetTop - 300;
      }, 30);
    };

    this.toggleStat = function () {
      // this.exercises = userService.exs;
      staticService.showModal('stats');
    };
    this.toggleModal = function (modalName) {
      staticService.showModal(modalName);
    };

    this.closeModals = function () {
      staticService.closeModals();
    };

    this.closeCourse = function () {
      userService.closeCourse();
    };

    this.curChapterNum = Number($stateParams.chapter);
    this.curPageNum = Number($stateParams.page);
    this.coursePage = document.querySelector('.page-wrapper');
    this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;

    this.toForward = function (exStatus) {
      if (!exStatus) {
        return;
      }

      if (_this6.curChapterNum == staticService.getChaptersTotal().length && _this6.curPageNum == _this6.pageAmountChapter) {
        return;
      }

      if (_this6.curPageNum == _this6.pageAmountChapter) {
        _this6.curChapterNum++;
        _this6.curPageNum = 1;
      } else {
        _this6.curPageNum++;
      }

      staticService.setBookmark(_this6.curPageNum, _this6.curChapterNum);
      userService.setPageVisit(_this6.curChapterNum - 1, _this6.curPageNum);
      _this6.coursePage.classList.remove('backward');
      $state.go('page', { chapter: _this6.curChapterNum, page: _this6.curPageNum });
    };

    this.complexEx = function () {
      var a = false;
      if (_this6.curChapterNum == 3 && _this6.curPageNum == 26) {
        a = true;
      }
      return a;
    };

    this.nextStep = function () {
      console.warn(_this6.exerciseData().answer);
      if (userService.getExProgress(_this6.curChapterNum - 1, _this6.curPageNum - 1)) {
        _this6.toForward(_this6.exerciseData().answer);
      } else {} //todo
    };
  }
})();

//;(function() {
//  'use strict';
//
//  angular
//    .module('courseApp')
//    .controller('HeaderCtrl', HeaderCtrl);
//
//    /* @ngInject */
//    function HeaderCtrl($state, $stateParams, staticService, userService) {
//
//      this.chapters = staticService.getChaptersTotal();
//
//      this.exercises = userService.exs;
//
//      this.getExs = () => userService.getExs();
//
//      this.getPageType = () => userService.getPageType(Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
//
//      this.getNotes = () => userService.getUserNotes();
//
//      this.countExs = () => userService.getExs().length;
//
//      this.countDoneExs = () => {
//        let exs = userService.getExs(),
//            counter = 0;
//        exs.forEach((item, i, arr) => {
//          if(item.status == 1) {
//            counter++;
//          }
//        })
//        return counter;
//      }
//
//      this.addInfo = () => staticService.getAddInfo();
//
//      this.exerciseData = () => staticService.getExercise();
//
//      this.title = {
//        course: staticService.getCourseName().course,
//        chapter: staticService.getChapterObj(Number($stateParams.chapter) -1 ).title,
//        exercise: this.chapters[Number($stateParams.chapter) - 1].pages[Number($stateParams.page) - 1].title
//      }
//
//      this.getModalState = (index) =>
//          staticService.getModalState(index);
//
//
//      this.menuPagesCounter = 1;
//      this.countPages = () => this.menuPagesCounter++;
//
//      this.coursePage = document.querySelector('.page-wrapper');
//
//      this.goFromMenu = (page, chapter) => {
//        console.log('HeaderCtrl:: goFromMenu, page: %d, chapter: %d, SP: %s, SC: %s', page.page_id, chapter.chapter_id, $stateParams.page, $stateParams.chapter)
//
//        if (chapter.chapter_id > Number($stateParams.chapter)) {
//          this.coursePage.classList.remove('backward');
//        } else if (chapter.chapter_id == Number($stateParams.chapter)) {
//          if (page.page_id > Number($stateParams.page)) {
//            this.coursePage.classList.remove('backward');
//          } else {
//            this.coursePage.classList.add('backward');
//          }
//        } else {
//          this.coursePage.classList.add('backward');
//        }
//
//        $state.go('page', {chapter: chapter.chapter_id, page: page.page_id});
//
//        staticService.closeModals();
//      }
//      this.getCurrent = () => {
//        return staticService.getBookmark().page;
//      }
//      this.toggleMenu = () => {
//        staticService.showModal('menu');
//        scrollMenu();
//      }
//
//      // console.warn(this.exerciseData().answer)
//      const scrollMenu = () => {
//        let currentItem = document.querySelector('.menu_list__page-item.current'),
//            menu = document.querySelector('.modal_nav-menu')
//
//        // console.warn('curr offsetTop',currentItem.offsetTop)
//        setTimeout(function() {
//          menu.scrollTop = currentItem.offsetTop;
//        }, 30)
//
//      }
//
//      this.toggleStat = () => {
//        // this.exercises = userService.exs;
//        staticService.showModal('stats');
//      }
//      this.toggleModal = (modalName) => {
//        staticService.showModal(modalName);
//      }
//
//      this.closeModals = ()=> {
//        staticService.closeModals();
//      }
//
//      this.closeCourse = ()=> {
//        userService.closeCourse();
//      }
//
//      this.curChapterNum = Number($stateParams.chapter);
//      this.curPageNum = Number($stateParams.page);
//      //console.log('curChapter:'+Number($stateParams.chapter)+'\n'+'curPage'+Number($stateParams.page))
//      this.coursePage = document.querySelector('.page-wrapper');
//      this.pageAmountChapter = staticService.getChapterObj(this.curChapterNum - 1).pages.length;
//
//      this.toForward = (exStatus) => {
//        if (!exStatus) { return; }
//
//        if(this.curChapterNum == staticService.getChaptersTotal().length && this.curPageNum == this.pageAmountChapter) { return; }
//
//        if (this.curPageNum == this.pageAmountChapter) {
//          this.curChapterNum++;
//          this.curPageNum = 1;
//        } else {
//          this.curPageNum++;
//        }
//
//        staticService.setBookmark(this.curPageNum, this.curChapterNum);
//        userService.setPageVisit(this.curChapterNum - 1, this.curPageNum);
//        this.coursePage.classList.remove('backward');
//        $state.go('page', {chapter: this.curChapterNum, page: this.curPageNum});
//      }
//
//    }
//})();

;(function () {
  'use strict';

  LeaderLineCtrl.$inject = ["$element", "$attrs", "userService"];
  angular.module('courseApp').component('makeLine', {
    bindigs: {
      lineTo: '@'
    },
    controller: 'LeaderLineCtrl'
  }).controller('LeaderLineCtrl', LeaderLineCtrl

  /* @ngInject */
  );function LeaderLineCtrl($element, $attrs, userService) {

    /*angular.element(document).ready(()=> {
      this.elementsFrom = JSON.parse($attrs.linefrom);
      this.elementsTo = JSON.parse($attrs.lineto);
      // console.log(this.elementsFrom, this.elementsTo)
      
      for (var i = 0; i < this.elementsFrom.length; i++) {
        console.log('draw line')
        let start = document.getElementById(this.elementsFrom[i]),
            end = document.getElementById(this.elementsTo[i]),
            params = JSON.parse(start.getAttribute('data'));
            // console.log(params)
        new LeaderLine(
            start,
            end,
            params
          )
      }
    })*/

    //TODO: 
    // var e = document.getElementsByClassName('leader-line')
    // e[0].remove()
    // 
  }
})();
;(function () {
  'use strict';

  pageVideoCtrl.$inject = ["staticService"];
  angular.module('courseApp').component('pageVideo', {
    bindings: {
      videourl: '@', // ссылка на видео
      videoposter: '@', // превью картинка
      suburl: '@', // ссылка на субтитры
      videowidth: '@',
      videoheight: '@'
    },
    templateUrl: 'js/components/page-video/pageVideoTmpl.html',
    controller: 'pageVideoCtrl',
    controllerAs: '$ctrl'
  }).controller('pageVideoCtrl', pageVideoCtrl);

  /* @ngInject */
  function pageVideoCtrl(staticService) {
    var _this7 = this;

    this.openVideo = function () {
      var videoElement = document.querySelector('.modal_video__body'),
          videoStr = "<video class=\"video-js vjs-default-skin video-element my-home-video\" controls preload=\"auto\"\n                               width=\"" + _this7.videowidth + "\" height=\"" + _this7.videoheight + "\" poster=\"" + _this7.videoposter + "\" vjs-video>\n                            <source src=\"" + _this7.videourl + "\" type=\"video/mp4\">\n                            <track enabled kind=\"captions\" src=\"" + _this7.suburl + "\" srclang=\"ru\" label=\"Russian Subtitles\" default />\n                        </video>";
      staticService.showModal('video');
      videoElement.innerHTML = videoStr;
    };
  }
})();
;(function () {
  'use strict';

  ComboChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskComboChoice', {
    templateUrl: 'js/components/task-combo-choice/taskComboChoiceTmpl.html',
    controller: 'ComboChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ComboChoiceCtrl', ComboChoiceCtrl);

  /* @ngInject */
  function ComboChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this8 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr
    // console.warn('ComboCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ComboCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ComboCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ComboCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this8.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this8.selectAnswer = function (parentIndex, index) {
        if (_this8.state == 2) {
          return;
        }

        switch (_this8.taskExs[parentIndex].taskType) {
          case "multi":
            selectMulti(_this8.active[parentIndex][index]);
            break;
          case "single":
            selectSingle(_this8.active[parentIndex], index);
            break;
        }

        // console.log('select', this.active[parentIndex][index])

        function selectMulti(item) {
          // console.log('trace ===>>', )
          item.selected = !item.selected;
        }
        function selectSingle(item) {
          item.forEach(function (elem) {
            elem.selected = false;
          });
          item[index].selected = true;
        }

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this8.active.length; i++) {
          for (var j = 0; j < _this8.active[i].length; j++) {
            if (_this8.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this8.active.length) {
          if (_this8.test) {
            $scope.$emit('myTestState', 1);
          }
          _this8.state = 1;
        } else {
          if (_this8.test) {
            $scope.$emit('myTestState', 0);
          }
          _this8.state = 0;
        }
      }; // end of selectAnswer()

      _this8.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this8.userAttempt === _this8.attemptNum) {
          _this8.userAttempt = 0;
        }
        _this8.userAttempt++;
        _this8.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this8.taskExs.length; i++) {
          var item_i = _this8.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this8.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskComboChoice:: упражнение провалено')

              if (_this8.userAttempt == _this8.attemptNum && _this8.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this8.taskData.messages[_this8.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskComboChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this8.taskData.messages[0], true);
      };

      _this8.removeRestart = function () {

        _this8.state = 0;

        if (_this8.taskOptions.shuffle) {
          _this8.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this8.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskComboChoice:: showAnswer')
        for (var i = 0; i < _this8.taskExs.length; i++) {
          for (var j = 0; j < _this8.taskExs[i].questionList.length; j++) {
            _this8.active[i][j].selected = _this8.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  taskragCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskDrag', {
    templateUrl: 'js/components/task-drag/taskDragTmpl.html',
    controller: 'taskragCtrl',
    controllerAs: '$ctrl'
  }).controller('taskragCtrl', taskragCtrl);

  /* @ngInject */
  function taskragCtrl($scope, $stateParams, $attrs, staticService, userService) {

    angular.element(document).ready(function () {});
  }
})();
;(function () {
  'use strict';

  ManyMultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManyMultiChoice', {
    templateUrl: 'js/components/task-many-multi-choice/taskManyMultiChoiceTmpl.html',
    controller: 'ManyMultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManyMultiChoiceCtrl', ManyMultiChoiceCtrl);

  /* @ngInject */
  function ManyMultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this9 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr
    // console.warn('ManyMultiCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManyMultiCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManyMultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManyMultiCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this9.active[i] = item.questionList.map(function (item, i) {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this9.selectAnswer = function (parentIndex, index) {
        if (_this9.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this9.active[parentIndex][index].selected = !_this9.active[parentIndex][index].selected;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this9.active.length; i++) {
          for (var j = 0; j < _this9.active[i].length; j++) {
            if (_this9.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this9.active.length) {
          if (_this9.test) {
            $scope.$emit('myTestState', 1);
          }
          _this9.state = 1;
        } else {
          if (_this9.test) {
            $scope.$emit('myTestState', 0);
          }
          _this9.state = 0;
        }
      }; // end of selectAnswer()

      _this9.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this9.userAttempt === _this9.attemptNum) {
          _this9.userAttempt = 0;
        }
        _this9.userAttempt++;
        _this9.state = 2;

        // console.log('mas => r, s', this.taskExs, this.active)
        for (var i = 0; i < _this9.taskExs.length; i++) {
          var item_i = _this9.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right, this.active[i][j])
            if (item_i[j].right != _this9.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManyMultiChoice:: упражнение провалено')

              if (_this9.userAttempt == _this9.attemptNum && _this9.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[_this9.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManyMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this9.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this9.removeRestart = function () {

        _this9.state = 0;

        if (_this9.taskOptions.shuffle) {
          _this9.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this9.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var i = 0; i < _this9.taskExs.length; i++) {
          for (var j = 0; j < _this9.taskExs[i].questionList.length; j++) {
            _this9.active[i][j].selected = _this9.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice', {
    templateUrl: 'js/components/task-many-single-choice/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoiceCtrl', ManySingleChoiceCtrl);

  /* @ngInject */
  function ManySingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this10 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr
    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.taskExs.forEach(function (item, i) {
          item.questionList = _.shuffle(item.questionList);
          _this10.active[i] = item.questionList.map(function () {
            return { selected: 0 };
          });
        });
      }
    }
    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this10.selectAnswer = function (parentIndex, index) {
        if (_this10.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this10.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this10.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var i = 0; i < _this10.active.length; i++) {
          for (var j = 0; j < _this10.active[i].length; j++) {
            if (_this10.active[i][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this10.active.length) {
          if (_this10.test) {
            $scope.$emit('myTestState', 1);
          }
          _this10.state = 1;
        } else {
          if (_this10.test) {
            $scope.$emit('myTestState', 0);
          }
          _this10.state = 0;
        }
      };

      _this10.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this10.userAttempt === _this10.attemptNum) {
          _this10.userAttempt = 0;
        }
        _this10.userAttempt++;
        _this10.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this10.taskExs.length; i++) {
          var item_i = _this10.taskExs[i].questionList;
          // console.log('item_i =====================', item_i)

          for (var j = 0; j < item_i.length; j++) {
            // console.log('item_i[j].right =>', item_i[j].right)
            if (item_i[j].right != _this10.active[i][j].selected) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this10.userAttempt == _this10.attemptNum && _this10.taskOptions.showAnswer) {
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[_this10.userAttempt], false);
              return;
            }
          }
        }
        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this10.taskData.messages[0], true);
      };

      _this10.removeRestart = function () {

        _this10.state = 0;

        if (_this10.taskOptions.shuffle) {
          _this10.taskExs.forEach(function (item, i) {
            item.questionList = _.shuffle(item.questionList);
            _this10.active[i] = item.questionList.map(function (item, i) {
              return { selected: 0 };
            });
          });
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var i = 0; i < _this10.taskExs.length; i++) {
          for (var j = 0; j < _this10.taskExs[i].questionList.length; j++) {
            _this10.active[i][j].selected = _this10.taskExs[i].questionList[j].right;
          }
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  ManySingleChoice42Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskManySingleChoice42', {
    templateUrl: 'js/components/task-many-single-choice-exc42/taskManySingleChoiceTmpl.html',
    controller: 'ManySingleChoice42Ctrl',
    controllerAs: '$ctrl'
  }).controller('ManySingleChoice42Ctrl', ManySingleChoice42Ctrl);

  /* @ngInject */
  function ManySingleChoice42Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this11 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    this.taskData = staticService.getData($stateParams, 'data');
    this.taskOptions = this.taskData.options; // obj
    console.log(JSON.parse(JSON.stringify(this.taskData.exs)));
    this.exampleList = [];

    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr

    // console.warn('ManySingleCCtrl:: taskOptions:', this.taskOptions);
    // console.warn('ManySingleCCtrl:: taskExs:', this.taskExs);

    // массив для работы с ответами
    this.active = [];
    this.rightArray = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    if (this.test) {
      // кол-во попыток
      this.attemptNum = -1;

      // test setup
      // console.log('ManySingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('ManySingleCCtrl:: Answers:', this.questionList)
    } else {
      // кол-во попыток
      this.attemptNum = this.taskOptions.attempts;

      // мешаем вопросы
      if (this.taskOptions.shuffle) {
        this.rightArray = this.taskExs[0].questionList.filter(function (element) {
          return element.right > 0;
        });
        //console.log("rightArray", rightArray)
        var wrongArray = _.shuffle(this.taskExs[0].questionList).filter(function (element) {
          return element.right === 0;
        });
        //console.log("wrongArray", wrongArray)
        this.rightArray = _.shuffle(this.rightArray.concat(wrongArray[0], wrongArray[1]));
        // console.log("rightArray", this.rightArray)
        for (var i = 0; i < 2; i++) {
          this.active[i] = [];
          this.active[i] = this.rightArray.map(function () {
            return { selected: 0 };
          });
        }
        // console.log("this.active", this.active)
      }
    }

    // console.log('this.active', this.active)
    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this11.selectAnswer = function (parentIndex, index) {
        if (_this11.state == 2) {
          return;
        }
        // console.log('select', this.active[parentIndex][index])
        _this11.active[parentIndex].forEach(function (item) {
          item.selected = false;
        });
        _this11.active[parentIndex][index].selected = true;

        var checkedTasks = 0,
            check = false;

        for (var _i2 = 0; _i2 < _this11.active.length; _i2++) {
          for (var j = 0; j < _this11.active[_i2].length; j++) {
            if (_this11.active[_i2][j].selected) {
              check = true;
            }
          }
          if (check) {
            checkedTasks++;
            check = false;
          }
        }

        if (checkedTasks == _this11.active.length) {
          if (_this11.test) {
            $scope.$emit('myTestState', 1);
          }
          _this11.state = 1;
        } else {
          if (_this11.test) {
            $scope.$emit('myTestState', 0);
          }
          _this11.state = 0;
        }
      };

      _this11.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this11.userAttempt === _this11.attemptNum) {
          _this11.userAttempt = 0;
        }
        _this11.userAttempt++;
        _this11.state = 2;

        for (var _i3 = 0; _i3 < _this11.active.length; _i3++) {
          for (var j = 0; j < _this11.active[_i3].length; j++) {
            if (_this11.active[_i3][j].selected > 0 && _this11.rightArray[j].right == 0) {
              //упражнение провалено
              // console.warn('taskManySingleChoice:: упражнение провалено')

              if (_this11.userAttempt == _this11.attemptNum && _this11.taskOptions.showAnswer) {
                showAnswer();
              }
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[_this11.userAttempt], false);
              return;
            }
          }
        }

        // console.warn('taskManySingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this11.taskData.messages[0], true);
      };

      _this11.removeRestart = function () {

        _this11.state = 0;

        if (_this11.taskOptions.shuffle) {
          for (var i = 0; i < 2; i++) {
            _this11.active[i] = [];
            _this11.active[i] = _this11.rightArray.map(function () {
              return { selected: 0 };
            });
          }
        }
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i4 = 0; _i4 < _this11.active.length; _i4++) {
          for (var j = 0; j < _this11.active[_i4].length; j++) {

            if (_this11.rightArray[j].right == _i4 + 1) {
              _this11.active[_i4][j].selected = _this11.rightArray[j].right;
            } else {
              _this11.active[_i4][j].selected = 0;
            }
          }
        }
      }; // end of showAnswer()
    });
  }
})();
;(function () {
  'use strict';

  MarkerChoiceCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskMarkerChoice', {
    templateUrl: 'js/components/task-marker-choice/taskMarkerChoiceTmpl.html',
    controller: 'MarkerChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MarkerChoiceCtrl', MarkerChoiceCtrl);

  /* @ngInject */
  function MarkerChoiceCtrl($scope, $stateParams, staticService, userService) {
    var _this12 = this;

    this.taskData = staticService.getData($stateParams, 'data');

    // Вопрос упражнения
    this.taskText = this.taskData.taskText;

    // массив маркеров
    this.markers = this.taskData.markers;

    // сколько ответов будет видно на странице
    var qCount = this.taskData.qCount;
    if (this.taskData.qCount > this.taskData.questionList.length) {
      var _qCount = this.taskData.questionList.length;
    }

    // составляем список ответов и мешаем егo
    // _.sample(list, [n])
    if (this.taskData.shuffle) {
      var randomList = JSON.parse(JSON.stringify(_.shuffle(this.taskData.questionList))),
          usedId = [];
      this.questionList = [];

      // рандомно набираем по 1 ответу к каждому маркеру
      for (var _i5 = 0; _i5 < this.markers.length; _i5++) {
        for (var j = 0; j < randomList.length; j++) {
          if (this.markers[_i5].id == randomList[j].right) {
            this.questionList.push(randomList[j]);
            usedId.push(j);
            break;
          }
        }
      }
      // добираем ответы до нужного значения (qCount)
      for (var _i6 = 0; _i6 < randomList.length; _i6++) {
        var check = false;
        for (var _j = 0; _j < usedId.length; _j++) {
          if (_i6 == usedId[_j]) {
            check = true;
            break;
          }
        }
        if (check) {
          continue;
        } else {
          this.questionList.push(randomList[_i6]);
        }

        if (this.questionList.length >= qCount) {
          break;
        }
      }
      // ещё раз мешаем
      this.questionList = _.shuffle(this.questionList);
      // console.log('this.questionList:: =>', this.questionList, usedId)
    } else {
      this.questionList = this.taskData.questionList;
    }

    this.useVideo = staticService.getData($stateParams, 'useVideo');
    this.videoPoster = staticService.getData($stateParams, 'videoPoster');

    // массив для работы с ответами
    this.active = [];
    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;
    // выделенный маркер
    this.marker = -1;
    // кол-во попыток
    this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
      this.active[i].marker = -1;
    }

    angular.element(document).ready(function () {
      if (_this12.useVideo) {
        // set video bg
        document.getElementsByClassName('btn_task-video')[0].style.background = 'url(' + _this12.videoPoster + ')';
      }

      /**
      *   Выбор цвета маркера
      */
      _this12.selectMarker = function (marker) {
        _this12.marker = marker;
      };

      /**
      *   Подкрашиваем вариант
      */
      _this12.selectAnswer = function (index, $event) {
        if (_this12.marker == -1 || _this12.state == 2) {
          return;
        }

        _this12.active[index].selected = 1;
        _this12.active[index].marker = _this12.marker;
        $event.currentTarget.setAttribute('data', 'marker' + _this12.marker);
        _this12.state = 1;
      };
    });

    this.checkAnswer = function (e) {

      if (_this12.userAttempt === _this12.attemptNum) {
        _this12.userAttempt = 0;
      }
      _this12.userAttempt++;
      _this12.state = 2;

      for (var _i7 = 0; _i7 < _this12.questionList.length; _i7++) {
        // console.log('rightAnswer:', this.questionList[i].rightAnswer, 'userAnswer:', this.active[i].marker)
        if (_this12.questionList[_i7].right != _this12.active[_i7].marker) {
          //упражнение провалено
          if (_this12.userAttempt === 3) {
            // console.log('taskMarkerChoice:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[_this12.userAttempt], false);
          return;
        }
      }
      // console.log('taskMarkerChoice:: упражнение верно')
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this12.taskData.messages[0], true);
    };
    this.removeRestart = function () {
      var aItems = document.getElementsByClassName('task__marker-choice-item');

      for (var i = 0; i < _this12.active.length; i++) {
        _this12.active[i].selected = false;
        _this12.active[i].marker = -1;
        aItems[i].setAttribute('data', 'marker');
      }
      _this12.state = 0;
      _this12.marker = -1;

      _this12.questionList = _.shuffle(_this12.questionList);
    }; // end of removeRestart

    this.showVideo = function () {
      var videoElement = document.querySelector('.modal_video__body');

      _this12.videoUrl = staticService.getData($stateParams, 'videoUrl');
      // console.warn('HeaderCtrl:: this.videoUrl:', this.videoUrl)
      _this12.videoPoster = staticService.getData($stateParams, 'videoPoster');
      _this12.videoWidth = staticService.getData($stateParams, 'videoWidth');
      _this12.videoHeight = staticService.getData($stateParams, 'videoHeight');

      staticService.showModal('video');
      var videoStr = "<video class=\"video-js vjs-default-skin video-element\" controls preload=\"auto\"\n                               width=\"" + _this12.videoWidth + "\" height=\"" + _this12.videoHeight + "\" poster=\"" + _this12.videoPoster + "\" vjs-video>\n                            <source src=\"" + _this12.videoUrl + "\" type=\"video/mp4\">\n                        </video>";
      videoElement.innerHTML = videoStr;
    }; // end of showVideo()

    var showAnswer = function showAnswer() {
      var itemList = document.querySelectorAll('.task__marker-choice-item');
      for (var i = 0; i < itemList.length; i++) {
        itemList[i].setAttribute('data', 'marker' + _this12.questionList[i].right);
      }
    };
  }
})();
;(function () {
  'use strict';

  MultiBoxCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiBox', {
    templateUrl: 'js/components/task-multi-box/taskMultiBoxTmpl.html',
    controller: 'MultiBoxCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiBoxCtrl', MultiBoxCtrl);

  /* @ngInject */
  function MultiBoxCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this13 = this;

    var answers = [[0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1]];

    // массив для работы с ответами
    this.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    this.taskData = staticService.getData($stateParams, 'data');

    // кол-во попыток
    // this.attemptNum = staticService.getData($stateParams, 'attempts');
    this.attemptNum = 3;

    this.userAttempt = 0;

    this.showComment = false;

    angular.element(document).ready(function () {

      _this13.selectAnswer = function (index, row) {
        if (_this13.state == 2) {
          return;
        }
        // console.log('select', index)
        _this13.active[row][index] = !_this13.active[row][index];
        var check = false;
        for (var i = 0; i < _this13.active.length; i++) {
          for (var j = 0; j < _this13.active[i].length; j++) {
            if (_this13.active[i][j]) {
              check = true;
              break;
            }
          }
        }
        if (check) {
          _this13.state = 1;
        } else {
          _this13.state = 0;
        }
      };

      _this13.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this13.userAttempt === _this13.attemptNum) {
          _this13.userAttempt = 0;
        }
        _this13.userAttempt++;
        _this13.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this13.active.length; i++) {
          for (var j = 0; j < _this13.active[i].length; j++) {
            // console.log('taskMultiBox:: checking', this.active[i][j], answers[i][j])
            if (_this13.active[i][j] != answers[i][j]) {
              //упражнение провалено
              if (_this13.userAttempt === 3) {
                // console.log('taskMultiBox:: attempt 3')
                showAnswer();
              }
              // to userService (баллы, статус, глава, страница)
              userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
              staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[_this13.userAttempt], false);
              return;
            }
          }
        }

        // console.log('taskMultiBox:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this13.taskData.messages[0], true);
      }; // end of checkAnswer()

      _this13.removeRestart = function () {

        _this13.active = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        _this13.state = 0;
      }; // end of removeRestart
    });
    var showAnswer = function showAnswer() {
      _this13.active = answers;
    };
  }; // end of MultiBoxCtrl()
})();
;(function () {
  'use strict';

  MultiChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskMultiChoice', {
    templateUrl: 'js/components/task-multi-choice/taskMultiChoiceTmpl.html',
    controller: 'MultiChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('MultiChoiceCtrl', MultiChoiceCtrl);

  /* @ngInject */
  function MultiChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this14 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    var qCount = 0;
    if (this.taskData.qCount == -1) {
      qCount = this.taskData.questionList.length;
    } else {
      qCount = this.taskData.qCount;
    }

    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('MultiCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)

      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;

      // console.log('MultiCCtrl:: Answers:', this.questionList)
    } else {
      // Вопрос упражнения
      this.taskText = this.taskData.taskText;
      this.questionList = _.sample(this.taskData.questionList, qCount);
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this14.selectAnswer = function (index) {
        if (_this14.state == 2) {
          return;
        }
        // console.log('select', index)
        _this14.active[index].selected = !_this14.active[index].selected;
        var check = false;
        for (var _i8 = 0; _i8 < _this14.active.length; _i8++) {
          if (_this14.active[_i8].selected) {
            check = true;
            break;
          }
        }
        if (check) {
          if (_this14.test) {
            $scope.$emit('myTestState', 1);
          }
          _this14.state = 1;
        } else {
          if (_this14.test) {
            $scope.$emit('myTestState', 0);
          }
          _this14.state = 0;
        }
      };

      _this14.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this14.userAttempt === _this14.attemptNum) {
          _this14.userAttempt = 0;
        }
        _this14.userAttempt++;
        _this14.state = 2;

        // console.log('mas => r, s', this.questionList, this.active)
        for (var i = 0; i < _this14.questionList.length; i++) {
          // console.log('taskMultiChoice:: упражнение не верно')
          if (_this14.questionList[i].right != _this14.active[i].selected) {
            //упражнение провалено

            if (_this14.userAttempt == _this14.attemptNum && _this14.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[_this14.userAttempt], false);
            return;
          }
        }
        // console.log('taskMultiChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this14.taskData.messages[0], true);
      };

      _this14.removeRestart = function () {

        for (var i = 0; i < _this14.active.length; i++) {
          _this14.active[i].selected = false;
        }
        _this14.state = 0;

        _this14.questionList = _.sample(_this14.taskData.questionList, qCount);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskMultiChoice:: showAnswer')
        for (var _i9 = 0; _i9 < _this14.questionList.length; _i9++) {
          _this14.active[_i9].selected = _this14.questionList[_i9].right;
        }
      };
    });
  }
})();
;(function () {
  'use strict';

  NoteCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskNote', {
    templateUrl: 'js/components/task-note/taskNoteTmpl.html',
    controller: 'NoteCtrl',
    controllerAs: '$ctrl'
  }).controller('NoteCtrl', NoteCtrl);

  /* @ngInject */
  function NoteCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this15 = this;

    this.items = [];
    var chapter = Number($stateParams.chapter) - 1,
        page = Number($stateParams.page) - 1;

    this.taskData = staticService.getData($stateParams, 'data');
    this.useColumns = this.taskData.useColumns;

    var loadNotes = function loadNotes() {
      var data = userService.getUserNotes();

      data.forEach(function (item) {
        if (item.chapter_id == chapter && item.page_id == page) {
          _this15.items = item;
        }
      });
    };

    this.range = function (bool) {

      var range = [],
          from = 0,
          to = _this15.items.fields.length / 2;

      if (!bool) {
        from = _this15.items.fields.length / 2;
        to = _this15.items.fields.length;
      }

      for (var i = from; i < to; i++) {
        range.push(_this15.items.fields[i]);
      }
      return range;
    };

    loadNotes

    // console.log('NoteCtrl:: fields:', this.items)

    ();this.saveNote = function () {
      var inputs = document.getElementsByClassName('task-note_item_input');
      // console.log(inputs)
      for (var i = 0; i < inputs.length; i++) {
        // console.log(inputs[i].value)
        _this15.items.fields[i].text = inputs[i].value;
      }

      userService.setUserNotes(_this15.items, chapter, page);
      staticService.showModal('exercise', 'Записная книжка', 'Записи сохранены');
    };
  }
})();
;(function () {
  'use strict';

  SelectCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSelect', {
    templateUrl: 'js/components/task-select/taskSelectTmpl.html',
    controller: 'SelectCtrl',
    controllerAs: '$ctrl'
  }).controller('SelectCtrl', SelectCtrl);

  /* @ngInject */
  function SelectCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this16 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr

    for (var i = 0; i < this.taskExs.length; i++) {
      this.taskExs[i].questionList.questions = this.taskExs[i].questionList.questions.map(function (item) {
        item.default = _this16.taskData.defaultLabel;
        item.v_id = -1;
        item.open = 0;
        return item;
      });
      this.taskExs[i].questionList.variants = this.taskExs[i].questionList.variants.map(function (item) {
        item.selected = -1;
        item.connectedTo = -1;
        return item;
      });
    }

    // console.warn('SelectCtrl:: taskOptions:', this.taskOptions);
    // console.warn('SelectCtrl:: taskExs:', this.taskExs);

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i10 = 0; _i10 < this.taskExs.length; _i10++) {
        this.taskExs[_i10].questionList.variants = _.shuffle(this.taskExs[_i10].questionList.variants);
        // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
      }
    }

    this.showComment = false;

    this.selectChange = function (e, v_id, questIndex, taskIndex) {
      // console.log('select element', v_id, questIndex, taskIndex)
      if (v_id == -1) {
        return;
      }
      if (_this16.state == 2) {
        return;
      }
      // console.log( index )

      // проверяем был ли уже дан ответ на вопрос
      if (_this16.taskExs[taskIndex].questionList.questions[questIndex].v_id != -1) {

        var _v_id = _this16.taskExs[taskIndex].questionList.questions[questIndex].v_id;

        for (var _i11 = 0; _i11 < _this16.taskExs[taskIndex].questionList.variants.length; _i11++) {
          if (_this16.taskExs[taskIndex].questionList.variants[_i11].v_id == _v_id) {
            _this16.taskExs[taskIndex].questionList.variants[_i11].selected = -1;
          }
          break;
        }
      }

      // в вопросе отмечаем какой на него дали ответ
      _this16.taskExs[taskIndex].questionList.questions[questIndex].v_id = v_id;

      // отмечаем, что ответ использован
      for (var _i12 = 0; _i12 < _this16.taskExs[taskIndex].questionList.variants.length; _i12++) {
        if (_this16.taskExs[taskIndex].questionList.variants[_i12].v_id == v_id) {
          _this16.taskExs[taskIndex].questionList.variants[_i12].selected = 1;
          // выводим лейбл ответа
          _this16.taskExs[taskIndex].questionList.questions[questIndex].default = _this16.taskExs[taskIndex].questionList.variants[_i12].label;
        }
      }

      // проверяем везде ли выбрали ответ
      var check = true;
      for (var _i13 = 0; _i13 < _this16.taskExs.length; _i13++) {
        for (var j = 0; j < _this16.taskExs[_i13].questionList.questions.length; j++) {
          if (_this16.taskExs[_i13].questionList.questions[j].v_id == -1) {
            check = false;
            break;
          }
        }
      }

      if (check) {
        _this16.state = 1;
      }

      // можно ли выбирать одни и теже ответы
      if (!_this16.taskExs[taskIndex].sameQ) {
        _this16.filteredList = _this16.getNotSelected(taskIndex);
      }
      _this16.toggleSelect(e, questIndex, taskIndex);

      e.stopPropagation();
    }; // end of selectChange()


    this.checkAnswer = function () {
      // console.log('SelectCtrl:: checkAnswer:')
      if (_this16.userAttempt === _this16.attemptNum) {
        _this16.userAttempt = 0;
      }
      _this16.userAttempt++;
      _this16.state = 2;

      for (var _i14 = 0; _i14 < _this16.taskExs.length; _i14++) {
        for (var j = 0; j < _this16.taskExs[_i14].questionList.questions.length; j++) {

          var thisQuestion = _this16.taskExs[_i14].questionList.questions[j];

          if (_this16.taskData.exs[_i14].questionList.variants[thisQuestion.v_id].q_id != thisQuestion.q_id) {
            // неправильно дан ответ
            if (_this16.userAttempt == _this16.attemptNum && _this16.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[_this16.userAttempt], false);
            return;
          }
        }
      }

      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this16.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {

      _this16.state = 0;
      // мешаем вопросы
      if (_this16.taskOptions.shuffle) {
        for (var _i15 = 0; _i15 < _this16.taskExs.length; _i15++) {
          _this16.taskExs[_i15].questionList.variants = _.shuffle(_this16.taskExs[_i15].questionList.variants);
          // this.taskExs[i].questionList.questions = _.shuffle(this.taskExs[i].questionList.questions);
        }
      }
      // this.active = angular.fromJson(JSON.stringify(this.taskExs));

      for (var _i16 = 0; _i16 < _this16.taskExs.length; _i16++) {
        for (var j = 0; j < _this16.taskExs[_i16].questionList.questions.length; j++) {
          _this16.taskExs[_i16].questionList.questions[j].default = _this16.taskData.defaultLabel;
          _this16.taskExs[_i16].questionList.questions[j].open = 0;
          _this16.taskExs[_i16].questionList.questions[j].v_id = -1;
        }
        for (var _j2 = 0; _j2 < _this16.taskExs[_i16].questionList.variants.length; _j2++) {
          _this16.taskExs[_i16].questionList.variants[_j2].selected = -1;
        }
      }
      _this16.filteredList = _this16.getNotSelected(-1);
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      console.log('SelectCtrl:: showAnswer:'

      // this.userAttempt = 0;

      );for (var i = 0; i < _this16.taskExs.length; i++) {
        for (var j = 0; j < _this16.taskExs[i].questionList.questions.length; j++) {
          for (var k = 0; k < _this16.taskExs[i].questionList.variants.length; k++) {
            if (_this16.taskExs[i].questionList.questions[j].q_id == _this16.taskExs[i].questionList.variants[k].q_id) {
              _this16.taskExs[i].questionList.questions[j].default = _this16.taskExs[i].questionList.variants[k].label;
              break;
            }
          }
        }
      }
    }; // end of showAnswer()

    this.toggleSelect = function (e, questIndex, taskIndex) {
      // console.log('toggleSelect', questIndex, taskIndex);
      _this16.taskExs[taskIndex].questionList.questions[questIndex].open = !_this16.taskExs[taskIndex].questionList.questions[questIndex].open;
      e.stopPropagation();
    }; // end of toggleSelect()

    this.getNotSelected = function (taskIndex) {
      // console.log('filering::', taskIndex)
      var filtered = [];
      for (var _i17 = 0; _i17 < _this16.taskExs.length; _i17++) {
        filtered[_i17] = [];
        if (_i17 == taskIndex) {
          for (var j = 0; j < _this16.taskExs[_i17].questionList.variants.length; j++) {
            if (_this16.taskExs[_i17].questionList.variants[j].selected < 0) {
              filtered[_i17].push(_this16.taskExs[_i17].questionList.variants[j]);
            }
          }
        } else {
          filtered[_i17] = JSON.parse(JSON.stringify(_this16.taskExs[_i17].questionList.variants));
        }
      }
      return filtered;
    }; // end of getNotSelected()

    //инициализация списка ответов
    this.filteredList = this.getNotSelected(-1);
  }; // end of SelectCtrl()
})();
(function () {
  'use strict';

  TaskSequenceQuestCtrl.$inject = ["$stateParams", "$document", "$element", "staticService", "userService"];
  angular.module('courseApp').controller('TaskSequenceQuestCtrl', TaskSequenceQuestCtrl);

  /* @ngInject */
  function TaskSequenceQuestCtrl($stateParams, $document, $element, staticService, userService) {
    var self = this,
        variantNum = 3,
        // number of variants in blocks
    currentQuestNum = 0; // current question number

    self.taskData = staticService.getData($stateParams, 'exs');

    /* 
    *  self.taskData - the main object for this exercise
    * 
    *  "data": {
    *    "exs": {
    *      "taskText": "<p>Какой характеристики не хватает формулировке для того, чтобы стать целью?</p><p>Какой вопрос необходимо задать, чтобы трансформировать данную формулировку в цель?</p><p>Выберите правильный уточняющий вопрос и характеристику. Переход далее осуществляется только при правильном ответе.</p><p>Темным цветом написана формулировка, светлым – цель, которой она должна стать.</p>",
    *      "variant": [{
    *        "final": "Нашему отделу необходимо поднять уровень продаж. ",
    *        "initial": "Необходимо работать более эффективно.",
    *        "characterNum": 0,
    *        "questionNum": 0
    *      }],
    *      "characterList": [
    *        "Четкость, ясность",
    *        "Измеримость",
    *        "Ограниченность во времени",
    *        "Достижимость",
    *        "Актуальность",
    *        "Письменная формулировка",
    *        "Мобилизующий фактор"
    *      ],
    *      "questionList": [
    *        "Кому необходимо работать более эффективно? Что значит «более эффективно»?",
    *        "На сколько процентов необходимо поднять уровень продаж?",
    *        "К какому сроку?",
    *        "Какими путями?",
    *        "Зачем надо работать более эффективно?",
    *        "Как долго надо работать более эффективно?"
    *      ]
    *    }
    *  }
    */

    self.showVariant = false;
    self.show = false;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: true
    };

    self.userAnswer = [];
    self.userAnswer.length = variantNum + 1;
    for (var i = 0; i < self.userAnswer.length; i++) {
      self.userAnswer[i] = {};
      self.userAnswer[i].character = "";
      self.userAnswer[i].characterNum = "";
      self.userAnswer[i].question = "";
      self.userAnswer[i].questionNum = "";
    };
    if (self.taskData.variant.length == 1) {
      self.twoPartAnswer = ' вопрос';
    } else if (1 < self.taskData.variant.length < 5) {
      self.twoPartAnswer = ' вопроса';
    } else {
      self.twoPartAnswer = ' вопросов';
    }
    self.completeAnswer = self.taskData.variant.length + self.twoPartAnswer;

    function getArr(type, arr, num) {
      var newArr = _.shuffle(arr.filter(function (elem, i) {
        return i !== num;
      })),
          randomNum = _.random(0, variantNum);

      newArr.splice(randomNum, 0, arr[num]);
      newArr.length = variantNum + 1;

      self.userAnswer.forEach(function (elem) {
        elem[type + "Num"] = randomNum;
      });
      return newArr;
    };

    self.getVariantList = function (elem, i) {
      return i <= currentQuestNum;
    };

    self.orderByQuest = function (elem, i) {
      return i === currentQuestNum;
    };

    self.getAnswer = function (prop, index) {
      if (prop === "character") {
        self.userAnswer.forEach(function (elem) {
          return elem.character = "";
        });
        self.userAnswer[index].character = index === self.userAnswer[index].characterNum ? true : false;
      } else {
        self.userAnswer.forEach(function (elem) {
          return elem.question = "";
        });
        self.userAnswer[index].question = index === self.userAnswer[index].questionNum ? true : false;
      }
      if (self.userAnswer.filter(function (elem) {
        return elem.character !== "";
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question !== "";
      }).length) {
        self.btnDisabledState.answer = false;
      }
    };

    // check answers
    self.checkAnswer = function () {
      if (self.userAnswer.filter(function (elem) {
        return elem.character === true;
      }).length && self.userAnswer.filter(function (elem) {
        return elem.question === true;
      }).length) {
        if (self.show === false && currentQuestNum + 1 !== self.taskData.variant.length) {
          self.show = true;
          return staticService.showModal('exercise', 'Результат', 'Верно! Следующая цель: ' + self.taskData.variant[currentQuestNum + 1].final + ' Закройте окно и нажмите кнопку "Далее".', false);
        }
        self.show = false;
        if (currentQuestNum + 1 !== self.taskData.variant.length) {
          currentQuestNum++;
          self.userAnswer.forEach(function (elem) {
            return elem.character = "";
          });
          self.userAnswer.forEach(function (elem) {
            return elem.question = "";
          });
          self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
          self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
          self.btnDisabledState.answer = true;
        } else {
          self.btnDisabledState.answer = true;
          self.show = true;
          self.end = true;
          // send data to userService (needs for statistics), query to staticService to show modal with comment
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', 'Отлично! Вы правильно ответили на все ' + self.completeAnswer + '. Нажмите кнопку "Продолжить", чтобы перейти на следующую страницу.', true);
        }
      } else {
        self.show = true;
        self.btnDisabledState.answer = true;
        self.btnDisabledState.restart = false;
        return staticService.showModal('exercise', 'Ваш результат', 'Неверно! Начните заново.', false);
      }
    };

    // restart
    self.removeRestart = function () {
      self.show = false;
      self.btnDisabledState.answer = true;
      self.btnDisabledState.restart = true;
      self.userAnswer.forEach(function (elem) {
        return elem.character = "";
      });
      self.userAnswer.forEach(function (elem) {
        return elem.question = "";
      });
      self.characterList = getArr("character", self.taskData.characterList, self.taskData.variant[currentQuestNum].characterNum);
      self.questionList = getArr("question", self.taskData.questionList, self.taskData.variant[currentQuestNum].questionNum);
    };

    self.removeRestart();
  }
})();
;(function () {
  'use strict';

  SingleChoiceCtrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskSingleChoice', {
    templateUrl: 'js/components/task-single-choice/taskSingleChoiceTmpl.html',
    controller: 'SingleChoiceCtrl',
    controllerAs: '$ctrl'
  }).controller('SingleChoiceCtrl', SingleChoiceCtrl);

  /* @ngInject */
  function SingleChoiceCtrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this17 = this;

    this.test = $attrs.test;
    this.currentTestQuestion = userService.currentTestQuestion;
    this.taskData = staticService.getData($stateParams, 'data');

    // составляем список вопросов и мешаем его
    // если запущено из теста
    if (this.test) {
      // console.log('SingleCCtrl:: test mode on')
      this.taskText = this.currentTestQuestion.question;
      // console.log('Question:',this.taskText)
      // TODO shuffle sync
      // this.questionList = _.shuffle(this.currentTestQuestion.answers);
      this.questionList = this.currentTestQuestion.answers;
      console.log('SingleCCtrl:: Answers:', this.questionList);
    } else {
      // Вопрос упражнения
      this.taskText = staticService.getData($stateParams, 'taskText');
      this.questionList = _.shuffle(staticService.getData($stateParams, 'questionList'));
    }

    // массив для работы с ответами
    this.active = [];

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 0;

    // кол-во попыток
    if (this.test) {
      this.attemptNum = -1;
    } else {
      this.attemptNum = this.taskData.attempts;
    }

    this.userAttempt = 0;

    for (var i = 0; i < this.questionList.length; i++) {
      this.active[i] = {};
      this.active[i].selected = 0;
    }

    this.showComment = false;

    angular.element(document).ready(function () {

      _this17.selectAnswer = function (index) {
        if (_this17.state == 2) {
          return;
        }

        _this17.active.forEach(function (item) {
          item.selected = 0;
        });
        _this17.active[index].selected = 1;
        if (_this17.test) {
          $scope.$emit('myTestState', 1);
        }
        _this17.state = 1;
      };

      _this17.checkAnswer = function (e) {
        if (e.target.classList.contains('btn_disabled')) {
          return;
        }

        if (_this17.userAttempt === _this17.attemptNum) {
          _this17.userAttempt = 0;
        }
        _this17.userAttempt++;
        _this17.state = 2;

        for (var i = 0; i < _this17.questionList.length; i++) {
          // console.log('taskSingleChoice:: упражнение не верно')
          if (_this17.questionList[i].right !== _this17.active[i].selected) {
            //упражнение провалено

            if (_this17.userAttempt == _this17.attemptNum && _this17.taskData.showAnswer) {
              showAnswer();
            }
            // to userService (баллы, статус, глава, страница)
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this17.taskData.messages[_this17.userAttempt], false);
            return;
          }
        }
        // console.log('taskSingleChoice:: упражнение верно')
        userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
        staticService.showModal('exercise', 'Ваш результат', _this17.taskData.messages[0], true);
      };

      _this17.removeRestart = function () {

        for (var i = 0; i < _this17.active.length; i++) {
          _this17.active[i].selected = false;
        }
        _this17.state = 0;

        _this17.questionList = _.shuffle(_this17.questionList);
      };

      var showAnswer = function showAnswer() {
        // console.log('taskSingleChoice:: showAnswer')
        for (var _i18 = 0; _i18 < _this17.questionList.length; _i18++) {
          _this17.active[_i18].selected = _this17.questionList[_i18].right;
        }
      };
    });
  }
})();
(function () {
  'use strict';

  TaskStrictSortableCtrl.$inject = ["$element", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').controller('TaskStrictSortableCtrl', TaskStrictSortableCtrl);

  /* @ngInject */
  function TaskStrictSortableCtrl($element, $stateParams, staticService, userService) {
    var self = this;

    self.taskData = JSON.parse(JSON.stringify(staticService.getData($stateParams, 'data')));
    // console.log('taskData',self.taskData)
    /*
    * self.taskData - the main object for this exercise
    *
    *  "data": {
    *    "options":{
    *      "attempts": 3,       // кол-во попыток
    *      "shuffle": true,     // мешать ответы?
    *      "showAnswer": true,  // показывать правильный ответ в конце
    *    },
    *    "exs": {
    *      "taskText": "",
    *      "variant": [{
    *        "content": ""
    *      }]
    *    }
    *  }
    */

    // attempt number
    var attemptNum = self.taskData.options.attempts,
        userAttempt = 0;

    self.taskText = self.taskData.exs.taskText;
    self.end = false;

    self.btnDisabledState = {
      restart: true,
      answer: false
    };

    angular.element(document).ready(function () {
      var itemList = $($element).find(".sortable-box__item");
      var basketsList = $($element).find(".sortable-box");

      // console.log('$element', $element);
      // console.log('itemList', itemList);
      // console.log('basketsList', basketsList);

      $($element).find('.sortable-box__item').draggable({
        containment: ".sortable-container",
        refreshPositions: true,
        revert: true
      });
      $($element).find('.sortable-box').droppable({
        drop: function drop(event, ui) {
          var overBlock = $(event.target).find('.sortable-box__item'),
              overBlockContent = overBlock.html(),
              prevNumber = ui.draggable.attr("data-number"),
              newNumber = overBlock.attr("data-number"),
              topPos = $(basketsList[prevNumber]).position().top - overBlock.position().top,
              leftPos = $(basketsList[prevNumber]).position().left - overBlock.position().left;

          overBlock.html(ui.draggable.html()).css({ 'z-index': 10000 });
          ui.draggable.html(overBlockContent);
        }
      });
      self.checkAnswer = function () {
        var answerList = $($element).find(".sortable-box__item");

        // console.log('>>> checkAnswer >', userAttempt);

        self.btnDisabledState.restart = false;
        self.btnDisabledState.answer = true;

        userAttempt === attemptNum ? userAttempt = 1 : userAttempt++;

        for (var i = 0; i < answerList.length; i++) {
          // console.log(i, $.trim($(answerList[i]).html().replace(/'/g, '"')));
          // console.log(i, $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"')));
          if ($.trim($(answerList[i]).html().replace(/'/g, '"')) !== $.trim(self.taskData.exs.variant[i].content.replace(/'/g, '"'))) {
            self.taskData.exs.variant[i].answer = false;
          } else {
            self.taskData.exs.variant[i].answer = true;
          }
        }
        // console.log('=>',self.taskData.exs.variant.filter((elem) => elem.answer === true).length)
        // console.log('=>',self.taskData.exs.variant.length)
        // console.log('=> userAttempt',userAttempt);
        if (self.taskData.exs.variant.filter(function (elem) {
          return elem.answer === true;
        }).length === self.taskData.exs.variant.length) {
          // верно
          userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[0], true);
        } else {

          if (userAttempt === attemptNum) {
            showAnswer();
          }

          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          return staticService.showModal('exercise', 'Ваш результат', self.taskData.messages[userAttempt], false);
        }
      };

      self.removeRestart = function () {
        // console.log('>>>> removeRestart >');
        self.btnDisabledState.restart = true;
        self.btnDisabledState.answer = false;

        var numberList = _.shuffle(_.range(basketsList.length));
        // console.log('>>>> removeRestart > numberList', numberList);
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[numberList[i]].content);
          var itemListHtml = $(itemList[i]).html(self.taskData.exs.variant[numberList[i]].content)[0];
          // console.log('>>>> removeRestart > self.taskData.exs.variant[numberList[i]].content', self.taskData.exs.variant[numberList[i]].content);
          // console.log('>>>> removeRestart > itemListHtml', itemListHtml);
        };
        self.taskData.exs.variant.forEach(function (elem) {
          return elem.answer = "";
        });
      };
      self.removeRestart();

      var showAnswer = function showAnswer() {
        for (var i = 0; i < itemList.length; i++) {
          $(itemList[i]).html(self.taskData.exs.variant[i].content);
          self.taskData.exs.variant[i].answer = true;
        }
      };
    });
  };
})();

;(function () {
  'use strict';

  SwapListCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService"];
  angular.module('courseApp').component('taskSwapList', {
    templateUrl: 'js/components/task-swap-list/taskSwapListTmpl.html',
    controller: 'SwapListCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListCtrl', SwapListCtrl);

  /* @ngInject */
  function SwapListCtrl($scope, $stateParams, staticService, userService) {
    var _this18 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var i = 0; i < this.taskExs.length; i++) {
        this.taskExs[i].questionList = _.shuffle(this.taskExs[i].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this18.userAttempt === _this18.attemptNum) {
        _this18.userAttempt = 0;
      }
      _this18.userAttempt++;
      _this18.state = 2;
      $(".task-swap-list_item").draggable('disable');

      var taskList = document.querySelectorAll('.task-swap-list');

      for (var _i19 = 0; _i19 < _this18.taskData.exs.length; _i19++) {
        var list = taskList[_i19].querySelectorAll('.task-swap-list_item');

        for (var j = 0; j < _this18.taskData.exs[_i19].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this18.taskData.exs[_i19].questionList[j].order) {
            // неправильно дан ответ
            if (_this18.userAttempt == _this18.attemptNum && _this18.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[_this18.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this18.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this18.state = 1;
      _this18.showRight = 0;
      $(".task-swap-list_item").draggable('enable');

      // мешаем вопросы
      if (_this18.taskOptions.shuffle) {
        for (var _i20 = 0; _i20 < _this18.taskExs.length; _i20++) {
          _this18.taskExs[_i20].questionList = _.shuffle(_this18.taskExs[_i20].questionList);
        }
      }
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this18.showRight = 1;
    };

    angular.element(document).ready(function () {
      $(function () {
        $(".task-swap-list_item").draggable({
          zIndex: 2,
          start: function start(e, ui) {},
          stop: function stop(e, ui) {
            // console.log(ui)
            ui.helper[0].style.top = '0px';
            ui.helper[0].style.left = '0px';
          }
        }).droppable({
          drop: function drop(event, ui) {
            if (this.state == 2) {
              return false;
            }
            // console.log('куда =>',$(this).get(0))
            // console.log('что =>',$(ui.draggable).get(0))
            swapNodes($(this).get(0), $(ui.draggable).get(0));
          } });
      });

      function swapNodes(a, b) {
        // запрет перетаскивания на фиксированные элементы
        if (a.classList.contains('task-swap-list_item__fixed')) {
          // console.warn('drop on fixed')
          return;
        }
        var aparent = a.parentNode;
        var asibling = a.nextSibling === b ? a : a.nextSibling;
        b.parentNode.insertBefore(a, b);
        aparent.insertBefore(b, asibling);

        b.style.left = '0px';
        b.style.top = '0px';
      }
    });
  }; // end of SwapListCtrl()
})();
;(function () {
  'use strict';

  SwapListSortableCtrl.$inject = ["$scope", "$stateParams", "staticService", "userService", "$timeout"];
  angular.module('courseApp').component('taskSwapListSortable', {
    templateUrl: 'js/components/task-swap-list-sortable/taskSwapListSortableTmpl.html',
    controller: 'SwapListSortableCtrl',
    controllerAs: '$ctrl'
  }).controller('SwapListSortableCtrl', SwapListSortableCtrl);

  /* @ngInject */
  function SwapListSortableCtrl($scope, $stateParams, staticService, userService, $timeout) {
    var _this19 = this;

    // TODO:

    // main task info
    this.taskData = staticService.getData($stateParams, 'data');

    this.taskOptions = this.taskData.options; // obj
    this.taskExs = angular.fromJson(angular.toJson(this.taskData.exs)); // arr

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;
    this.left_questions = [];

    for (var i = 0; i < this.taskExs[0].questionList.length; i++) {
      this.left_questions[i] = this.taskExs[0].questionList[i].phrase;
      // console.log("this.left_questions[i] -***********************" , this.left_questions[i])
    }
    // console.log("this.left_questions -***********************" , this.left_questions);


    this.showRight = 0;

    // кол-во попыток
    this.attemptNum = this.taskOptions.attempts;
    this.userAttempt = 0;

    // мешаем вопросы
    if (this.taskOptions.shuffle) {
      for (var _i21 = 0; _i21 < this.taskExs.length; _i21++) {
        this.taskExs[_i21].questionList = _.shuffle(this.taskExs[_i21].questionList);
      }
    }

    this.checkAnswer = function () {
      // console.log('SwapListCtrl:: checkAnswer:')
      if (_this19.userAttempt === _this19.attemptNum) {
        _this19.userAttempt = 0;
      }
      _this19.userAttempt++;
      _this19.state = 2;
      $(".sortable").sortable("option", "disabled", true);
      var taskList = document.querySelectorAll('.task-swap-list__label-container');

      for (var _i22 = 0; _i22 < _this19.taskData.exs.length; _i22++) {
        var list = taskList[_i22].querySelectorAll('.task-swap-list__label-item');

        for (var j = 0; j < _this19.taskData.exs[_i22].questionList.length; j++) {
          // console.log('SwapListCtrl:: list', list[j].getAttribute("data-order"), this.taskData.exs[i].questionList[j].order)
          if (list[j].getAttribute("data-order") != _this19.taskData.exs[_i22].questionList[j].order) {
            // неправильно дан ответ
            if (_this19.userAttempt == _this19.attemptNum && _this19.taskOptions.showAnswer) {
              showAnswer();
            }
            userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
            staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[_this19.userAttempt], false);
            return;
          }
        }
      }
      // упражнение верно
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this19.taskData.messages[0], true);
    }; // end of checkAnswer()

    this.removeRestart = function () {
      _this19.state = 1;
      _this19.showRight = 0;
      // Повторная инициализация элемента jQuery после перестроения дерева DOM
      $timeout(function () {
        // console.log("timeout");
        $(".sortable").sortable({
          // containment: ".task-swap-list-sortable",
          placeholder: 'empty-space',
          start: function start(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.add("active");
          },
          stop: function stop(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.remove("active");
          }
        });
        $(".sortable").sortable("option", "disabled", false);
      }, 1);

      // $( ".sortable" ).sortable( "option", "disabled", false );
      if (_this19.userAttempt === _this19.attemptNum) {
        _this19.userAttempt = 0;
      };

      // мешаем вопросы
      if (_this19.taskOptions.shuffle) {
        for (var _i23 = 0; _i23 < _this19.taskExs.length; _i23++) {
          _this19.taskExs[_i23].questionList = _.shuffle(_this19.taskExs[_i23].questionList);
        }
      }
      $timeout(function () {
        phraseElementsSizeSet();
      }, 1);
    }; // end of removeRestart()

    var showAnswer = function showAnswer() {
      _this19.showRight = 1;
      $timeout(function () {
        phraseElementsSizeSet();
      }, 150);
    };

    // Set element height
    function phraseElementsSizeSet() {
      var phraseElements = document.querySelectorAll('.task-swap-list__phrase-item');
      var labelElements = document.querySelectorAll('.task-swap-list__label-item');
      // console.log('>>> phraseElements', phraseElements);

      for (var _i24 = 0; _i24 < phraseElements.length; _i24++) {
        // console.log('>>> labelElements > height', labelElements[i].offsetHeight);
        var labelElement = labelElements[_i24];
        var labelElementStyle = getComputedStyle(labelElement);

        // console.log('>>> labelElementsStyle.paddingTop', parseInt(labelElementStyle.paddingTop));
        // console.log('>>> labelElementsStyle.paddingBottom', labelElementStyle.paddingBottom);
        // console.log('>>> labelElementsStyle.borderTop', labelElementStyle.borderTopWidth);
        // console.log('>>> labelElementsStyle.borderBottom', labelElementStyle.borderBottomWidth);

        phraseElements[_i24].style.height = labelElements[_i24].offsetHeight - parseInt(labelElementStyle.paddingTop) - parseInt(labelElementStyle.paddingBottom) - parseInt(labelElementStyle.borderTopWidth) - parseInt(labelElementStyle.borderBottomWidth) + 'px';
        // phraseElements[i].style.height = labelElements[i].clientHeight  + 'px';
        phraseElements[_i24].style.paddingTop = parseInt(labelElementStyle.paddingTop) + 'px';
        phraseElements[_i24].style.paddingBottom = parseInt(labelElementStyle.paddingBottom) + 'px';
        phraseElements[_i24].style.borderTopWidth = parseInt(labelElementStyle.borderTopWidth) + 'px';
        phraseElements[_i24].style.borderBottomWidth = parseInt(labelElementStyle.borderBottomWidth) + 'px';
        // console.log('>>> phraseElements > height', phraseElements[i].offsetHeight);
      }
    }

    // TODO:
    // ready() deprecated, use angular.element(callback) instead of angular.element(document).ready(callback)
    angular.element(document).ready(function () {
      $(function () {
        // Инициализация элемента jQuery
        $(".sortable").sortable({
          // containment: ".task-swap-list-sortable",
          axis: "y",
          placeholder: 'empty-space',
          start: function start(event, ui) {
            console.log(ui.item);
            ui.item[0].classList.add("active");
          },
          stop: function stop(event, ui) {
            console.log(ui.item);
            $timeout(function () {
              ui.item[0].classList.remove("active");
            }, 0);
            phraseElementsSizeSet();
          }
        });
      });
      // $timeout(function () {
      phraseElementsSizeSet();
      // }, 1);
    });
  } // end of SwapListCtrl()
})();

;(function () {
  'use strict';

  taskTextInput1Ctrl.$inject = ["$scope", "$stateParams", "$attrs", "staticService", "userService"];
  angular.module('courseApp').component('taskTextInput1', {
    templateUrl: 'js/components/task-text-input/task-text-input-1/taskTextInput1Tmpl.html',
    controller: 'taskTextInput1Ctrl',
    controllerAs: '$ctrl'
  }).controller('taskTextInput1Ctrl', taskTextInput1Ctrl);

  /* @ngInject */
  function taskTextInput1Ctrl($scope, $stateParams, $attrs, staticService, userService) {
    var _this20 = this;

    // состояние упражнения:
    // 0 - ответа ещё нет, 1 - есть ответ, 2 - нажата кнопка «проверить»
    this.state = 1;

    this.taskData = staticService.getData($stateParams, 'data'); // obj
    this.taskExs = JSON.parse(JSON.stringify(this.taskData.exs))[0]; // arr

    // console.log('taskTextInput1Ctrl::', this.taskData)

    this.userAttempt = 0;
    this.attemptNum = this.taskData.options.attempts;

    this.checkAnswer = function () {
      if (_this20.state == 2) {
        return;
      }

      if (_this20.userAttempt === _this20.attemptNum) {
        _this20.userAttempt = 0;
      }
      _this20.userAttempt++;
      _this20.state = 2;

      var inputs = document.getElementsByClassName('task-input');

      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this20.taskExs.questionList.length; j++) {
        // console.log('taskTextInput1Ctrl:: =>',inputs[j].value,  this.taskExs.questionList[j].label)
        if (inputs[j].value != _this20.taskExs.questionList[j].label) {
          // неправильный ответ
          if (_this20.userAttempt == _this20.attemptNum) {
            // console.log('taskTextInput1Ctrl:: attempt 3')
            showAnswer();
          }
          // to userService (баллы, статус, глава, страница)
          userService.setUserProgress(0, 0, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
          // to staticService (индекс, заголовок, тело соощения)
          staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages[_this20.userAttempt], false);
          return;
        }
      }
      // }
      // правильный ответ
      _this20.userAttempt = 0;
      userService.setUserProgress(100, 1, Number($stateParams.chapter) - 1, Number($stateParams.page) - 1);
      staticService.showModal('exercise', 'Ваш результат', _this20.taskData.messages[0], true);
    };

    this.removeRestart = function () {
      _this20.state = 1;
      // this.userAttempt = 0;
      var inputs = document.getElementsByClassName('task-input');
      for (var i = 0; i < inputs.length; i++) {
        inputs[i].value = '';
      }
    };

    var showAnswer = function showAnswer() {
      var inputs = document.getElementsByClassName('task-input');
      // for (let i = 0; i < this.taskExs.length; i++) {
      for (var j = 0; j < _this20.taskExs.questionList.length; j++) {
        inputs[j].value = _this20.taskExs.questionList[j].label;
      }
      // }
    }; // end of showAnswer()

    // angular.element(document).ready( () => {} )
  }
})();